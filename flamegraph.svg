<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="5206" onload="init(evt)" viewBox="0 0 1200 5206" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="5206" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="5189.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="5189.00"> </text><svg id="frames" x="10" width="1180" total_samples="745362640"><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (11,166,087 samples, 1.50%)</title><rect x="0.0000%" y="5125" width="1.4981%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="11166087"/><text x="0.2500%" y="5135.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (715,188 samples, 0.10%)</title><rect x="1.4981%" y="5125" width="0.0960%" height="15" fill="rgb(217,0,24)" fg:x="11166087" fg:w="715188"/><text x="1.7481%" y="5135.50"></text></g><g><title>serde::de::MapAccess::next_entry (715,188 samples, 0.10%)</title><rect x="1.4981%" y="5109" width="0.0960%" height="15" fill="rgb(221,193,54)" fg:x="11166087" fg:w="715188"/><text x="1.7481%" y="5119.50"></text></g><g><title>serde::de::MapAccess::next_entry_seed (715,188 samples, 0.10%)</title><rect x="1.4981%" y="5093" width="0.0960%" height="15" fill="rgb(248,212,6)" fg:x="11166087" fg:w="715188"/><text x="1.7481%" y="5103.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (715,188 samples, 0.10%)</title><rect x="1.4981%" y="5077" width="0.0960%" height="15" fill="rgb(208,68,35)" fg:x="11166087" fg:w="715188"/><text x="1.7481%" y="5087.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (715,188 samples, 0.10%)</title><rect x="1.4981%" y="5061" width="0.0960%" height="15" fill="rgb(232,128,0)" fg:x="11166087" fg:w="715188"/><text x="1.7481%" y="5071.50"></text></g><g><title>[libc.so.6] (2,482,333 samples, 0.33%)</title><rect x="1.5940%" y="5125" width="0.3330%" height="15" fill="rgb(207,160,47)" fg:x="11881275" fg:w="2482333"/><text x="1.8440%" y="5135.50"></text></g><g><title>[main] (678,927 samples, 0.09%)</title><rect x="1.9271%" y="5125" width="0.0911%" height="15" fill="rgb(228,23,34)" fg:x="14363608" fg:w="678927"/><text x="2.1771%" y="5135.50"></text></g><g><title>core::fmt::builders::DebugSet::entry (678,927 samples, 0.09%)</title><rect x="1.9271%" y="5109" width="0.0911%" height="15" fill="rgb(218,30,26)" fg:x="14363608" fg:w="678927"/><text x="2.1771%" y="5119.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4,471,355 samples, 0.60%)</title><rect x="2.3509%" y="5109" width="0.5999%" height="15" fill="rgb(220,122,19)" fg:x="17523098" fg:w="4471355"/><text x="2.6009%" y="5119.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,319,828 samples, 0.18%)</title><rect x="2.9508%" y="5109" width="0.1771%" height="15" fill="rgb(250,228,42)" fg:x="21994453" fg:w="1319828"/><text x="3.2008%" y="5119.50"></text></g><g><title>[libc.so.6] (4,958,313 samples, 0.67%)</title><rect x="3.1279%" y="5109" width="0.6652%" height="15" fill="rgb(240,193,28)" fg:x="23314281" fg:w="4958313"/><text x="3.3779%" y="5119.50"></text></g><g><title>__rdl_dealloc (1,339,083 samples, 0.18%)</title><rect x="3.7931%" y="5109" width="0.1797%" height="15" fill="rgb(216,20,37)" fg:x="28272594" fg:w="1339083"/><text x="4.0431%" y="5119.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1,339,083 samples, 0.18%)</title><rect x="3.7931%" y="5093" width="0.1797%" height="15" fill="rgb(206,188,39)" fg:x="28272594" fg:w="1339083"/><text x="4.0431%" y="5103.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (596,367 samples, 0.08%)</title><rect x="3.9728%" y="5109" width="0.0800%" height="15" fill="rgb(217,207,13)" fg:x="29611677" fg:w="596367"/><text x="4.2228%" y="5119.50"></text></g><g><title>cfree (1,066,660 samples, 0.14%)</title><rect x="4.0528%" y="5109" width="0.1431%" height="15" fill="rgb(231,73,38)" fg:x="30208044" fg:w="1066660"/><text x="4.3028%" y="5119.50"></text></g><g><title>core::hash::BuildHasher::hash_one (14,932,325 samples, 2.00%)</title><rect x="4.1959%" y="5109" width="2.0034%" height="15" fill="rgb(225,20,46)" fg:x="31274704" fg:w="14932325"/><text x="4.4459%" y="5119.50">c..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (12,297,205 samples, 1.65%)</title><rect x="4.5494%" y="5093" width="1.6498%" height="15" fill="rgb(210,31,41)" fg:x="33909824" fg:w="12297205"/><text x="4.7994%" y="5103.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (12,297,205 samples, 1.65%)</title><rect x="4.5494%" y="5077" width="1.6498%" height="15" fill="rgb(221,200,47)" fg:x="33909824" fg:w="12297205"/><text x="4.7994%" y="5087.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (12,297,205 samples, 1.65%)</title><rect x="4.5494%" y="5061" width="1.6498%" height="15" fill="rgb(226,26,5)" fg:x="33909824" fg:w="12297205"/><text x="4.7994%" y="5071.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (12,297,205 samples, 1.65%)</title><rect x="4.5494%" y="5045" width="1.6498%" height="15" fill="rgb(249,33,26)" fg:x="33909824" fg:w="12297205"/><text x="4.7994%" y="5055.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (12,297,205 samples, 1.65%)</title><rect x="4.5494%" y="5029" width="1.6498%" height="15" fill="rgb(235,183,28)" fg:x="33909824" fg:w="12297205"/><text x="4.7994%" y="5039.50"></text></g><g><title>core::hash::Hasher::write_u8 (1,225,362 samples, 0.16%)</title><rect x="6.0349%" y="5013" width="0.1644%" height="15" fill="rgb(221,5,38)" fg:x="44981667" fg:w="1225362"/><text x="6.2849%" y="5023.50"></text></g><g><title>hashbrown::map::make_hash (1,344,009 samples, 0.18%)</title><rect x="8.9463%" y="5045" width="0.1803%" height="15" fill="rgb(247,18,42)" fg:x="66682389" fg:w="1344009"/><text x="9.1963%" y="5055.50"></text></g><g><title>main::benchmark::node_has_class_id (23,155,752 samples, 3.11%)</title><rect x="6.1993%" y="5109" width="3.1066%" height="15" fill="rgb(241,131,45)" fg:x="46207029" fg:w="23155752"/><text x="6.4493%" y="5119.50">mai..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (2,680,392 samples, 0.36%)</title><rect x="8.9463%" y="5093" width="0.3596%" height="15" fill="rgb(249,31,29)" fg:x="66682389" fg:w="2680392"/><text x="9.1963%" y="5103.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (2,680,392 samples, 0.36%)</title><rect x="8.9463%" y="5077" width="0.3596%" height="15" fill="rgb(225,111,53)" fg:x="66682389" fg:w="2680392"/><text x="9.1963%" y="5087.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (2,680,392 samples, 0.36%)</title><rect x="8.9463%" y="5061" width="0.3596%" height="15" fill="rgb(238,160,17)" fg:x="66682389" fg:w="2680392"/><text x="9.1963%" y="5071.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (1,336,383 samples, 0.18%)</title><rect x="9.1266%" y="5045" width="0.1793%" height="15" fill="rgb(214,148,48)" fg:x="68026398" fg:w="1336383"/><text x="9.3766%" y="5055.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1,336,383 samples, 0.18%)</title><rect x="9.1266%" y="5029" width="0.1793%" height="15" fill="rgb(232,36,49)" fg:x="68026398" fg:w="1336383"/><text x="9.3766%" y="5039.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1,336,383 samples, 0.18%)</title><rect x="9.1266%" y="5013" width="0.1793%" height="15" fill="rgb(209,103,24)" fg:x="68026398" fg:w="1336383"/><text x="9.3766%" y="5023.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (1,336,383 samples, 0.18%)</title><rect x="9.1266%" y="4997" width="0.1793%" height="15" fill="rgb(229,88,8)" fg:x="68026398" fg:w="1336383"/><text x="9.3766%" y="5007.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (1,336,383 samples, 0.18%)</title><rect x="9.1266%" y="4981" width="0.1793%" height="15" fill="rgb(213,181,19)" fg:x="68026398" fg:w="1336383"/><text x="9.3766%" y="4991.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (1,336,383 samples, 0.18%)</title><rect x="9.1266%" y="4965" width="0.1793%" height="15" fill="rgb(254,191,54)" fg:x="68026398" fg:w="1336383"/><text x="9.3766%" y="4975.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1,336,383 samples, 0.18%)</title><rect x="9.1266%" y="4949" width="0.1793%" height="15" fill="rgb(241,83,37)" fg:x="68026398" fg:w="1336383"/><text x="9.3766%" y="4959.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (1,336,383 samples, 0.18%)</title><rect x="9.1266%" y="4933" width="0.1793%" height="15" fill="rgb(233,36,39)" fg:x="68026398" fg:w="1336383"/><text x="9.3766%" y="4943.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1,336,383 samples, 0.18%)</title><rect x="9.1266%" y="4917" width="0.1793%" height="15" fill="rgb(226,3,54)" fg:x="68026398" fg:w="1336383"/><text x="9.3766%" y="4927.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (1,336,383 samples, 0.18%)</title><rect x="9.1266%" y="4901" width="0.1793%" height="15" fill="rgb(245,192,40)" fg:x="68026398" fg:w="1336383"/><text x="9.3766%" y="4911.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1,336,383 samples, 0.18%)</title><rect x="9.1266%" y="4885" width="0.1793%" height="15" fill="rgb(238,167,29)" fg:x="68026398" fg:w="1336383"/><text x="9.3766%" y="4895.50"></text></g><g><title>main::benchmark::matches_class_id (3,842,980 samples, 0.52%)</title><rect x="9.9488%" y="5093" width="0.5156%" height="15" fill="rgb(232,182,51)" fg:x="74154302" fg:w="3842980"/><text x="10.1988%" y="5103.50"></text></g><g><title>main::benchmark::process_node_generated_from_scratch (12,424,088 samples, 1.67%)</title><rect x="9.3059%" y="5109" width="1.6669%" height="15" fill="rgb(231,60,39)" fg:x="69362781" fg:w="12424088"/><text x="9.5559%" y="5119.50"></text></g><g><title>main::benchmark::matches_id_id (3,789,587 samples, 0.51%)</title><rect x="10.4643%" y="5093" width="0.5084%" height="15" fill="rgb(208,69,12)" fg:x="77997282" fg:w="3789587"/><text x="10.7143%" y="5103.50"></text></g><g><title>main::benchmark::get_node_id_id (3,789,587 samples, 0.51%)</title><rect x="10.4643%" y="5077" width="0.5084%" height="15" fill="rgb(235,93,37)" fg:x="77997282" fg:w="3789587"/><text x="10.7143%" y="5087.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (3,789,587 samples, 0.51%)</title><rect x="10.4643%" y="5061" width="0.5084%" height="15" fill="rgb(213,116,39)" fg:x="77997282" fg:w="3789587"/><text x="10.7143%" y="5071.50"></text></g><g><title>main::benchmark::get_node_id_id::_{{closure}} (3,789,587 samples, 0.51%)</title><rect x="10.4643%" y="5045" width="0.5084%" height="15" fill="rgb(222,207,29)" fg:x="77997282" fg:w="3789587"/><text x="10.7143%" y="5055.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (3,789,587 samples, 0.51%)</title><rect x="10.4643%" y="5029" width="0.5084%" height="15" fill="rgb(206,96,30)" fg:x="77997282" fg:w="3789587"/><text x="10.7143%" y="5039.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (3,789,587 samples, 0.51%)</title><rect x="10.4643%" y="5013" width="0.5084%" height="15" fill="rgb(218,138,4)" fg:x="77997282" fg:w="3789587"/><text x="10.7143%" y="5023.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (3,789,587 samples, 0.51%)</title><rect x="10.4643%" y="4997" width="0.5084%" height="15" fill="rgb(250,191,14)" fg:x="77997282" fg:w="3789587"/><text x="10.7143%" y="5007.50"></text></g><g><title>hashbrown::map::make_hash (3,789,587 samples, 0.51%)</title><rect x="10.4643%" y="4981" width="0.5084%" height="15" fill="rgb(239,60,40)" fg:x="77997282" fg:w="3789587"/><text x="10.7143%" y="4991.50"></text></g><g><title>[unknown] (68,532,875 samples, 9.19%)</title><rect x="2.0181%" y="5125" width="9.1946%" height="15" fill="rgb(206,27,48)" fg:x="15042535" fg:w="68532875"/><text x="2.2681%" y="5135.50">[unknown]</text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (1,788,541 samples, 0.24%)</title><rect x="10.9728%" y="5109" width="0.2400%" height="15" fill="rgb(225,35,8)" fg:x="81786869" fg:w="1788541"/><text x="11.2228%" y="5119.50"></text></g><g><title>__rdl_dealloc (2,748,943 samples, 0.37%)</title><rect x="11.2127%" y="5125" width="0.3688%" height="15" fill="rgb(250,213,24)" fg:x="83575410" fg:w="2748943"/><text x="11.4627%" y="5135.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (2,748,943 samples, 0.37%)</title><rect x="11.2127%" y="5109" width="0.3688%" height="15" fill="rgb(247,123,22)" fg:x="83575410" fg:w="2748943"/><text x="11.4627%" y="5119.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;main::benchmark::WebLayoutFrameResult&gt;&gt; (6,039,617 samples, 0.81%)</title><rect x="11.5815%" y="4853" width="0.8103%" height="15" fill="rgb(231,138,38)" fg:x="86324353" fg:w="6039617"/><text x="11.8315%" y="4863.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6,039,617 samples, 0.81%)</title><rect x="11.5815%" y="4837" width="0.8103%" height="15" fill="rgb(231,145,46)" fg:x="86324353" fg:w="6039617"/><text x="11.8315%" y="4847.50"></text></g><g><title>core::ptr::drop_in_place&lt;[main::benchmark::WebLayoutFrameResult]&gt; (6,039,617 samples, 0.81%)</title><rect x="11.5815%" y="4821" width="0.8103%" height="15" fill="rgb(251,118,11)" fg:x="86324353" fg:w="6039617"/><text x="11.8315%" y="4831.50"></text></g><g><title>core::ptr::drop_in_place&lt;main::benchmark::WebLayoutFrameResult&gt; (6,039,617 samples, 0.81%)</title><rect x="11.5815%" y="4805" width="0.8103%" height="15" fill="rgb(217,147,25)" fg:x="86324353" fg:w="6039617"/><text x="11.8315%" y="4815.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (6,039,617 samples, 0.81%)</title><rect x="11.5815%" y="4789" width="0.8103%" height="15" fill="rgb(247,81,37)" fg:x="86324353" fg:w="6039617"/><text x="11.8315%" y="4799.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (6,039,617 samples, 0.81%)</title><rect x="11.5815%" y="4773" width="0.8103%" height="15" fill="rgb(209,12,38)" fg:x="86324353" fg:w="6039617"/><text x="11.8315%" y="4783.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (6,039,617 samples, 0.81%)</title><rect x="11.5815%" y="4757" width="0.8103%" height="15" fill="rgb(227,1,9)" fg:x="86324353" fg:w="6039617"/><text x="11.8315%" y="4767.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6,039,617 samples, 0.81%)</title><rect x="11.5815%" y="4741" width="0.8103%" height="15" fill="rgb(248,47,43)" fg:x="86324353" fg:w="6039617"/><text x="11.8315%" y="4751.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (6,039,617 samples, 0.81%)</title><rect x="11.5815%" y="4725" width="0.8103%" height="15" fill="rgb(221,10,30)" fg:x="86324353" fg:w="6039617"/><text x="11.8315%" y="4735.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (6,039,617 samples, 0.81%)</title><rect x="11.5815%" y="4709" width="0.8103%" height="15" fill="rgb(210,229,1)" fg:x="86324353" fg:w="6039617"/><text x="11.8315%" y="4719.50"></text></g><g><title>alloc::alloc::dealloc (6,039,617 samples, 0.81%)</title><rect x="11.5815%" y="4693" width="0.8103%" height="15" fill="rgb(222,148,37)" fg:x="86324353" fg:w="6039617"/><text x="11.8315%" y="4703.50"></text></g><g><title>cfree (6,039,617 samples, 0.81%)</title><rect x="11.5815%" y="4677" width="0.8103%" height="15" fill="rgb(234,67,33)" fg:x="86324353" fg:w="6039617"/><text x="11.8315%" y="4687.50"></text></g><g><title>[libc.so.6] (6,039,617 samples, 0.81%)</title><rect x="11.5815%" y="4661" width="0.8103%" height="15" fill="rgb(247,98,35)" fg:x="86324353" fg:w="6039617"/><text x="11.8315%" y="4671.50"></text></g><g><title>[libc.so.6] (6,039,617 samples, 0.81%)</title><rect x="11.5815%" y="4645" width="0.8103%" height="15" fill="rgb(247,138,52)" fg:x="86324353" fg:w="6039617"/><text x="11.8315%" y="4655.50"></text></g><g><title>[libc.so.6] (1,188,099 samples, 0.16%)</title><rect x="12.2324%" y="4629" width="0.1594%" height="15" fill="rgb(213,79,30)" fg:x="91175871" fg:w="1188099"/><text x="12.4824%" y="4639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1,323,368 samples, 0.18%)</title><rect x="12.3918%" y="4389" width="0.1775%" height="15" fill="rgb(246,177,23)" fg:x="92363970" fg:w="1323368"/><text x="12.6418%" y="4399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,323,368 samples, 0.18%)</title><rect x="12.3918%" y="4373" width="0.1775%" height="15" fill="rgb(230,62,27)" fg:x="92363970" fg:w="1323368"/><text x="12.6418%" y="4383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,323,368 samples, 0.18%)</title><rect x="12.3918%" y="4357" width="0.1775%" height="15" fill="rgb(216,154,8)" fg:x="92363970" fg:w="1323368"/><text x="12.6418%" y="4367.50"></text></g><g><title>alloc::slice::hack::to_vec (1,323,368 samples, 0.18%)</title><rect x="12.3918%" y="4341" width="0.1775%" height="15" fill="rgb(244,35,45)" fg:x="92363970" fg:w="1323368"/><text x="12.6418%" y="4351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1,323,368 samples, 0.18%)</title><rect x="12.3918%" y="4325" width="0.1775%" height="15" fill="rgb(251,115,12)" fg:x="92363970" fg:w="1323368"/><text x="12.6418%" y="4335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,323,368 samples, 0.18%)</title><rect x="12.3918%" y="4309" width="0.1775%" height="15" fill="rgb(240,54,50)" fg:x="92363970" fg:w="1323368"/><text x="12.6418%" y="4319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,323,368 samples, 0.18%)</title><rect x="12.3918%" y="4293" width="0.1775%" height="15" fill="rgb(233,84,52)" fg:x="92363970" fg:w="1323368"/><text x="12.6418%" y="4303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (1,323,368 samples, 0.18%)</title><rect x="12.3918%" y="4277" width="0.1775%" height="15" fill="rgb(207,117,47)" fg:x="92363970" fg:w="1323368"/><text x="12.6418%" y="4287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1,323,368 samples, 0.18%)</title><rect x="12.3918%" y="4261" width="0.1775%" height="15" fill="rgb(249,43,39)" fg:x="92363970" fg:w="1323368"/><text x="12.6418%" y="4271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,323,368 samples, 0.18%)</title><rect x="12.3918%" y="4245" width="0.1775%" height="15" fill="rgb(209,38,44)" fg:x="92363970" fg:w="1323368"/><text x="12.6418%" y="4255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,323,368 samples, 0.18%)</title><rect x="12.3918%" y="4229" width="0.1775%" height="15" fill="rgb(236,212,23)" fg:x="92363970" fg:w="1323368"/><text x="12.6418%" y="4239.50"></text></g><g><title>alloc::alloc::alloc (1,323,368 samples, 0.18%)</title><rect x="12.3918%" y="4213" width="0.1775%" height="15" fill="rgb(242,79,21)" fg:x="92363970" fg:w="1323368"/><text x="12.6418%" y="4223.50"></text></g><g><title>__rdl_alloc (1,323,368 samples, 0.18%)</title><rect x="12.3918%" y="4197" width="0.1775%" height="15" fill="rgb(211,96,35)" fg:x="92363970" fg:w="1323368"/><text x="12.6418%" y="4207.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1,323,368 samples, 0.18%)</title><rect x="12.3918%" y="4181" width="0.1775%" height="15" fill="rgb(253,215,40)" fg:x="92363970" fg:w="1323368"/><text x="12.6418%" y="4191.50"></text></g><g><title>core::ptr::read_volatile (1,221,616 samples, 0.16%)</title><rect x="12.5694%" y="3349" width="0.1639%" height="15" fill="rgb(211,81,21)" fg:x="93687338" fg:w="1221616"/><text x="12.8194%" y="3359.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2,545,729 samples, 0.34%)</title><rect x="12.5694%" y="3541" width="0.3415%" height="15" fill="rgb(208,190,38)" fg:x="93687338" fg:w="2545729"/><text x="12.8194%" y="3551.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2,545,729 samples, 0.34%)</title><rect x="12.5694%" y="3525" width="0.3415%" height="15" fill="rgb(235,213,38)" fg:x="93687338" fg:w="2545729"/><text x="12.8194%" y="3535.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2,545,729 samples, 0.34%)</title><rect x="12.5694%" y="3509" width="0.3415%" height="15" fill="rgb(237,122,38)" fg:x="93687338" fg:w="2545729"/><text x="12.8194%" y="3519.50"></text></g><g><title>alloc::slice::hack::to_vec (2,545,729 samples, 0.34%)</title><rect x="12.5694%" y="3493" width="0.3415%" height="15" fill="rgb(244,218,35)" fg:x="93687338" fg:w="2545729"/><text x="12.8194%" y="3503.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2,545,729 samples, 0.34%)</title><rect x="12.5694%" y="3477" width="0.3415%" height="15" fill="rgb(240,68,47)" fg:x="93687338" fg:w="2545729"/><text x="12.8194%" y="3487.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2,545,729 samples, 0.34%)</title><rect x="12.5694%" y="3461" width="0.3415%" height="15" fill="rgb(210,16,53)" fg:x="93687338" fg:w="2545729"/><text x="12.8194%" y="3471.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2,545,729 samples, 0.34%)</title><rect x="12.5694%" y="3445" width="0.3415%" height="15" fill="rgb(235,124,12)" fg:x="93687338" fg:w="2545729"/><text x="12.8194%" y="3455.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (2,545,729 samples, 0.34%)</title><rect x="12.5694%" y="3429" width="0.3415%" height="15" fill="rgb(224,169,11)" fg:x="93687338" fg:w="2545729"/><text x="12.8194%" y="3439.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (2,545,729 samples, 0.34%)</title><rect x="12.5694%" y="3413" width="0.3415%" height="15" fill="rgb(250,166,2)" fg:x="93687338" fg:w="2545729"/><text x="12.8194%" y="3423.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2,545,729 samples, 0.34%)</title><rect x="12.5694%" y="3397" width="0.3415%" height="15" fill="rgb(242,216,29)" fg:x="93687338" fg:w="2545729"/><text x="12.8194%" y="3407.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2,545,729 samples, 0.34%)</title><rect x="12.5694%" y="3381" width="0.3415%" height="15" fill="rgb(230,116,27)" fg:x="93687338" fg:w="2545729"/><text x="12.8194%" y="3391.50"></text></g><g><title>alloc::alloc::alloc (2,545,729 samples, 0.34%)</title><rect x="12.5694%" y="3365" width="0.3415%" height="15" fill="rgb(228,99,48)" fg:x="93687338" fg:w="2545729"/><text x="12.8194%" y="3375.50"></text></g><g><title>malloc (1,324,113 samples, 0.18%)</title><rect x="12.7333%" y="3349" width="0.1776%" height="15" fill="rgb(253,11,6)" fg:x="94908954" fg:w="1324113"/><text x="12.9833%" y="3359.50"></text></g><g><title>[libc.so.6] (1,324,113 samples, 0.18%)</title><rect x="12.7333%" y="3333" width="0.1776%" height="15" fill="rgb(247,143,39)" fg:x="94908954" fg:w="1324113"/><text x="12.9833%" y="3343.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1,265,164 samples, 0.17%)</title><rect x="12.9109%" y="3525" width="0.1697%" height="15" fill="rgb(236,97,10)" fg:x="96233067" fg:w="1265164"/><text x="13.1609%" y="3535.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,265,164 samples, 0.17%)</title><rect x="12.9109%" y="3509" width="0.1697%" height="15" fill="rgb(233,208,19)" fg:x="96233067" fg:w="1265164"/><text x="13.1609%" y="3519.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,265,164 samples, 0.17%)</title><rect x="12.9109%" y="3493" width="0.1697%" height="15" fill="rgb(216,164,2)" fg:x="96233067" fg:w="1265164"/><text x="13.1609%" y="3503.50"></text></g><g><title>alloc::slice::hack::to_vec (1,265,164 samples, 0.17%)</title><rect x="12.9109%" y="3477" width="0.1697%" height="15" fill="rgb(220,129,5)" fg:x="96233067" fg:w="1265164"/><text x="13.1609%" y="3487.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1,265,164 samples, 0.17%)</title><rect x="12.9109%" y="3461" width="0.1697%" height="15" fill="rgb(242,17,10)" fg:x="96233067" fg:w="1265164"/><text x="13.1609%" y="3471.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,265,164 samples, 0.17%)</title><rect x="12.9109%" y="3445" width="0.1697%" height="15" fill="rgb(242,107,0)" fg:x="96233067" fg:w="1265164"/><text x="13.1609%" y="3455.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,265,164 samples, 0.17%)</title><rect x="12.9109%" y="3429" width="0.1697%" height="15" fill="rgb(251,28,31)" fg:x="96233067" fg:w="1265164"/><text x="13.1609%" y="3439.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (1,265,164 samples, 0.17%)</title><rect x="12.9109%" y="3413" width="0.1697%" height="15" fill="rgb(233,223,10)" fg:x="96233067" fg:w="1265164"/><text x="13.1609%" y="3423.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1,265,164 samples, 0.17%)</title><rect x="12.9109%" y="3397" width="0.1697%" height="15" fill="rgb(215,21,27)" fg:x="96233067" fg:w="1265164"/><text x="13.1609%" y="3407.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,265,164 samples, 0.17%)</title><rect x="12.9109%" y="3381" width="0.1697%" height="15" fill="rgb(232,23,21)" fg:x="96233067" fg:w="1265164"/><text x="13.1609%" y="3391.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,265,164 samples, 0.17%)</title><rect x="12.9109%" y="3365" width="0.1697%" height="15" fill="rgb(244,5,23)" fg:x="96233067" fg:w="1265164"/><text x="13.1609%" y="3375.50"></text></g><g><title>alloc::alloc::alloc (1,265,164 samples, 0.17%)</title><rect x="12.9109%" y="3349" width="0.1697%" height="15" fill="rgb(226,81,46)" fg:x="96233067" fg:w="1265164"/><text x="13.1609%" y="3359.50"></text></g><g><title>malloc (1,265,164 samples, 0.17%)</title><rect x="12.9109%" y="3333" width="0.1697%" height="15" fill="rgb(247,70,30)" fg:x="96233067" fg:w="1265164"/><text x="13.1609%" y="3343.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1,230,471 samples, 0.17%)</title><rect x="13.0806%" y="3109" width="0.1651%" height="15" fill="rgb(212,68,19)" fg:x="97498231" fg:w="1230471"/><text x="13.3306%" y="3119.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1,227,356 samples, 0.16%)</title><rect x="13.2457%" y="2965" width="0.1647%" height="15" fill="rgb(240,187,13)" fg:x="98728702" fg:w="1227356"/><text x="13.4957%" y="2975.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,227,356 samples, 0.16%)</title><rect x="13.2457%" y="2949" width="0.1647%" height="15" fill="rgb(223,113,26)" fg:x="98728702" fg:w="1227356"/><text x="13.4957%" y="2959.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,227,356 samples, 0.16%)</title><rect x="13.2457%" y="2933" width="0.1647%" height="15" fill="rgb(206,192,2)" fg:x="98728702" fg:w="1227356"/><text x="13.4957%" y="2943.50"></text></g><g><title>alloc::slice::hack::to_vec (1,227,356 samples, 0.16%)</title><rect x="13.2457%" y="2917" width="0.1647%" height="15" fill="rgb(241,108,4)" fg:x="98728702" fg:w="1227356"/><text x="13.4957%" y="2927.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1,227,356 samples, 0.16%)</title><rect x="13.2457%" y="2901" width="0.1647%" height="15" fill="rgb(247,173,49)" fg:x="98728702" fg:w="1227356"/><text x="13.4957%" y="2911.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,227,356 samples, 0.16%)</title><rect x="13.2457%" y="2885" width="0.1647%" height="15" fill="rgb(224,114,35)" fg:x="98728702" fg:w="1227356"/><text x="13.4957%" y="2895.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,227,356 samples, 0.16%)</title><rect x="13.2457%" y="2869" width="0.1647%" height="15" fill="rgb(245,159,27)" fg:x="98728702" fg:w="1227356"/><text x="13.4957%" y="2879.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (1,227,356 samples, 0.16%)</title><rect x="13.2457%" y="2853" width="0.1647%" height="15" fill="rgb(245,172,44)" fg:x="98728702" fg:w="1227356"/><text x="13.4957%" y="2863.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1,227,356 samples, 0.16%)</title><rect x="13.2457%" y="2837" width="0.1647%" height="15" fill="rgb(236,23,11)" fg:x="98728702" fg:w="1227356"/><text x="13.4957%" y="2847.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,227,356 samples, 0.16%)</title><rect x="13.2457%" y="2821" width="0.1647%" height="15" fill="rgb(205,117,38)" fg:x="98728702" fg:w="1227356"/><text x="13.4957%" y="2831.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,227,356 samples, 0.16%)</title><rect x="13.2457%" y="2805" width="0.1647%" height="15" fill="rgb(237,72,25)" fg:x="98728702" fg:w="1227356"/><text x="13.4957%" y="2815.50"></text></g><g><title>alloc::alloc::alloc (1,227,356 samples, 0.16%)</title><rect x="13.2457%" y="2789" width="0.1647%" height="15" fill="rgb(244,70,9)" fg:x="98728702" fg:w="1227356"/><text x="13.4957%" y="2799.50"></text></g><g><title>malloc (1,227,356 samples, 0.16%)</title><rect x="13.2457%" y="2773" width="0.1647%" height="15" fill="rgb(217,125,39)" fg:x="98728702" fg:w="1227356"/><text x="13.4957%" y="2783.50"></text></g><g><title>[libc.so.6] (1,227,356 samples, 0.16%)</title><rect x="13.2457%" y="2757" width="0.1647%" height="15" fill="rgb(235,36,10)" fg:x="98728702" fg:w="1227356"/><text x="13.4957%" y="2767.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1,306,689 samples, 0.18%)</title><rect x="13.4104%" y="2533" width="0.1753%" height="15" fill="rgb(251,123,47)" fg:x="99956058" fg:w="1306689"/><text x="13.6604%" y="2543.50"></text></g><g><title>&lt;serde_json::value::Value as core::clone::Clone&gt;::clone (5,056,119 samples, 0.68%)</title><rect x="13.0806%" y="3397" width="0.6783%" height="15" fill="rgb(221,13,13)" fg:x="97498231" fg:w="5056119"/><text x="13.3306%" y="3407.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (5,056,119 samples, 0.68%)</title><rect x="13.0806%" y="3381" width="0.6783%" height="15" fill="rgb(238,131,9)" fg:x="97498231" fg:w="5056119"/><text x="13.3306%" y="3391.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (5,056,119 samples, 0.68%)</title><rect x="13.0806%" y="3365" width="0.6783%" height="15" fill="rgb(211,50,8)" fg:x="97498231" fg:w="5056119"/><text x="13.3306%" y="3375.50"></text></g><g><title>alloc::slice::hack::to_vec (5,056,119 samples, 0.68%)</title><rect x="13.0806%" y="3349" width="0.6783%" height="15" fill="rgb(245,182,24)" fg:x="97498231" fg:w="5056119"/><text x="13.3306%" y="3359.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (5,056,119 samples, 0.68%)</title><rect x="13.0806%" y="3333" width="0.6783%" height="15" fill="rgb(242,14,37)" fg:x="97498231" fg:w="5056119"/><text x="13.3306%" y="3343.50"></text></g><g><title>&lt;serde_json::value::Value as core::clone::Clone&gt;::clone (5,056,119 samples, 0.68%)</title><rect x="13.0806%" y="3317" width="0.6783%" height="15" fill="rgb(246,228,12)" fg:x="97498231" fg:w="5056119"/><text x="13.3306%" y="3327.50"></text></g><g><title>&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt; as core::clone::Clone&gt;::clone (5,056,119 samples, 0.68%)</title><rect x="13.0806%" y="3301" width="0.6783%" height="15" fill="rgb(213,55,15)" fg:x="97498231" fg:w="5056119"/><text x="13.3306%" y="3311.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone (5,056,119 samples, 0.68%)</title><rect x="13.0806%" y="3285" width="0.6783%" height="15" fill="rgb(209,9,3)" fg:x="97498231" fg:w="5056119"/><text x="13.3306%" y="3295.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (5,056,119 samples, 0.68%)</title><rect x="13.0806%" y="3269" width="0.6783%" height="15" fill="rgb(230,59,30)" fg:x="97498231" fg:w="5056119"/><text x="13.3306%" y="3279.50"></text></g><g><title>&lt;serde_json::value::Value as core::clone::Clone&gt;::clone (5,056,119 samples, 0.68%)</title><rect x="13.0806%" y="3253" width="0.6783%" height="15" fill="rgb(209,121,21)" fg:x="97498231" fg:w="5056119"/><text x="13.3306%" y="3263.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (5,056,119 samples, 0.68%)</title><rect x="13.0806%" y="3237" width="0.6783%" height="15" fill="rgb(220,109,13)" fg:x="97498231" fg:w="5056119"/><text x="13.3306%" y="3247.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (5,056,119 samples, 0.68%)</title><rect x="13.0806%" y="3221" width="0.6783%" height="15" fill="rgb(232,18,1)" fg:x="97498231" fg:w="5056119"/><text x="13.3306%" y="3231.50"></text></g><g><title>alloc::slice::hack::to_vec (5,056,119 samples, 0.68%)</title><rect x="13.0806%" y="3205" width="0.6783%" height="15" fill="rgb(215,41,42)" fg:x="97498231" fg:w="5056119"/><text x="13.3306%" y="3215.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (5,056,119 samples, 0.68%)</title><rect x="13.0806%" y="3189" width="0.6783%" height="15" fill="rgb(224,123,36)" fg:x="97498231" fg:w="5056119"/><text x="13.3306%" y="3199.50"></text></g><g><title>&lt;serde_json::value::Value as core::clone::Clone&gt;::clone (5,056,119 samples, 0.68%)</title><rect x="13.0806%" y="3173" width="0.6783%" height="15" fill="rgb(240,125,3)" fg:x="97498231" fg:w="5056119"/><text x="13.3306%" y="3183.50"></text></g><g><title>&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt; as core::clone::Clone&gt;::clone (5,056,119 samples, 0.68%)</title><rect x="13.0806%" y="3157" width="0.6783%" height="15" fill="rgb(205,98,50)" fg:x="97498231" fg:w="5056119"/><text x="13.3306%" y="3167.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone (5,056,119 samples, 0.68%)</title><rect x="13.0806%" y="3141" width="0.6783%" height="15" fill="rgb(205,185,37)" fg:x="97498231" fg:w="5056119"/><text x="13.3306%" y="3151.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (5,056,119 samples, 0.68%)</title><rect x="13.0806%" y="3125" width="0.6783%" height="15" fill="rgb(238,207,15)" fg:x="97498231" fg:w="5056119"/><text x="13.3306%" y="3135.50"></text></g><g><title>&lt;serde_json::value::Value as core::clone::Clone&gt;::clone (3,825,648 samples, 0.51%)</title><rect x="13.2457%" y="3109" width="0.5133%" height="15" fill="rgb(213,199,42)" fg:x="98728702" fg:w="3825648"/><text x="13.4957%" y="3119.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3,825,648 samples, 0.51%)</title><rect x="13.2457%" y="3093" width="0.5133%" height="15" fill="rgb(235,201,11)" fg:x="98728702" fg:w="3825648"/><text x="13.4957%" y="3103.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3,825,648 samples, 0.51%)</title><rect x="13.2457%" y="3077" width="0.5133%" height="15" fill="rgb(207,46,11)" fg:x="98728702" fg:w="3825648"/><text x="13.4957%" y="3087.50"></text></g><g><title>alloc::slice::hack::to_vec (3,825,648 samples, 0.51%)</title><rect x="13.2457%" y="3061" width="0.5133%" height="15" fill="rgb(241,35,35)" fg:x="98728702" fg:w="3825648"/><text x="13.4957%" y="3071.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3,825,648 samples, 0.51%)</title><rect x="13.2457%" y="3045" width="0.5133%" height="15" fill="rgb(243,32,47)" fg:x="98728702" fg:w="3825648"/><text x="13.4957%" y="3055.50"></text></g><g><title>&lt;serde_json::value::Value as core::clone::Clone&gt;::clone (3,825,648 samples, 0.51%)</title><rect x="13.2457%" y="3029" width="0.5133%" height="15" fill="rgb(247,202,23)" fg:x="98728702" fg:w="3825648"/><text x="13.4957%" y="3039.50"></text></g><g><title>&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt; as core::clone::Clone&gt;::clone (3,825,648 samples, 0.51%)</title><rect x="13.2457%" y="3013" width="0.5133%" height="15" fill="rgb(219,102,11)" fg:x="98728702" fg:w="3825648"/><text x="13.4957%" y="3023.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone (3,825,648 samples, 0.51%)</title><rect x="13.2457%" y="2997" width="0.5133%" height="15" fill="rgb(243,110,44)" fg:x="98728702" fg:w="3825648"/><text x="13.4957%" y="3007.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3,825,648 samples, 0.51%)</title><rect x="13.2457%" y="2981" width="0.5133%" height="15" fill="rgb(222,74,54)" fg:x="98728702" fg:w="3825648"/><text x="13.4957%" y="2991.50"></text></g><g><title>&lt;serde_json::value::Value as core::clone::Clone&gt;::clone (2,598,292 samples, 0.35%)</title><rect x="13.4104%" y="2965" width="0.3486%" height="15" fill="rgb(216,99,12)" fg:x="99956058" fg:w="2598292"/><text x="13.6604%" y="2975.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2,598,292 samples, 0.35%)</title><rect x="13.4104%" y="2949" width="0.3486%" height="15" fill="rgb(226,22,26)" fg:x="99956058" fg:w="2598292"/><text x="13.6604%" y="2959.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2,598,292 samples, 0.35%)</title><rect x="13.4104%" y="2933" width="0.3486%" height="15" fill="rgb(217,163,10)" fg:x="99956058" fg:w="2598292"/><text x="13.6604%" y="2943.50"></text></g><g><title>alloc::slice::hack::to_vec (2,598,292 samples, 0.35%)</title><rect x="13.4104%" y="2917" width="0.3486%" height="15" fill="rgb(213,25,53)" fg:x="99956058" fg:w="2598292"/><text x="13.6604%" y="2927.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2,598,292 samples, 0.35%)</title><rect x="13.4104%" y="2901" width="0.3486%" height="15" fill="rgb(252,105,26)" fg:x="99956058" fg:w="2598292"/><text x="13.6604%" y="2911.50"></text></g><g><title>&lt;serde_json::value::Value as core::clone::Clone&gt;::clone (2,598,292 samples, 0.35%)</title><rect x="13.4104%" y="2885" width="0.3486%" height="15" fill="rgb(220,39,43)" fg:x="99956058" fg:w="2598292"/><text x="13.6604%" y="2895.50"></text></g><g><title>&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt; as core::clone::Clone&gt;::clone (2,598,292 samples, 0.35%)</title><rect x="13.4104%" y="2869" width="0.3486%" height="15" fill="rgb(229,68,48)" fg:x="99956058" fg:w="2598292"/><text x="13.6604%" y="2879.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone (2,598,292 samples, 0.35%)</title><rect x="13.4104%" y="2853" width="0.3486%" height="15" fill="rgb(252,8,32)" fg:x="99956058" fg:w="2598292"/><text x="13.6604%" y="2863.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2,598,292 samples, 0.35%)</title><rect x="13.4104%" y="2837" width="0.3486%" height="15" fill="rgb(223,20,43)" fg:x="99956058" fg:w="2598292"/><text x="13.6604%" y="2847.50"></text></g><g><title>&lt;serde_json::value::Value as core::clone::Clone&gt;::clone (2,598,292 samples, 0.35%)</title><rect x="13.4104%" y="2821" width="0.3486%" height="15" fill="rgb(229,81,49)" fg:x="99956058" fg:w="2598292"/><text x="13.6604%" y="2831.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2,598,292 samples, 0.35%)</title><rect x="13.4104%" y="2805" width="0.3486%" height="15" fill="rgb(236,28,36)" fg:x="99956058" fg:w="2598292"/><text x="13.6604%" y="2815.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2,598,292 samples, 0.35%)</title><rect x="13.4104%" y="2789" width="0.3486%" height="15" fill="rgb(249,185,26)" fg:x="99956058" fg:w="2598292"/><text x="13.6604%" y="2799.50"></text></g><g><title>alloc::slice::hack::to_vec (2,598,292 samples, 0.35%)</title><rect x="13.4104%" y="2773" width="0.3486%" height="15" fill="rgb(249,174,33)" fg:x="99956058" fg:w="2598292"/><text x="13.6604%" y="2783.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2,598,292 samples, 0.35%)</title><rect x="13.4104%" y="2757" width="0.3486%" height="15" fill="rgb(233,201,37)" fg:x="99956058" fg:w="2598292"/><text x="13.6604%" y="2767.50"></text></g><g><title>&lt;serde_json::value::Value as core::clone::Clone&gt;::clone (2,598,292 samples, 0.35%)</title><rect x="13.4104%" y="2741" width="0.3486%" height="15" fill="rgb(221,78,26)" fg:x="99956058" fg:w="2598292"/><text x="13.6604%" y="2751.50"></text></g><g><title>&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt; as core::clone::Clone&gt;::clone (2,598,292 samples, 0.35%)</title><rect x="13.4104%" y="2725" width="0.3486%" height="15" fill="rgb(250,127,30)" fg:x="99956058" fg:w="2598292"/><text x="13.6604%" y="2735.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone (2,598,292 samples, 0.35%)</title><rect x="13.4104%" y="2709" width="0.3486%" height="15" fill="rgb(230,49,44)" fg:x="99956058" fg:w="2598292"/><text x="13.6604%" y="2719.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2,598,292 samples, 0.35%)</title><rect x="13.4104%" y="2693" width="0.3486%" height="15" fill="rgb(229,67,23)" fg:x="99956058" fg:w="2598292"/><text x="13.6604%" y="2703.50"></text></g><g><title>&lt;serde_json::value::Value as core::clone::Clone&gt;::clone (2,598,292 samples, 0.35%)</title><rect x="13.4104%" y="2677" width="0.3486%" height="15" fill="rgb(249,83,47)" fg:x="99956058" fg:w="2598292"/><text x="13.6604%" y="2687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2,598,292 samples, 0.35%)</title><rect x="13.4104%" y="2661" width="0.3486%" height="15" fill="rgb(215,43,3)" fg:x="99956058" fg:w="2598292"/><text x="13.6604%" y="2671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2,598,292 samples, 0.35%)</title><rect x="13.4104%" y="2645" width="0.3486%" height="15" fill="rgb(238,154,13)" fg:x="99956058" fg:w="2598292"/><text x="13.6604%" y="2655.50"></text></g><g><title>alloc::slice::hack::to_vec (2,598,292 samples, 0.35%)</title><rect x="13.4104%" y="2629" width="0.3486%" height="15" fill="rgb(219,56,2)" fg:x="99956058" fg:w="2598292"/><text x="13.6604%" y="2639.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2,598,292 samples, 0.35%)</title><rect x="13.4104%" y="2613" width="0.3486%" height="15" fill="rgb(233,0,4)" fg:x="99956058" fg:w="2598292"/><text x="13.6604%" y="2623.50"></text></g><g><title>&lt;serde_json::value::Value as core::clone::Clone&gt;::clone (2,598,292 samples, 0.35%)</title><rect x="13.4104%" y="2597" width="0.3486%" height="15" fill="rgb(235,30,7)" fg:x="99956058" fg:w="2598292"/><text x="13.6604%" y="2607.50"></text></g><g><title>&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt; as core::clone::Clone&gt;::clone (2,598,292 samples, 0.35%)</title><rect x="13.4104%" y="2581" width="0.3486%" height="15" fill="rgb(250,79,13)" fg:x="99956058" fg:w="2598292"/><text x="13.6604%" y="2591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone (2,598,292 samples, 0.35%)</title><rect x="13.4104%" y="2565" width="0.3486%" height="15" fill="rgb(211,146,34)" fg:x="99956058" fg:w="2598292"/><text x="13.6604%" y="2575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2,598,292 samples, 0.35%)</title><rect x="13.4104%" y="2549" width="0.3486%" height="15" fill="rgb(228,22,38)" fg:x="99956058" fg:w="2598292"/><text x="13.6604%" y="2559.50"></text></g><g><title>&lt;serde_json::value::Value as core::clone::Clone&gt;::clone (1,291,603 samples, 0.17%)</title><rect x="13.5857%" y="2533" width="0.1733%" height="15" fill="rgb(235,168,5)" fg:x="101262747" fg:w="1291603"/><text x="13.8357%" y="2543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,291,603 samples, 0.17%)</title><rect x="13.5857%" y="2517" width="0.1733%" height="15" fill="rgb(221,155,16)" fg:x="101262747" fg:w="1291603"/><text x="13.8357%" y="2527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,291,603 samples, 0.17%)</title><rect x="13.5857%" y="2501" width="0.1733%" height="15" fill="rgb(215,215,53)" fg:x="101262747" fg:w="1291603"/><text x="13.8357%" y="2511.50"></text></g><g><title>alloc::slice::hack::to_vec (1,291,603 samples, 0.17%)</title><rect x="13.5857%" y="2485" width="0.1733%" height="15" fill="rgb(223,4,10)" fg:x="101262747" fg:w="1291603"/><text x="13.8357%" y="2495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1,291,603 samples, 0.17%)</title><rect x="13.5857%" y="2469" width="0.1733%" height="15" fill="rgb(234,103,6)" fg:x="101262747" fg:w="1291603"/><text x="13.8357%" y="2479.50"></text></g><g><title>&lt;serde_json::value::Value as core::clone::Clone&gt;::clone (1,291,603 samples, 0.17%)</title><rect x="13.5857%" y="2453" width="0.1733%" height="15" fill="rgb(227,97,0)" fg:x="101262747" fg:w="1291603"/><text x="13.8357%" y="2463.50"></text></g><g><title>&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt; as core::clone::Clone&gt;::clone (1,291,603 samples, 0.17%)</title><rect x="13.5857%" y="2437" width="0.1733%" height="15" fill="rgb(234,150,53)" fg:x="101262747" fg:w="1291603"/><text x="13.8357%" y="2447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone (1,291,603 samples, 0.17%)</title><rect x="13.5857%" y="2421" width="0.1733%" height="15" fill="rgb(228,201,54)" fg:x="101262747" fg:w="1291603"/><text x="13.8357%" y="2431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1,291,603 samples, 0.17%)</title><rect x="13.5857%" y="2405" width="0.1733%" height="15" fill="rgb(222,22,37)" fg:x="101262747" fg:w="1291603"/><text x="13.8357%" y="2415.50"></text></g><g><title>&lt;serde_json::value::Value as core::clone::Clone&gt;::clone (1,291,603 samples, 0.17%)</title><rect x="13.5857%" y="2389" width="0.1733%" height="15" fill="rgb(237,53,32)" fg:x="101262747" fg:w="1291603"/><text x="13.8357%" y="2399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,291,603 samples, 0.17%)</title><rect x="13.5857%" y="2373" width="0.1733%" height="15" fill="rgb(233,25,53)" fg:x="101262747" fg:w="1291603"/><text x="13.8357%" y="2383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,291,603 samples, 0.17%)</title><rect x="13.5857%" y="2357" width="0.1733%" height="15" fill="rgb(210,40,34)" fg:x="101262747" fg:w="1291603"/><text x="13.8357%" y="2367.50"></text></g><g><title>alloc::slice::hack::to_vec (1,291,603 samples, 0.17%)</title><rect x="13.5857%" y="2341" width="0.1733%" height="15" fill="rgb(241,220,44)" fg:x="101262747" fg:w="1291603"/><text x="13.8357%" y="2351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1,291,603 samples, 0.17%)</title><rect x="13.5857%" y="2325" width="0.1733%" height="15" fill="rgb(235,28,35)" fg:x="101262747" fg:w="1291603"/><text x="13.8357%" y="2335.50"></text></g><g><title>&lt;serde_json::value::Value as core::clone::Clone&gt;::clone (1,291,603 samples, 0.17%)</title><rect x="13.5857%" y="2309" width="0.1733%" height="15" fill="rgb(210,56,17)" fg:x="101262747" fg:w="1291603"/><text x="13.8357%" y="2319.50"></text></g><g><title>&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt; as core::clone::Clone&gt;::clone (1,291,603 samples, 0.17%)</title><rect x="13.5857%" y="2293" width="0.1733%" height="15" fill="rgb(224,130,29)" fg:x="101262747" fg:w="1291603"/><text x="13.8357%" y="2303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone (1,291,603 samples, 0.17%)</title><rect x="13.5857%" y="2277" width="0.1733%" height="15" fill="rgb(235,212,8)" fg:x="101262747" fg:w="1291603"/><text x="13.8357%" y="2287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1,291,603 samples, 0.17%)</title><rect x="13.5857%" y="2261" width="0.1733%" height="15" fill="rgb(223,33,50)" fg:x="101262747" fg:w="1291603"/><text x="13.8357%" y="2271.50"></text></g><g><title>&lt;serde_json::value::Value as core::clone::Clone&gt;::clone (1,291,603 samples, 0.17%)</title><rect x="13.5857%" y="2245" width="0.1733%" height="15" fill="rgb(219,149,13)" fg:x="101262747" fg:w="1291603"/><text x="13.8357%" y="2255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,291,603 samples, 0.17%)</title><rect x="13.5857%" y="2229" width="0.1733%" height="15" fill="rgb(250,156,29)" fg:x="101262747" fg:w="1291603"/><text x="13.8357%" y="2239.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,291,603 samples, 0.17%)</title><rect x="13.5857%" y="2213" width="0.1733%" height="15" fill="rgb(216,193,19)" fg:x="101262747" fg:w="1291603"/><text x="13.8357%" y="2223.50"></text></g><g><title>alloc::slice::hack::to_vec (1,291,603 samples, 0.17%)</title><rect x="13.5857%" y="2197" width="0.1733%" height="15" fill="rgb(216,135,14)" fg:x="101262747" fg:w="1291603"/><text x="13.8357%" y="2207.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1,291,603 samples, 0.17%)</title><rect x="13.5857%" y="2181" width="0.1733%" height="15" fill="rgb(241,47,5)" fg:x="101262747" fg:w="1291603"/><text x="13.8357%" y="2191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,291,603 samples, 0.17%)</title><rect x="13.5857%" y="2165" width="0.1733%" height="15" fill="rgb(233,42,35)" fg:x="101262747" fg:w="1291603"/><text x="13.8357%" y="2175.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,NodeType&gt;,alloc::collections::btree::node::marker::Edge&gt;::right_kv (1,312,267 samples, 0.18%)</title><rect x="13.7590%" y="3397" width="0.1761%" height="15" fill="rgb(231,13,6)" fg:x="102554350" fg:w="1312267"/><text x="14.0090%" y="3407.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;::push (1,328,922 samples, 0.18%)</title><rect x="13.9350%" y="3397" width="0.1783%" height="15" fill="rgb(207,181,40)" fg:x="103866617" fg:w="1328922"/><text x="14.1850%" y="3407.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;::push_with_handle (1,328,922 samples, 0.18%)</title><rect x="13.9350%" y="3381" width="0.1783%" height="15" fill="rgb(254,173,49)" fg:x="103866617" fg:w="1328922"/><text x="14.1850%" y="3391.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (1,328,922 samples, 0.18%)</title><rect x="13.9350%" y="3365" width="0.1783%" height="15" fill="rgb(221,1,38)" fg:x="103866617" fg:w="1328922"/><text x="14.1850%" y="3375.50"></text></g><g><title>&lt;serde_json::value::Value as core::clone::Clone&gt;::clone (8,958,759 samples, 1.20%)</title><rect x="13.0806%" y="3461" width="1.2019%" height="15" fill="rgb(206,124,46)" fg:x="97498231" fg:w="8958759"/><text x="13.3306%" y="3471.50"></text></g><g><title>&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt; as core::clone::Clone&gt;::clone (8,958,759 samples, 1.20%)</title><rect x="13.0806%" y="3445" width="1.2019%" height="15" fill="rgb(249,21,11)" fg:x="97498231" fg:w="8958759"/><text x="13.3306%" y="3455.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone (8,958,759 samples, 1.20%)</title><rect x="13.0806%" y="3429" width="1.2019%" height="15" fill="rgb(222,201,40)" fg:x="97498231" fg:w="8958759"/><text x="13.3306%" y="3439.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (8,958,759 samples, 1.20%)</title><rect x="13.0806%" y="3413" width="1.2019%" height="15" fill="rgb(235,61,29)" fg:x="97498231" fg:w="8958759"/><text x="13.3306%" y="3423.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::new (1,261,451 samples, 0.17%)</title><rect x="14.1133%" y="3397" width="0.1692%" height="15" fill="rgb(219,207,3)" fg:x="105195539" fg:w="1261451"/><text x="14.3633%" y="3407.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Leaf&gt;::new_leaf (1,261,451 samples, 0.17%)</title><rect x="14.1133%" y="3381" width="0.1692%" height="15" fill="rgb(222,56,46)" fg:x="105195539" fg:w="1261451"/><text x="14.3633%" y="3391.50"></text></g><g><title>alloc::collections::btree::node::LeafNode&lt;K,V&gt;::new (1,261,451 samples, 0.17%)</title><rect x="14.1133%" y="3365" width="0.1692%" height="15" fill="rgb(239,76,54)" fg:x="105195539" fg:w="1261451"/><text x="14.3633%" y="3375.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (1,261,451 samples, 0.17%)</title><rect x="14.1133%" y="3349" width="0.1692%" height="15" fill="rgb(231,124,27)" fg:x="105195539" fg:w="1261451"/><text x="14.3633%" y="3359.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (1,261,451 samples, 0.17%)</title><rect x="14.1133%" y="3333" width="0.1692%" height="15" fill="rgb(249,195,6)" fg:x="105195539" fg:w="1261451"/><text x="14.3633%" y="3343.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,261,451 samples, 0.17%)</title><rect x="14.1133%" y="3317" width="0.1692%" height="15" fill="rgb(237,174,47)" fg:x="105195539" fg:w="1261451"/><text x="14.3633%" y="3327.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,261,451 samples, 0.17%)</title><rect x="14.1133%" y="3301" width="0.1692%" height="15" fill="rgb(206,201,31)" fg:x="105195539" fg:w="1261451"/><text x="14.3633%" y="3311.50"></text></g><g><title>alloc::alloc::alloc (1,261,451 samples, 0.17%)</title><rect x="14.1133%" y="3285" width="0.1692%" height="15" fill="rgb(231,57,52)" fg:x="105195539" fg:w="1261451"/><text x="14.3633%" y="3295.50"></text></g><g><title>malloc (1,261,451 samples, 0.17%)</title><rect x="14.1133%" y="3269" width="0.1692%" height="15" fill="rgb(248,177,22)" fg:x="105195539" fg:w="1261451"/><text x="14.3633%" y="3279.50"></text></g><g><title>[libc.so.6] (1,261,451 samples, 0.17%)</title><rect x="14.1133%" y="3253" width="0.1692%" height="15" fill="rgb(215,211,37)" fg:x="105195539" fg:w="1261451"/><text x="14.3633%" y="3263.50"></text></g><g><title>&lt;serde_json::value::Value as core::clone::Clone&gt;::clone (14,022,465 samples, 1.88%)</title><rect x="12.5694%" y="3605" width="1.8813%" height="15" fill="rgb(241,128,51)" fg:x="93687338" fg:w="14022465"/><text x="12.8194%" y="3615.50">&lt;..</text></g><g><title>&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt; as core::clone::Clone&gt;::clone (14,022,465 samples, 1.88%)</title><rect x="12.5694%" y="3589" width="1.8813%" height="15" fill="rgb(227,165,31)" fg:x="93687338" fg:w="14022465"/><text x="12.8194%" y="3599.50">&lt;..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone (14,022,465 samples, 1.88%)</title><rect x="12.5694%" y="3573" width="1.8813%" height="15" fill="rgb(228,167,24)" fg:x="93687338" fg:w="14022465"/><text x="12.8194%" y="3583.50">&lt;..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (14,022,465 samples, 1.88%)</title><rect x="12.5694%" y="3557" width="1.8813%" height="15" fill="rgb(228,143,12)" fg:x="93687338" fg:w="14022465"/><text x="12.8194%" y="3567.50">&lt;..</text></g><g><title>&lt;serde_json::value::Value as core::clone::Clone&gt;::clone (11,476,736 samples, 1.54%)</title><rect x="12.9109%" y="3541" width="1.5398%" height="15" fill="rgb(249,149,8)" fg:x="96233067" fg:w="11476736"/><text x="13.1609%" y="3551.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (10,211,572 samples, 1.37%)</title><rect x="13.0806%" y="3525" width="1.3700%" height="15" fill="rgb(243,35,44)" fg:x="97498231" fg:w="10211572"/><text x="13.3306%" y="3535.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (10,211,572 samples, 1.37%)</title><rect x="13.0806%" y="3509" width="1.3700%" height="15" fill="rgb(246,89,9)" fg:x="97498231" fg:w="10211572"/><text x="13.3306%" y="3519.50"></text></g><g><title>alloc::slice::hack::to_vec (10,211,572 samples, 1.37%)</title><rect x="13.0806%" y="3493" width="1.3700%" height="15" fill="rgb(233,213,13)" fg:x="97498231" fg:w="10211572"/><text x="13.3306%" y="3503.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (10,211,572 samples, 1.37%)</title><rect x="13.0806%" y="3477" width="1.3700%" height="15" fill="rgb(233,141,41)" fg:x="97498231" fg:w="10211572"/><text x="13.3306%" y="3487.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,252,813 samples, 0.17%)</title><rect x="14.2826%" y="3461" width="0.1681%" height="15" fill="rgb(239,167,4)" fg:x="106456990" fg:w="1252813"/><text x="14.5326%" y="3471.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,252,813 samples, 0.17%)</title><rect x="14.2826%" y="3445" width="0.1681%" height="15" fill="rgb(209,217,16)" fg:x="106456990" fg:w="1252813"/><text x="14.5326%" y="3455.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (1,252,813 samples, 0.17%)</title><rect x="14.2826%" y="3429" width="0.1681%" height="15" fill="rgb(219,88,35)" fg:x="106456990" fg:w="1252813"/><text x="14.5326%" y="3439.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1,252,813 samples, 0.17%)</title><rect x="14.2826%" y="3413" width="0.1681%" height="15" fill="rgb(220,193,23)" fg:x="106456990" fg:w="1252813"/><text x="14.5326%" y="3423.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,252,813 samples, 0.17%)</title><rect x="14.2826%" y="3397" width="0.1681%" height="15" fill="rgb(230,90,52)" fg:x="106456990" fg:w="1252813"/><text x="14.5326%" y="3407.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,252,813 samples, 0.17%)</title><rect x="14.2826%" y="3381" width="0.1681%" height="15" fill="rgb(252,106,19)" fg:x="106456990" fg:w="1252813"/><text x="14.5326%" y="3391.50"></text></g><g><title>alloc::alloc::alloc (1,252,813 samples, 0.17%)</title><rect x="14.2826%" y="3365" width="0.1681%" height="15" fill="rgb(206,74,20)" fg:x="106456990" fg:w="1252813"/><text x="14.5326%" y="3375.50"></text></g><g><title>__rdl_alloc (1,252,813 samples, 0.17%)</title><rect x="14.2826%" y="3349" width="0.1681%" height="15" fill="rgb(230,138,44)" fg:x="106456990" fg:w="1252813"/><text x="14.5326%" y="3359.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1,252,813 samples, 0.17%)</title><rect x="14.2826%" y="3333" width="0.1681%" height="15" fill="rgb(235,182,43)" fg:x="106456990" fg:w="1252813"/><text x="14.5326%" y="3343.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (22,085,715 samples, 2.96%)</title><rect x="12.5694%" y="4245" width="2.9631%" height="15" fill="rgb(242,16,51)" fg:x="93687338" fg:w="22085715"/><text x="12.8194%" y="4255.50">&lt;al..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (22,085,715 samples, 2.96%)</title><rect x="12.5694%" y="4229" width="2.9631%" height="15" fill="rgb(248,9,4)" fg:x="93687338" fg:w="22085715"/><text x="12.8194%" y="4239.50">all..</text></g><g><title>alloc::slice::hack::to_vec (22,085,715 samples, 2.96%)</title><rect x="12.5694%" y="4213" width="2.9631%" height="15" fill="rgb(210,31,22)" fg:x="93687338" fg:w="22085715"/><text x="12.8194%" y="4223.50">all..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (22,085,715 samples, 2.96%)</title><rect x="12.5694%" y="4197" width="2.9631%" height="15" fill="rgb(239,54,39)" fg:x="93687338" fg:w="22085715"/><text x="12.8194%" y="4207.50">&lt;T ..</text></g><g><title>&lt;serde_json::value::Value as core::clone::Clone&gt;::clone (22,085,715 samples, 2.96%)</title><rect x="12.5694%" y="4181" width="2.9631%" height="15" fill="rgb(230,99,41)" fg:x="93687338" fg:w="22085715"/><text x="12.8194%" y="4191.50">&lt;se..</text></g><g><title>&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt; as core::clone::Clone&gt;::clone (22,085,715 samples, 2.96%)</title><rect x="12.5694%" y="4165" width="2.9631%" height="15" fill="rgb(253,106,12)" fg:x="93687338" fg:w="22085715"/><text x="12.8194%" y="4175.50">&lt;se..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone (22,085,715 samples, 2.96%)</title><rect x="12.5694%" y="4149" width="2.9631%" height="15" fill="rgb(213,46,41)" fg:x="93687338" fg:w="22085715"/><text x="12.8194%" y="4159.50">&lt;al..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (22,085,715 samples, 2.96%)</title><rect x="12.5694%" y="4133" width="2.9631%" height="15" fill="rgb(215,133,35)" fg:x="93687338" fg:w="22085715"/><text x="12.8194%" y="4143.50">&lt;al..</text></g><g><title>&lt;serde_json::value::Value as core::clone::Clone&gt;::clone (22,085,715 samples, 2.96%)</title><rect x="12.5694%" y="4117" width="2.9631%" height="15" fill="rgb(213,28,5)" fg:x="93687338" fg:w="22085715"/><text x="12.8194%" y="4127.50">&lt;se..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (22,085,715 samples, 2.96%)</title><rect x="12.5694%" y="4101" width="2.9631%" height="15" fill="rgb(215,77,49)" fg:x="93687338" fg:w="22085715"/><text x="12.8194%" y="4111.50">&lt;al..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (22,085,715 samples, 2.96%)</title><rect x="12.5694%" y="4085" width="2.9631%" height="15" fill="rgb(248,100,22)" fg:x="93687338" fg:w="22085715"/><text x="12.8194%" y="4095.50">all..</text></g><g><title>alloc::slice::hack::to_vec (22,085,715 samples, 2.96%)</title><rect x="12.5694%" y="4069" width="2.9631%" height="15" fill="rgb(208,67,9)" fg:x="93687338" fg:w="22085715"/><text x="12.8194%" y="4079.50">all..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (22,085,715 samples, 2.96%)</title><rect x="12.5694%" y="4053" width="2.9631%" height="15" fill="rgb(219,133,21)" fg:x="93687338" fg:w="22085715"/><text x="12.8194%" y="4063.50">&lt;T ..</text></g><g><title>&lt;serde_json::value::Value as core::clone::Clone&gt;::clone (22,085,715 samples, 2.96%)</title><rect x="12.5694%" y="4037" width="2.9631%" height="15" fill="rgb(246,46,29)" fg:x="93687338" fg:w="22085715"/><text x="12.8194%" y="4047.50">&lt;se..</text></g><g><title>&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt; as core::clone::Clone&gt;::clone (22,085,715 samples, 2.96%)</title><rect x="12.5694%" y="4021" width="2.9631%" height="15" fill="rgb(246,185,52)" fg:x="93687338" fg:w="22085715"/><text x="12.8194%" y="4031.50">&lt;se..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone (22,085,715 samples, 2.96%)</title><rect x="12.5694%" y="4005" width="2.9631%" height="15" fill="rgb(252,136,11)" fg:x="93687338" fg:w="22085715"/><text x="12.8194%" y="4015.50">&lt;al..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (22,085,715 samples, 2.96%)</title><rect x="12.5694%" y="3989" width="2.9631%" height="15" fill="rgb(219,138,53)" fg:x="93687338" fg:w="22085715"/><text x="12.8194%" y="3999.50">&lt;al..</text></g><g><title>&lt;serde_json::value::Value as core::clone::Clone&gt;::clone (22,085,715 samples, 2.96%)</title><rect x="12.5694%" y="3973" width="2.9631%" height="15" fill="rgb(211,51,23)" fg:x="93687338" fg:w="22085715"/><text x="12.8194%" y="3983.50">&lt;se..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (22,085,715 samples, 2.96%)</title><rect x="12.5694%" y="3957" width="2.9631%" height="15" fill="rgb(247,221,28)" fg:x="93687338" fg:w="22085715"/><text x="12.8194%" y="3967.50">&lt;al..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (22,085,715 samples, 2.96%)</title><rect x="12.5694%" y="3941" width="2.9631%" height="15" fill="rgb(251,222,45)" fg:x="93687338" fg:w="22085715"/><text x="12.8194%" y="3951.50">all..</text></g><g><title>alloc::slice::hack::to_vec (22,085,715 samples, 2.96%)</title><rect x="12.5694%" y="3925" width="2.9631%" height="15" fill="rgb(217,162,53)" fg:x="93687338" fg:w="22085715"/><text x="12.8194%" y="3935.50">all..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (22,085,715 samples, 2.96%)</title><rect x="12.5694%" y="3909" width="2.9631%" height="15" fill="rgb(229,93,14)" fg:x="93687338" fg:w="22085715"/><text x="12.8194%" y="3919.50">&lt;T ..</text></g><g><title>&lt;serde_json::value::Value as core::clone::Clone&gt;::clone (22,085,715 samples, 2.96%)</title><rect x="12.5694%" y="3893" width="2.9631%" height="15" fill="rgb(209,67,49)" fg:x="93687338" fg:w="22085715"/><text x="12.8194%" y="3903.50">&lt;se..</text></g><g><title>&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt; as core::clone::Clone&gt;::clone (22,085,715 samples, 2.96%)</title><rect x="12.5694%" y="3877" width="2.9631%" height="15" fill="rgb(213,87,29)" fg:x="93687338" fg:w="22085715"/><text x="12.8194%" y="3887.50">&lt;se..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone (22,085,715 samples, 2.96%)</title><rect x="12.5694%" y="3861" width="2.9631%" height="15" fill="rgb(205,151,52)" fg:x="93687338" fg:w="22085715"/><text x="12.8194%" y="3871.50">&lt;al..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (22,085,715 samples, 2.96%)</title><rect x="12.5694%" y="3845" width="2.9631%" height="15" fill="rgb(253,215,39)" fg:x="93687338" fg:w="22085715"/><text x="12.8194%" y="3855.50">&lt;al..</text></g><g><title>&lt;serde_json::value::Value as core::clone::Clone&gt;::clone (22,085,715 samples, 2.96%)</title><rect x="12.5694%" y="3829" width="2.9631%" height="15" fill="rgb(221,220,41)" fg:x="93687338" fg:w="22085715"/><text x="12.8194%" y="3839.50">&lt;se..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (22,085,715 samples, 2.96%)</title><rect x="12.5694%" y="3813" width="2.9631%" height="15" fill="rgb(218,133,21)" fg:x="93687338" fg:w="22085715"/><text x="12.8194%" y="3823.50">&lt;al..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (22,085,715 samples, 2.96%)</title><rect x="12.5694%" y="3797" width="2.9631%" height="15" fill="rgb(221,193,43)" fg:x="93687338" fg:w="22085715"/><text x="12.8194%" y="3807.50">all..</text></g><g><title>alloc::slice::hack::to_vec (22,085,715 samples, 2.96%)</title><rect x="12.5694%" y="3781" width="2.9631%" height="15" fill="rgb(240,128,52)" fg:x="93687338" fg:w="22085715"/><text x="12.8194%" y="3791.50">all..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (22,085,715 samples, 2.96%)</title><rect x="12.5694%" y="3765" width="2.9631%" height="15" fill="rgb(253,114,12)" fg:x="93687338" fg:w="22085715"/><text x="12.8194%" y="3775.50">&lt;T ..</text></g><g><title>&lt;serde_json::value::Value as core::clone::Clone&gt;::clone (22,085,715 samples, 2.96%)</title><rect x="12.5694%" y="3749" width="2.9631%" height="15" fill="rgb(215,223,47)" fg:x="93687338" fg:w="22085715"/><text x="12.8194%" y="3759.50">&lt;se..</text></g><g><title>&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt; as core::clone::Clone&gt;::clone (22,085,715 samples, 2.96%)</title><rect x="12.5694%" y="3733" width="2.9631%" height="15" fill="rgb(248,225,23)" fg:x="93687338" fg:w="22085715"/><text x="12.8194%" y="3743.50">&lt;se..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone (22,085,715 samples, 2.96%)</title><rect x="12.5694%" y="3717" width="2.9631%" height="15" fill="rgb(250,108,0)" fg:x="93687338" fg:w="22085715"/><text x="12.8194%" y="3727.50">&lt;al..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (22,085,715 samples, 2.96%)</title><rect x="12.5694%" y="3701" width="2.9631%" height="15" fill="rgb(228,208,7)" fg:x="93687338" fg:w="22085715"/><text x="12.8194%" y="3711.50">&lt;al..</text></g><g><title>&lt;serde_json::value::Value as core::clone::Clone&gt;::clone (22,085,715 samples, 2.96%)</title><rect x="12.5694%" y="3685" width="2.9631%" height="15" fill="rgb(244,45,10)" fg:x="93687338" fg:w="22085715"/><text x="12.8194%" y="3695.50">&lt;se..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (22,085,715 samples, 2.96%)</title><rect x="12.5694%" y="3669" width="2.9631%" height="15" fill="rgb(207,125,25)" fg:x="93687338" fg:w="22085715"/><text x="12.8194%" y="3679.50">&lt;al..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (22,085,715 samples, 2.96%)</title><rect x="12.5694%" y="3653" width="2.9631%" height="15" fill="rgb(210,195,18)" fg:x="93687338" fg:w="22085715"/><text x="12.8194%" y="3663.50">all..</text></g><g><title>alloc::slice::hack::to_vec (22,085,715 samples, 2.96%)</title><rect x="12.5694%" y="3637" width="2.9631%" height="15" fill="rgb(249,80,12)" fg:x="93687338" fg:w="22085715"/><text x="12.8194%" y="3647.50">all..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (22,085,715 samples, 2.96%)</title><rect x="12.5694%" y="3621" width="2.9631%" height="15" fill="rgb(221,65,9)" fg:x="93687338" fg:w="22085715"/><text x="12.8194%" y="3631.50">&lt;T ..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (8,063,250 samples, 1.08%)</title><rect x="14.4507%" y="3605" width="1.0818%" height="15" fill="rgb(235,49,36)" fg:x="107709803" fg:w="8063250"/><text x="14.7007%" y="3615.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (8,063,250 samples, 1.08%)</title><rect x="14.4507%" y="3589" width="1.0818%" height="15" fill="rgb(225,32,20)" fg:x="107709803" fg:w="8063250"/><text x="14.7007%" y="3599.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (8,063,250 samples, 1.08%)</title><rect x="14.4507%" y="3573" width="1.0818%" height="15" fill="rgb(215,141,46)" fg:x="107709803" fg:w="8063250"/><text x="14.7007%" y="3583.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (8,063,250 samples, 1.08%)</title><rect x="14.4507%" y="3557" width="1.0818%" height="15" fill="rgb(250,160,47)" fg:x="107709803" fg:w="8063250"/><text x="14.7007%" y="3567.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (8,063,250 samples, 1.08%)</title><rect x="14.4507%" y="3541" width="1.0818%" height="15" fill="rgb(216,222,40)" fg:x="107709803" fg:w="8063250"/><text x="14.7007%" y="3551.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (8,063,250 samples, 1.08%)</title><rect x="14.4507%" y="3525" width="1.0818%" height="15" fill="rgb(234,217,39)" fg:x="107709803" fg:w="8063250"/><text x="14.7007%" y="3535.50"></text></g><g><title>alloc::alloc::alloc (8,063,250 samples, 1.08%)</title><rect x="14.4507%" y="3509" width="1.0818%" height="15" fill="rgb(207,178,40)" fg:x="107709803" fg:w="8063250"/><text x="14.7007%" y="3519.50"></text></g><g><title>malloc (8,063,250 samples, 1.08%)</title><rect x="14.4507%" y="3493" width="1.0818%" height="15" fill="rgb(221,136,13)" fg:x="107709803" fg:w="8063250"/><text x="14.7007%" y="3503.50"></text></g><g><title>[libc.so.6] (8,063,250 samples, 1.08%)</title><rect x="14.4507%" y="3477" width="1.0818%" height="15" fill="rgb(249,199,10)" fg:x="107709803" fg:w="8063250"/><text x="14.7007%" y="3487.50"></text></g><g><title>[libc.so.6] (7,166,737 samples, 0.96%)</title><rect x="14.5709%" y="3461" width="0.9615%" height="15" fill="rgb(249,222,13)" fg:x="108606316" fg:w="7166737"/><text x="14.8209%" y="3471.50"></text></g><g><title>[libc.so.6] (1,243,588 samples, 0.17%)</title><rect x="15.3656%" y="3445" width="0.1668%" height="15" fill="rgb(244,185,38)" fg:x="114529465" fg:w="1243588"/><text x="15.6156%" y="3455.50"></text></g><g><title>&lt;serde_json::value::Value as core::clone::Clone&gt;::clone (23,412,906 samples, 3.14%)</title><rect x="12.5694%" y="4261" width="3.1411%" height="15" fill="rgb(236,202,9)" fg:x="93687338" fg:w="23412906"/><text x="12.8194%" y="4271.50">&lt;se..</text></g><g><title>&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt; as core::clone::Clone&gt;::clone (1,327,191 samples, 0.18%)</title><rect x="15.5324%" y="4245" width="0.1781%" height="15" fill="rgb(250,229,37)" fg:x="115773053" fg:w="1327191"/><text x="15.7824%" y="4255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone (1,327,191 samples, 0.18%)</title><rect x="15.5324%" y="4229" width="0.1781%" height="15" fill="rgb(206,174,23)" fg:x="115773053" fg:w="1327191"/><text x="15.7824%" y="4239.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1,327,191 samples, 0.18%)</title><rect x="15.5324%" y="4213" width="0.1781%" height="15" fill="rgb(211,33,43)" fg:x="115773053" fg:w="1327191"/><text x="15.7824%" y="4223.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1,327,191 samples, 0.18%)</title><rect x="15.5324%" y="4197" width="0.1781%" height="15" fill="rgb(245,58,50)" fg:x="115773053" fg:w="1327191"/><text x="15.7824%" y="4207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,327,191 samples, 0.18%)</title><rect x="15.5324%" y="4181" width="0.1781%" height="15" fill="rgb(244,68,36)" fg:x="115773053" fg:w="1327191"/><text x="15.7824%" y="4191.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,327,191 samples, 0.18%)</title><rect x="15.5324%" y="4165" width="0.1781%" height="15" fill="rgb(232,229,15)" fg:x="115773053" fg:w="1327191"/><text x="15.7824%" y="4175.50"></text></g><g><title>alloc::slice::hack::to_vec (1,327,191 samples, 0.18%)</title><rect x="15.5324%" y="4149" width="0.1781%" height="15" fill="rgb(254,30,23)" fg:x="115773053" fg:w="1327191"/><text x="15.7824%" y="4159.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1,327,191 samples, 0.18%)</title><rect x="15.5324%" y="4133" width="0.1781%" height="15" fill="rgb(235,160,14)" fg:x="115773053" fg:w="1327191"/><text x="15.7824%" y="4143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,327,191 samples, 0.18%)</title><rect x="15.5324%" y="4117" width="0.1781%" height="15" fill="rgb(212,155,44)" fg:x="115773053" fg:w="1327191"/><text x="15.7824%" y="4127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,327,191 samples, 0.18%)</title><rect x="15.5324%" y="4101" width="0.1781%" height="15" fill="rgb(226,2,50)" fg:x="115773053" fg:w="1327191"/><text x="15.7824%" y="4111.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (1,327,191 samples, 0.18%)</title><rect x="15.5324%" y="4085" width="0.1781%" height="15" fill="rgb(234,177,6)" fg:x="115773053" fg:w="1327191"/><text x="15.7824%" y="4095.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1,327,191 samples, 0.18%)</title><rect x="15.5324%" y="4069" width="0.1781%" height="15" fill="rgb(217,24,9)" fg:x="115773053" fg:w="1327191"/><text x="15.7824%" y="4079.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,327,191 samples, 0.18%)</title><rect x="15.5324%" y="4053" width="0.1781%" height="15" fill="rgb(220,13,46)" fg:x="115773053" fg:w="1327191"/><text x="15.7824%" y="4063.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,327,191 samples, 0.18%)</title><rect x="15.5324%" y="4037" width="0.1781%" height="15" fill="rgb(239,221,27)" fg:x="115773053" fg:w="1327191"/><text x="15.7824%" y="4047.50"></text></g><g><title>alloc::alloc::alloc (1,327,191 samples, 0.18%)</title><rect x="15.5324%" y="4021" width="0.1781%" height="15" fill="rgb(222,198,25)" fg:x="115773053" fg:w="1327191"/><text x="15.7824%" y="4031.50"></text></g><g><title>malloc (1,327,191 samples, 0.18%)</title><rect x="15.5324%" y="4005" width="0.1781%" height="15" fill="rgb(211,99,13)" fg:x="115773053" fg:w="1327191"/><text x="15.7824%" y="4015.50"></text></g><g><title>[libc.so.6] (1,327,191 samples, 0.18%)</title><rect x="15.5324%" y="3989" width="0.1781%" height="15" fill="rgb(232,111,31)" fg:x="115773053" fg:w="1327191"/><text x="15.7824%" y="3999.50"></text></g><g><title>&lt;main::benchmark::LayoutFrame as core::clone::Clone&gt;::clone (26,011,081 samples, 3.49%)</title><rect x="12.3918%" y="4837" width="3.4897%" height="15" fill="rgb(245,82,37)" fg:x="92363970" fg:w="26011081"/><text x="12.6418%" y="4847.50">&lt;ma..</text></g><g><title>&lt;serde_json::value::Value as core::clone::Clone&gt;::clone (26,011,081 samples, 3.49%)</title><rect x="12.3918%" y="4821" width="3.4897%" height="15" fill="rgb(227,149,46)" fg:x="92363970" fg:w="26011081"/><text x="12.6418%" y="4831.50">&lt;se..</text></g><g><title>&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt; as core::clone::Clone&gt;::clone (26,011,081 samples, 3.49%)</title><rect x="12.3918%" y="4805" width="3.4897%" height="15" fill="rgb(218,36,50)" fg:x="92363970" fg:w="26011081"/><text x="12.6418%" y="4815.50">&lt;se..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone (26,011,081 samples, 3.49%)</title><rect x="12.3918%" y="4789" width="3.4897%" height="15" fill="rgb(226,80,48)" fg:x="92363970" fg:w="26011081"/><text x="12.6418%" y="4799.50">&lt;al..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (26,011,081 samples, 3.49%)</title><rect x="12.3918%" y="4773" width="3.4897%" height="15" fill="rgb(238,224,15)" fg:x="92363970" fg:w="26011081"/><text x="12.6418%" y="4783.50">&lt;al..</text></g><g><title>&lt;serde_json::value::Value as core::clone::Clone&gt;::clone (26,011,081 samples, 3.49%)</title><rect x="12.3918%" y="4757" width="3.4897%" height="15" fill="rgb(241,136,10)" fg:x="92363970" fg:w="26011081"/><text x="12.6418%" y="4767.50">&lt;se..</text></g><g><title>&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt; as core::clone::Clone&gt;::clone (26,011,081 samples, 3.49%)</title><rect x="12.3918%" y="4741" width="3.4897%" height="15" fill="rgb(208,32,45)" fg:x="92363970" fg:w="26011081"/><text x="12.6418%" y="4751.50">&lt;se..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone (26,011,081 samples, 3.49%)</title><rect x="12.3918%" y="4725" width="3.4897%" height="15" fill="rgb(207,135,9)" fg:x="92363970" fg:w="26011081"/><text x="12.6418%" y="4735.50">&lt;al..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (26,011,081 samples, 3.49%)</title><rect x="12.3918%" y="4709" width="3.4897%" height="15" fill="rgb(206,86,44)" fg:x="92363970" fg:w="26011081"/><text x="12.6418%" y="4719.50">&lt;al..</text></g><g><title>&lt;serde_json::value::Value as core::clone::Clone&gt;::clone (26,011,081 samples, 3.49%)</title><rect x="12.3918%" y="4693" width="3.4897%" height="15" fill="rgb(245,177,15)" fg:x="92363970" fg:w="26011081"/><text x="12.6418%" y="4703.50">&lt;se..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (26,011,081 samples, 3.49%)</title><rect x="12.3918%" y="4677" width="3.4897%" height="15" fill="rgb(206,64,50)" fg:x="92363970" fg:w="26011081"/><text x="12.6418%" y="4687.50">&lt;al..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (26,011,081 samples, 3.49%)</title><rect x="12.3918%" y="4661" width="3.4897%" height="15" fill="rgb(234,36,40)" fg:x="92363970" fg:w="26011081"/><text x="12.6418%" y="4671.50">all..</text></g><g><title>alloc::slice::hack::to_vec (26,011,081 samples, 3.49%)</title><rect x="12.3918%" y="4645" width="3.4897%" height="15" fill="rgb(213,64,8)" fg:x="92363970" fg:w="26011081"/><text x="12.6418%" y="4655.50">all..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (26,011,081 samples, 3.49%)</title><rect x="12.3918%" y="4629" width="3.4897%" height="15" fill="rgb(210,75,36)" fg:x="92363970" fg:w="26011081"/><text x="12.6418%" y="4639.50">&lt;T ..</text></g><g><title>&lt;serde_json::value::Value as core::clone::Clone&gt;::clone (26,011,081 samples, 3.49%)</title><rect x="12.3918%" y="4613" width="3.4897%" height="15" fill="rgb(229,88,21)" fg:x="92363970" fg:w="26011081"/><text x="12.6418%" y="4623.50">&lt;se..</text></g><g><title>&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt; as core::clone::Clone&gt;::clone (26,011,081 samples, 3.49%)</title><rect x="12.3918%" y="4597" width="3.4897%" height="15" fill="rgb(252,204,47)" fg:x="92363970" fg:w="26011081"/><text x="12.6418%" y="4607.50">&lt;se..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone (26,011,081 samples, 3.49%)</title><rect x="12.3918%" y="4581" width="3.4897%" height="15" fill="rgb(208,77,27)" fg:x="92363970" fg:w="26011081"/><text x="12.6418%" y="4591.50">&lt;al..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (26,011,081 samples, 3.49%)</title><rect x="12.3918%" y="4565" width="3.4897%" height="15" fill="rgb(221,76,26)" fg:x="92363970" fg:w="26011081"/><text x="12.6418%" y="4575.50">&lt;al..</text></g><g><title>&lt;serde_json::value::Value as core::clone::Clone&gt;::clone (26,011,081 samples, 3.49%)</title><rect x="12.3918%" y="4549" width="3.4897%" height="15" fill="rgb(225,139,18)" fg:x="92363970" fg:w="26011081"/><text x="12.6418%" y="4559.50">&lt;se..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (26,011,081 samples, 3.49%)</title><rect x="12.3918%" y="4533" width="3.4897%" height="15" fill="rgb(230,137,11)" fg:x="92363970" fg:w="26011081"/><text x="12.6418%" y="4543.50">&lt;al..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (26,011,081 samples, 3.49%)</title><rect x="12.3918%" y="4517" width="3.4897%" height="15" fill="rgb(212,28,1)" fg:x="92363970" fg:w="26011081"/><text x="12.6418%" y="4527.50">all..</text></g><g><title>alloc::slice::hack::to_vec (26,011,081 samples, 3.49%)</title><rect x="12.3918%" y="4501" width="3.4897%" height="15" fill="rgb(248,164,17)" fg:x="92363970" fg:w="26011081"/><text x="12.6418%" y="4511.50">all..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (26,011,081 samples, 3.49%)</title><rect x="12.3918%" y="4485" width="3.4897%" height="15" fill="rgb(222,171,42)" fg:x="92363970" fg:w="26011081"/><text x="12.6418%" y="4495.50">&lt;T ..</text></g><g><title>&lt;serde_json::value::Value as core::clone::Clone&gt;::clone (26,011,081 samples, 3.49%)</title><rect x="12.3918%" y="4469" width="3.4897%" height="15" fill="rgb(243,84,45)" fg:x="92363970" fg:w="26011081"/><text x="12.6418%" y="4479.50">&lt;se..</text></g><g><title>&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt; as core::clone::Clone&gt;::clone (26,011,081 samples, 3.49%)</title><rect x="12.3918%" y="4453" width="3.4897%" height="15" fill="rgb(252,49,23)" fg:x="92363970" fg:w="26011081"/><text x="12.6418%" y="4463.50">&lt;se..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone (26,011,081 samples, 3.49%)</title><rect x="12.3918%" y="4437" width="3.4897%" height="15" fill="rgb(215,19,7)" fg:x="92363970" fg:w="26011081"/><text x="12.6418%" y="4447.50">&lt;al..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (26,011,081 samples, 3.49%)</title><rect x="12.3918%" y="4421" width="3.4897%" height="15" fill="rgb(238,81,41)" fg:x="92363970" fg:w="26011081"/><text x="12.6418%" y="4431.50">&lt;al..</text></g><g><title>&lt;serde_json::value::Value as core::clone::Clone&gt;::clone (26,011,081 samples, 3.49%)</title><rect x="12.3918%" y="4405" width="3.4897%" height="15" fill="rgb(210,199,37)" fg:x="92363970" fg:w="26011081"/><text x="12.6418%" y="4415.50">&lt;se..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (24,687,713 samples, 3.31%)</title><rect x="12.5694%" y="4389" width="3.3122%" height="15" fill="rgb(244,192,49)" fg:x="93687338" fg:w="24687713"/><text x="12.8194%" y="4399.50">&lt;al..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (24,687,713 samples, 3.31%)</title><rect x="12.5694%" y="4373" width="3.3122%" height="15" fill="rgb(226,211,11)" fg:x="93687338" fg:w="24687713"/><text x="12.8194%" y="4383.50">all..</text></g><g><title>alloc::slice::hack::to_vec (24,687,713 samples, 3.31%)</title><rect x="12.5694%" y="4357" width="3.3122%" height="15" fill="rgb(236,162,54)" fg:x="93687338" fg:w="24687713"/><text x="12.8194%" y="4367.50">all..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (24,687,713 samples, 3.31%)</title><rect x="12.5694%" y="4341" width="3.3122%" height="15" fill="rgb(220,229,9)" fg:x="93687338" fg:w="24687713"/><text x="12.8194%" y="4351.50">&lt;T ..</text></g><g><title>&lt;serde_json::value::Value as core::clone::Clone&gt;::clone (24,687,713 samples, 3.31%)</title><rect x="12.5694%" y="4325" width="3.3122%" height="15" fill="rgb(250,87,22)" fg:x="93687338" fg:w="24687713"/><text x="12.8194%" y="4335.50">&lt;se..</text></g><g><title>&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt; as core::clone::Clone&gt;::clone (24,687,713 samples, 3.31%)</title><rect x="12.5694%" y="4309" width="3.3122%" height="15" fill="rgb(239,43,17)" fg:x="93687338" fg:w="24687713"/><text x="12.8194%" y="4319.50">&lt;se..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone (24,687,713 samples, 3.31%)</title><rect x="12.5694%" y="4293" width="3.3122%" height="15" fill="rgb(231,177,25)" fg:x="93687338" fg:w="24687713"/><text x="12.8194%" y="4303.50">&lt;al..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (24,687,713 samples, 3.31%)</title><rect x="12.5694%" y="4277" width="3.3122%" height="15" fill="rgb(219,179,1)" fg:x="93687338" fg:w="24687713"/><text x="12.8194%" y="4287.50">&lt;al..</text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;::push (1,274,807 samples, 0.17%)</title><rect x="15.7105%" y="4261" width="0.1710%" height="15" fill="rgb(238,219,53)" fg:x="117100244" fg:w="1274807"/><text x="15.9605%" y="4271.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;::push_with_handle (1,274,807 samples, 0.17%)</title><rect x="15.7105%" y="4245" width="0.1710%" height="15" fill="rgb(232,167,36)" fg:x="117100244" fg:w="1274807"/><text x="15.9605%" y="4255.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (1,274,807 samples, 0.17%)</title><rect x="15.7105%" y="4229" width="0.1710%" height="15" fill="rgb(244,19,51)" fg:x="117100244" fg:w="1274807"/><text x="15.9605%" y="4239.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (1,228,454 samples, 0.16%)</title><rect x="15.8815%" y="1365" width="0.1648%" height="15" fill="rgb(224,6,22)" fg:x="118375051" fg:w="1228454"/><text x="16.1315%" y="1375.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1,228,454 samples, 0.16%)</title><rect x="15.8815%" y="1349" width="0.1648%" height="15" fill="rgb(224,145,5)" fg:x="118375051" fg:w="1228454"/><text x="16.1315%" y="1359.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1,228,454 samples, 0.16%)</title><rect x="15.8815%" y="1333" width="0.1648%" height="15" fill="rgb(234,130,49)" fg:x="118375051" fg:w="1228454"/><text x="16.1315%" y="1343.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1,228,454 samples, 0.16%)</title><rect x="15.8815%" y="1317" width="0.1648%" height="15" fill="rgb(254,6,2)" fg:x="118375051" fg:w="1228454"/><text x="16.1315%" y="1327.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,228,454 samples, 0.16%)</title><rect x="15.8815%" y="1301" width="0.1648%" height="15" fill="rgb(208,96,46)" fg:x="118375051" fg:w="1228454"/><text x="16.1315%" y="1311.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (1,252,140 samples, 0.17%)</title><rect x="16.0464%" y="1125" width="0.1680%" height="15" fill="rgb(239,3,39)" fg:x="119603505" fg:w="1252140"/><text x="16.2964%" y="1135.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1,252,140 samples, 0.17%)</title><rect x="16.0464%" y="1109" width="0.1680%" height="15" fill="rgb(233,210,1)" fg:x="119603505" fg:w="1252140"/><text x="16.2964%" y="1119.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1,252,140 samples, 0.17%)</title><rect x="16.0464%" y="1093" width="0.1680%" height="15" fill="rgb(244,137,37)" fg:x="119603505" fg:w="1252140"/><text x="16.2964%" y="1103.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1,252,140 samples, 0.17%)</title><rect x="16.0464%" y="1077" width="0.1680%" height="15" fill="rgb(240,136,2)" fg:x="119603505" fg:w="1252140"/><text x="16.2964%" y="1087.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,252,140 samples, 0.17%)</title><rect x="16.0464%" y="1061" width="0.1680%" height="15" fill="rgb(239,18,37)" fg:x="119603505" fg:w="1252140"/><text x="16.2964%" y="1071.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (1,252,140 samples, 0.17%)</title><rect x="16.0464%" y="1045" width="0.1680%" height="15" fill="rgb(218,185,22)" fg:x="119603505" fg:w="1252140"/><text x="16.2964%" y="1055.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1,252,140 samples, 0.17%)</title><rect x="16.0464%" y="1029" width="0.1680%" height="15" fill="rgb(225,218,4)" fg:x="119603505" fg:w="1252140"/><text x="16.2964%" y="1039.50"></text></g><g><title>alloc::alloc::dealloc (1,252,140 samples, 0.17%)</title><rect x="16.0464%" y="1013" width="0.1680%" height="15" fill="rgb(230,182,32)" fg:x="119603505" fg:w="1252140"/><text x="16.2964%" y="1023.50"></text></g><g><title>cfree (1,252,140 samples, 0.17%)</title><rect x="16.0464%" y="997" width="0.1680%" height="15" fill="rgb(242,56,43)" fg:x="119603505" fg:w="1252140"/><text x="16.2964%" y="1007.50"></text></g><g><title>[libc.so.6] (1,252,140 samples, 0.17%)</title><rect x="16.0464%" y="981" width="0.1680%" height="15" fill="rgb(233,99,24)" fg:x="119603505" fg:w="1252140"/><text x="16.2964%" y="991.50"></text></g><g><title>cfree (1,313,096 samples, 0.18%)</title><rect x="16.2143%" y="597" width="0.1762%" height="15" fill="rgb(234,209,42)" fg:x="120855645" fg:w="1313096"/><text x="16.4643%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::clear (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="4837" width="0.6599%" height="15" fill="rgb(227,7,12)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="4847.50"></text></g><g><title>core::ptr::drop_in_place&lt;[main::benchmark::LayoutFrame]&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="4821" width="0.6599%" height="15" fill="rgb(245,203,43)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="4831.50"></text></g><g><title>core::ptr::drop_in_place&lt;main::benchmark::LayoutFrame&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="4805" width="0.6599%" height="15" fill="rgb(238,205,33)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="4815.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="4789" width="0.6599%" height="15" fill="rgb(231,56,7)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="4799.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="4773" width="0.6599%" height="15" fill="rgb(244,186,29)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="4783.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="4757" width="0.6599%" height="15" fill="rgb(234,111,31)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="4767.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="4741" width="0.6599%" height="15" fill="rgb(241,149,10)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="4751.50"></text></g><g><title>core::mem::drop (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="4725" width="0.6599%" height="15" fill="rgb(249,206,44)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="4735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="4709" width="0.6599%" height="15" fill="rgb(251,153,30)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="4719.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="4693" width="0.6599%" height="15" fill="rgb(239,152,38)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="4703.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="4677" width="0.6599%" height="15" fill="rgb(249,139,47)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="4687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val::Dropper&lt;serde_json::value::Value&gt;&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="4661" width="0.6599%" height="15" fill="rgb(244,64,35)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="4671.50"></text></g><g><title>&lt;alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val::Dropper&lt;T&gt; as core::ops::drop::Drop&gt;::drop (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="4645" width="0.6599%" height="15" fill="rgb(216,46,15)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="4655.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="4629" width="0.6599%" height="15" fill="rgb(250,74,19)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="4639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="4613" width="0.6599%" height="15" fill="rgb(249,42,33)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="4623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="4597" width="0.6599%" height="15" fill="rgb(242,149,17)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="4607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="4581" width="0.6599%" height="15" fill="rgb(244,29,21)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="4591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="4565" width="0.6599%" height="15" fill="rgb(220,130,37)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="4575.50"></text></g><g><title>core::mem::drop (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="4549" width="0.6599%" height="15" fill="rgb(211,67,2)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="4559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="4533" width="0.6599%" height="15" fill="rgb(235,68,52)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="4543.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="4517" width="0.6599%" height="15" fill="rgb(246,142,3)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="4527.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="4501" width="0.6599%" height="15" fill="rgb(241,25,7)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="4511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val::Dropper&lt;serde_json::value::Value&gt;&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="4485" width="0.6599%" height="15" fill="rgb(242,119,39)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="4495.50"></text></g><g><title>&lt;alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val::Dropper&lt;T&gt; as core::ops::drop::Drop&gt;::drop (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="4469" width="0.6599%" height="15" fill="rgb(241,98,45)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="4479.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="4453" width="0.6599%" height="15" fill="rgb(254,28,30)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="4463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="4437" width="0.6599%" height="15" fill="rgb(241,142,54)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="4447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;serde_json::value::Value&gt;&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="4421" width="0.6599%" height="15" fill="rgb(222,85,15)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="4431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="4405" width="0.6599%" height="15" fill="rgb(210,85,47)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="4415.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="4389" width="0.6599%" height="15" fill="rgb(224,206,25)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="4399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="4373" width="0.6599%" height="15" fill="rgb(243,201,19)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="4383.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="4357" width="0.6599%" height="15" fill="rgb(236,59,4)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="4367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="4341" width="0.6599%" height="15" fill="rgb(254,179,45)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="4351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="4325" width="0.6599%" height="15" fill="rgb(226,14,10)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="4335.50"></text></g><g><title>core::mem::drop (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="4309" width="0.6599%" height="15" fill="rgb(244,27,41)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="4319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="4293" width="0.6599%" height="15" fill="rgb(235,35,32)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="4303.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="4277" width="0.6599%" height="15" fill="rgb(218,68,31)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="4287.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="4261" width="0.6599%" height="15" fill="rgb(207,120,37)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="4271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val::Dropper&lt;serde_json::value::Value&gt;&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="4245" width="0.6599%" height="15" fill="rgb(227,98,0)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="4255.50"></text></g><g><title>&lt;alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val::Dropper&lt;T&gt; as core::ops::drop::Drop&gt;::drop (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="4229" width="0.6599%" height="15" fill="rgb(207,7,3)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="4239.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="4213" width="0.6599%" height="15" fill="rgb(206,98,19)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="4223.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="4197" width="0.6599%" height="15" fill="rgb(217,5,26)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="4207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;serde_json::value::Value&gt;&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="4181" width="0.6599%" height="15" fill="rgb(235,190,38)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="4191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="4165" width="0.6599%" height="15" fill="rgb(247,86,24)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="4175.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="4149" width="0.6599%" height="15" fill="rgb(205,101,16)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="4159.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="4133" width="0.6599%" height="15" fill="rgb(246,168,33)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="4143.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="4117" width="0.6599%" height="15" fill="rgb(231,114,1)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="4127.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="4101" width="0.6599%" height="15" fill="rgb(207,184,53)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="4111.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="4085" width="0.6599%" height="15" fill="rgb(224,95,51)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="4095.50"></text></g><g><title>core::mem::drop (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="4069" width="0.6599%" height="15" fill="rgb(212,188,45)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="4079.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="4053" width="0.6599%" height="15" fill="rgb(223,154,38)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="4063.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="4037" width="0.6599%" height="15" fill="rgb(251,22,52)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="4047.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="4021" width="0.6599%" height="15" fill="rgb(229,209,22)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="4031.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val::Dropper&lt;serde_json::value::Value&gt;&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="4005" width="0.6599%" height="15" fill="rgb(234,138,34)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="4015.50"></text></g><g><title>&lt;alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val::Dropper&lt;T&gt; as core::ops::drop::Drop&gt;::drop (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="3989" width="0.6599%" height="15" fill="rgb(212,95,11)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="3999.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="3973" width="0.6599%" height="15" fill="rgb(240,179,47)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="3983.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="3957" width="0.6599%" height="15" fill="rgb(240,163,11)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="3967.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;serde_json::value::Value&gt;&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="3941" width="0.6599%" height="15" fill="rgb(236,37,12)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="3951.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="3925" width="0.6599%" height="15" fill="rgb(232,164,16)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="3935.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="3909" width="0.6599%" height="15" fill="rgb(244,205,15)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="3919.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="3893" width="0.6599%" height="15" fill="rgb(223,117,47)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="3903.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="3877" width="0.6599%" height="15" fill="rgb(244,107,35)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="3887.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="3861" width="0.6599%" height="15" fill="rgb(205,140,8)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="3871.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="3845" width="0.6599%" height="15" fill="rgb(228,84,46)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="3855.50"></text></g><g><title>core::mem::drop (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="3829" width="0.6599%" height="15" fill="rgb(254,188,9)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="3839.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="3813" width="0.6599%" height="15" fill="rgb(206,112,54)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="3823.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="3797" width="0.6599%" height="15" fill="rgb(216,84,49)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="3807.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="3781" width="0.6599%" height="15" fill="rgb(214,194,35)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="3791.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val::Dropper&lt;serde_json::value::Value&gt;&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="3765" width="0.6599%" height="15" fill="rgb(249,28,3)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="3775.50"></text></g><g><title>&lt;alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val::Dropper&lt;T&gt; as core::ops::drop::Drop&gt;::drop (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="3749" width="0.6599%" height="15" fill="rgb(222,56,52)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="3759.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="3733" width="0.6599%" height="15" fill="rgb(245,217,50)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="3743.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="3717" width="0.6599%" height="15" fill="rgb(213,201,24)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="3727.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;serde_json::value::Value&gt;&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="3701" width="0.6599%" height="15" fill="rgb(248,116,28)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="3711.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="3685" width="0.6599%" height="15" fill="rgb(219,72,43)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="3695.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="3669" width="0.6599%" height="15" fill="rgb(209,138,14)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="3679.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="3653" width="0.6599%" height="15" fill="rgb(222,18,33)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="3663.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="3637" width="0.6599%" height="15" fill="rgb(213,199,7)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="3647.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="3621" width="0.6599%" height="15" fill="rgb(250,110,10)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="3631.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="3605" width="0.6599%" height="15" fill="rgb(248,123,6)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="3615.50"></text></g><g><title>core::mem::drop (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="3589" width="0.6599%" height="15" fill="rgb(206,91,31)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="3599.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="3573" width="0.6599%" height="15" fill="rgb(211,154,13)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="3583.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="3557" width="0.6599%" height="15" fill="rgb(225,148,7)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="3567.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="3541" width="0.6599%" height="15" fill="rgb(220,160,43)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="3551.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val::Dropper&lt;serde_json::value::Value&gt;&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="3525" width="0.6599%" height="15" fill="rgb(213,52,39)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="3535.50"></text></g><g><title>&lt;alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val::Dropper&lt;T&gt; as core::ops::drop::Drop&gt;::drop (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="3509" width="0.6599%" height="15" fill="rgb(243,137,7)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="3519.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="3493" width="0.6599%" height="15" fill="rgb(230,79,13)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="3503.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="3477" width="0.6599%" height="15" fill="rgb(247,105,23)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="3487.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;serde_json::value::Value&gt;&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="3461" width="0.6599%" height="15" fill="rgb(223,179,41)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="3471.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="3445" width="0.6599%" height="15" fill="rgb(218,9,34)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="3455.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="3429" width="0.6599%" height="15" fill="rgb(222,106,8)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="3439.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="3413" width="0.6599%" height="15" fill="rgb(211,220,0)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="3423.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="3397" width="0.6599%" height="15" fill="rgb(229,52,16)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="3407.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="3381" width="0.6599%" height="15" fill="rgb(212,155,18)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="3391.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="3365" width="0.6599%" height="15" fill="rgb(242,21,14)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="3375.50"></text></g><g><title>core::mem::drop (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="3349" width="0.6599%" height="15" fill="rgb(222,19,48)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="3359.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="3333" width="0.6599%" height="15" fill="rgb(232,45,27)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="3343.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="3317" width="0.6599%" height="15" fill="rgb(249,103,42)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="3327.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="3301" width="0.6599%" height="15" fill="rgb(246,81,33)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="3311.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val::Dropper&lt;serde_json::value::Value&gt;&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="3285" width="0.6599%" height="15" fill="rgb(252,33,42)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="3295.50"></text></g><g><title>&lt;alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val::Dropper&lt;T&gt; as core::ops::drop::Drop&gt;::drop (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="3269" width="0.6599%" height="15" fill="rgb(209,212,41)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="3279.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="3253" width="0.6599%" height="15" fill="rgb(207,154,6)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="3263.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="3237" width="0.6599%" height="15" fill="rgb(223,64,47)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="3247.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;serde_json::value::Value&gt;&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="3221" width="0.6599%" height="15" fill="rgb(211,161,38)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="3231.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="3205" width="0.6599%" height="15" fill="rgb(219,138,40)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="3215.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="3189" width="0.6599%" height="15" fill="rgb(241,228,46)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="3199.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="3173" width="0.6599%" height="15" fill="rgb(223,209,38)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="3183.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="3157" width="0.6599%" height="15" fill="rgb(236,164,45)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="3167.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="3141" width="0.6599%" height="15" fill="rgb(231,15,5)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="3151.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="3125" width="0.6599%" height="15" fill="rgb(252,35,15)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="3135.50"></text></g><g><title>core::mem::drop (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="3109" width="0.6599%" height="15" fill="rgb(248,181,18)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="3119.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="3093" width="0.6599%" height="15" fill="rgb(233,39,42)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="3103.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="3077" width="0.6599%" height="15" fill="rgb(238,110,33)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="3087.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="3061" width="0.6599%" height="15" fill="rgb(233,195,10)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="3071.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val::Dropper&lt;serde_json::value::Value&gt;&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="3045" width="0.6599%" height="15" fill="rgb(254,105,3)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="3055.50"></text></g><g><title>&lt;alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val::Dropper&lt;T&gt; as core::ops::drop::Drop&gt;::drop (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="3029" width="0.6599%" height="15" fill="rgb(221,225,9)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="3039.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="3013" width="0.6599%" height="15" fill="rgb(224,227,45)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="3023.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="2997" width="0.6599%" height="15" fill="rgb(229,198,43)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="3007.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;serde_json::value::Value&gt;&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="2981" width="0.6599%" height="15" fill="rgb(206,209,35)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="2991.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="2965" width="0.6599%" height="15" fill="rgb(245,195,53)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="2975.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="2949" width="0.6599%" height="15" fill="rgb(240,92,26)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="2959.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="2933" width="0.6599%" height="15" fill="rgb(207,40,23)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="2943.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="2917" width="0.6599%" height="15" fill="rgb(223,111,35)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="2927.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="2901" width="0.6599%" height="15" fill="rgb(229,147,28)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="2911.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="2885" width="0.6599%" height="15" fill="rgb(211,29,28)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="2895.50"></text></g><g><title>core::mem::drop (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="2869" width="0.6599%" height="15" fill="rgb(228,72,33)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="2879.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="2853" width="0.6599%" height="15" fill="rgb(205,214,31)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="2863.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="2837" width="0.6599%" height="15" fill="rgb(224,111,15)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="2847.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="2821" width="0.6599%" height="15" fill="rgb(253,21,26)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="2831.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val::Dropper&lt;serde_json::value::Value&gt;&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="2805" width="0.6599%" height="15" fill="rgb(245,139,43)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="2815.50"></text></g><g><title>&lt;alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val::Dropper&lt;T&gt; as core::ops::drop::Drop&gt;::drop (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="2789" width="0.6599%" height="15" fill="rgb(252,170,7)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="2799.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="2773" width="0.6599%" height="15" fill="rgb(231,118,14)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="2783.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="2757" width="0.6599%" height="15" fill="rgb(238,83,0)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="2767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;serde_json::value::Value&gt;&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="2741" width="0.6599%" height="15" fill="rgb(221,39,39)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="2751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="2725" width="0.6599%" height="15" fill="rgb(222,119,46)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="2735.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="2709" width="0.6599%" height="15" fill="rgb(222,165,49)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="2719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="2693" width="0.6599%" height="15" fill="rgb(219,113,52)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="2703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="2677" width="0.6599%" height="15" fill="rgb(214,7,15)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="2687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="2661" width="0.6599%" height="15" fill="rgb(235,32,4)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="2671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="2645" width="0.6599%" height="15" fill="rgb(238,90,54)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="2655.50"></text></g><g><title>core::mem::drop (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="2629" width="0.6599%" height="15" fill="rgb(213,208,19)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="2639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="2613" width="0.6599%" height="15" fill="rgb(233,156,4)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="2623.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="2597" width="0.6599%" height="15" fill="rgb(207,194,5)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="2607.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="2581" width="0.6599%" height="15" fill="rgb(206,111,30)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="2591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val::Dropper&lt;serde_json::value::Value&gt;&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="2565" width="0.6599%" height="15" fill="rgb(243,70,54)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="2575.50"></text></g><g><title>&lt;alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val::Dropper&lt;T&gt; as core::ops::drop::Drop&gt;::drop (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="2549" width="0.6599%" height="15" fill="rgb(242,28,8)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="2559.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="2533" width="0.6599%" height="15" fill="rgb(219,106,18)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="2543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="2517" width="0.6599%" height="15" fill="rgb(244,222,10)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="2527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;serde_json::value::Value&gt;&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="2501" width="0.6599%" height="15" fill="rgb(236,179,52)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="2511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="2485" width="0.6599%" height="15" fill="rgb(213,23,39)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="2495.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="2469" width="0.6599%" height="15" fill="rgb(238,48,10)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="2479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="2453" width="0.6599%" height="15" fill="rgb(251,196,23)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="2463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="2437" width="0.6599%" height="15" fill="rgb(250,152,24)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="2447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="2421" width="0.6599%" height="15" fill="rgb(209,150,17)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="2431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="2405" width="0.6599%" height="15" fill="rgb(234,202,34)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="2415.50"></text></g><g><title>core::mem::drop (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="2389" width="0.6599%" height="15" fill="rgb(253,148,53)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="2399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="2373" width="0.6599%" height="15" fill="rgb(218,129,16)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="2383.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="2357" width="0.6599%" height="15" fill="rgb(216,85,19)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="2367.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="2341" width="0.6599%" height="15" fill="rgb(235,228,7)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="2351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val::Dropper&lt;serde_json::value::Value&gt;&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="2325" width="0.6599%" height="15" fill="rgb(245,175,0)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="2335.50"></text></g><g><title>&lt;alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val::Dropper&lt;T&gt; as core::ops::drop::Drop&gt;::drop (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="2309" width="0.6599%" height="15" fill="rgb(208,168,36)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="2319.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="2293" width="0.6599%" height="15" fill="rgb(246,171,24)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="2303.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="2277" width="0.6599%" height="15" fill="rgb(215,142,24)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="2287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;serde_json::value::Value&gt;&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="2261" width="0.6599%" height="15" fill="rgb(250,187,7)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="2271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="2245" width="0.6599%" height="15" fill="rgb(228,66,33)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="2255.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="2229" width="0.6599%" height="15" fill="rgb(234,215,21)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="2239.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="2213" width="0.6599%" height="15" fill="rgb(222,191,20)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="2223.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="2197" width="0.6599%" height="15" fill="rgb(245,79,54)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="2207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="2181" width="0.6599%" height="15" fill="rgb(240,10,37)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="2191.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="2165" width="0.6599%" height="15" fill="rgb(214,192,32)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="2175.50"></text></g><g><title>core::mem::drop (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="2149" width="0.6599%" height="15" fill="rgb(209,36,54)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="2159.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="2133" width="0.6599%" height="15" fill="rgb(220,10,11)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="2143.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="2117" width="0.6599%" height="15" fill="rgb(221,106,17)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="2127.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="2101" width="0.6599%" height="15" fill="rgb(251,142,44)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="2111.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val::Dropper&lt;serde_json::value::Value&gt;&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="2085" width="0.6599%" height="15" fill="rgb(238,13,15)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="2095.50"></text></g><g><title>&lt;alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val::Dropper&lt;T&gt; as core::ops::drop::Drop&gt;::drop (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="2069" width="0.6599%" height="15" fill="rgb(208,107,27)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="2079.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="2053" width="0.6599%" height="15" fill="rgb(205,136,37)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="2063.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="2037" width="0.6599%" height="15" fill="rgb(250,205,27)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="2047.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;serde_json::value::Value&gt;&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="2021" width="0.6599%" height="15" fill="rgb(210,80,43)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="2031.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="2005" width="0.6599%" height="15" fill="rgb(247,160,36)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="2015.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="1989" width="0.6599%" height="15" fill="rgb(234,13,49)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="1999.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="1973" width="0.6599%" height="15" fill="rgb(234,122,0)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="1983.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="1957" width="0.6599%" height="15" fill="rgb(207,146,38)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="1967.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="1941" width="0.6599%" height="15" fill="rgb(207,177,25)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="1951.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="1925" width="0.6599%" height="15" fill="rgb(211,178,42)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="1935.50"></text></g><g><title>core::mem::drop (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="1909" width="0.6599%" height="15" fill="rgb(230,69,54)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="1919.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="1893" width="0.6599%" height="15" fill="rgb(214,135,41)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="1903.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="1877" width="0.6599%" height="15" fill="rgb(237,67,25)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="1887.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="1861" width="0.6599%" height="15" fill="rgb(222,189,50)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="1871.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val::Dropper&lt;serde_json::value::Value&gt;&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="1845" width="0.6599%" height="15" fill="rgb(245,148,34)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="1855.50"></text></g><g><title>&lt;alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val::Dropper&lt;T&gt; as core::ops::drop::Drop&gt;::drop (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="1829" width="0.6599%" height="15" fill="rgb(222,29,6)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="1839.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="1813" width="0.6599%" height="15" fill="rgb(221,189,43)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="1823.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="1797" width="0.6599%" height="15" fill="rgb(207,36,27)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="1807.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;serde_json::value::Value&gt;&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="1781" width="0.6599%" height="15" fill="rgb(217,90,24)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="1791.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="1765" width="0.6599%" height="15" fill="rgb(224,66,35)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="1775.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="1749" width="0.6599%" height="15" fill="rgb(221,13,50)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="1759.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="1733" width="0.6599%" height="15" fill="rgb(236,68,49)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="1743.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="1717" width="0.6599%" height="15" fill="rgb(229,146,28)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="1727.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="1701" width="0.6599%" height="15" fill="rgb(225,31,38)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="1711.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="1685" width="0.6599%" height="15" fill="rgb(250,208,3)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="1695.50"></text></g><g><title>core::mem::drop (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="1669" width="0.6599%" height="15" fill="rgb(246,54,23)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="1679.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="1653" width="0.6599%" height="15" fill="rgb(243,76,11)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="1663.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="1637" width="0.6599%" height="15" fill="rgb(245,21,50)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="1647.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="1621" width="0.6599%" height="15" fill="rgb(228,9,43)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="1631.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val::Dropper&lt;serde_json::value::Value&gt;&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="1605" width="0.6599%" height="15" fill="rgb(208,100,47)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="1615.50"></text></g><g><title>&lt;alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val::Dropper&lt;T&gt; as core::ops::drop::Drop&gt;::drop (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="1589" width="0.6599%" height="15" fill="rgb(232,26,8)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="1599.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="1573" width="0.6599%" height="15" fill="rgb(216,166,38)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="1583.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="1557" width="0.6599%" height="15" fill="rgb(251,202,51)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="1567.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;serde_json::value::Value&gt;&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="1541" width="0.6599%" height="15" fill="rgb(254,216,34)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="1551.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="1525" width="0.6599%" height="15" fill="rgb(251,32,27)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="1535.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="1509" width="0.6599%" height="15" fill="rgb(208,127,28)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="1519.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="1493" width="0.6599%" height="15" fill="rgb(224,137,22)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="1503.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="1477" width="0.6599%" height="15" fill="rgb(254,70,32)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="1487.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="1461" width="0.6599%" height="15" fill="rgb(229,75,37)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="1471.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="1445" width="0.6599%" height="15" fill="rgb(252,64,23)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="1455.50"></text></g><g><title>core::mem::drop (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="1429" width="0.6599%" height="15" fill="rgb(232,162,48)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="1439.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="1413" width="0.6599%" height="15" fill="rgb(246,160,12)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="1423.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="1397" width="0.6599%" height="15" fill="rgb(247,166,0)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="1407.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val (4,918,538 samples, 0.66%)</title><rect x="15.8815%" y="1381" width="0.6599%" height="15" fill="rgb(249,219,21)" fg:x="118375051" fg:w="4918538"/><text x="16.1315%" y="1391.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val::Dropper&lt;serde_json::value::Value&gt;&gt; (3,690,084 samples, 0.50%)</title><rect x="16.0464%" y="1365" width="0.4951%" height="15" fill="rgb(205,209,3)" fg:x="119603505" fg:w="3690084"/><text x="16.2964%" y="1375.50"></text></g><g><title>&lt;alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val::Dropper&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3,690,084 samples, 0.50%)</title><rect x="16.0464%" y="1349" width="0.4951%" height="15" fill="rgb(243,44,1)" fg:x="119603505" fg:w="3690084"/><text x="16.2964%" y="1359.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (3,690,084 samples, 0.50%)</title><rect x="16.0464%" y="1333" width="0.4951%" height="15" fill="rgb(206,159,16)" fg:x="119603505" fg:w="3690084"/><text x="16.2964%" y="1343.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3,690,084 samples, 0.50%)</title><rect x="16.0464%" y="1317" width="0.4951%" height="15" fill="rgb(244,77,30)" fg:x="119603505" fg:w="3690084"/><text x="16.2964%" y="1327.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;serde_json::value::Value&gt;&gt; (3,690,084 samples, 0.50%)</title><rect x="16.0464%" y="1301" width="0.4951%" height="15" fill="rgb(218,69,12)" fg:x="119603505" fg:w="3690084"/><text x="16.2964%" y="1311.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,690,084 samples, 0.50%)</title><rect x="16.0464%" y="1285" width="0.4951%" height="15" fill="rgb(212,87,7)" fg:x="119603505" fg:w="3690084"/><text x="16.2964%" y="1295.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (3,690,084 samples, 0.50%)</title><rect x="16.0464%" y="1269" width="0.4951%" height="15" fill="rgb(245,114,25)" fg:x="119603505" fg:w="3690084"/><text x="16.2964%" y="1279.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3,690,084 samples, 0.50%)</title><rect x="16.0464%" y="1253" width="0.4951%" height="15" fill="rgb(210,61,42)" fg:x="119603505" fg:w="3690084"/><text x="16.2964%" y="1263.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3,690,084 samples, 0.50%)</title><rect x="16.0464%" y="1237" width="0.4951%" height="15" fill="rgb(211,52,33)" fg:x="119603505" fg:w="3690084"/><text x="16.2964%" y="1247.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3,690,084 samples, 0.50%)</title><rect x="16.0464%" y="1221" width="0.4951%" height="15" fill="rgb(234,58,33)" fg:x="119603505" fg:w="3690084"/><text x="16.2964%" y="1231.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3,690,084 samples, 0.50%)</title><rect x="16.0464%" y="1205" width="0.4951%" height="15" fill="rgb(220,115,36)" fg:x="119603505" fg:w="3690084"/><text x="16.2964%" y="1215.50"></text></g><g><title>core::mem::drop (3,690,084 samples, 0.50%)</title><rect x="16.0464%" y="1189" width="0.4951%" height="15" fill="rgb(243,153,54)" fg:x="119603505" fg:w="3690084"/><text x="16.2964%" y="1199.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3,690,084 samples, 0.50%)</title><rect x="16.0464%" y="1173" width="0.4951%" height="15" fill="rgb(251,47,18)" fg:x="119603505" fg:w="3690084"/><text x="16.2964%" y="1183.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3,690,084 samples, 0.50%)</title><rect x="16.0464%" y="1157" width="0.4951%" height="15" fill="rgb(242,102,42)" fg:x="119603505" fg:w="3690084"/><text x="16.2964%" y="1167.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val (3,690,084 samples, 0.50%)</title><rect x="16.0464%" y="1141" width="0.4951%" height="15" fill="rgb(234,31,38)" fg:x="119603505" fg:w="3690084"/><text x="16.2964%" y="1151.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val::Dropper&lt;serde_json::value::Value&gt;&gt; (2,437,944 samples, 0.33%)</title><rect x="16.2143%" y="1125" width="0.3271%" height="15" fill="rgb(221,117,51)" fg:x="120855645" fg:w="2437944"/><text x="16.4643%" y="1135.50"></text></g><g><title>&lt;alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val::Dropper&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2,437,944 samples, 0.33%)</title><rect x="16.2143%" y="1109" width="0.3271%" height="15" fill="rgb(212,20,18)" fg:x="120855645" fg:w="2437944"/><text x="16.4643%" y="1119.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (2,437,944 samples, 0.33%)</title><rect x="16.2143%" y="1093" width="0.3271%" height="15" fill="rgb(245,133,36)" fg:x="120855645" fg:w="2437944"/><text x="16.4643%" y="1103.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2,437,944 samples, 0.33%)</title><rect x="16.2143%" y="1077" width="0.3271%" height="15" fill="rgb(212,6,19)" fg:x="120855645" fg:w="2437944"/><text x="16.4643%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;serde_json::value::Value&gt;&gt; (2,437,944 samples, 0.33%)</title><rect x="16.2143%" y="1061" width="0.3271%" height="15" fill="rgb(218,1,36)" fg:x="120855645" fg:w="2437944"/><text x="16.4643%" y="1071.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,437,944 samples, 0.33%)</title><rect x="16.2143%" y="1045" width="0.3271%" height="15" fill="rgb(246,84,54)" fg:x="120855645" fg:w="2437944"/><text x="16.4643%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (2,437,944 samples, 0.33%)</title><rect x="16.2143%" y="1029" width="0.3271%" height="15" fill="rgb(242,110,6)" fg:x="120855645" fg:w="2437944"/><text x="16.4643%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2,437,944 samples, 0.33%)</title><rect x="16.2143%" y="1013" width="0.3271%" height="15" fill="rgb(214,47,5)" fg:x="120855645" fg:w="2437944"/><text x="16.4643%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2,437,944 samples, 0.33%)</title><rect x="16.2143%" y="997" width="0.3271%" height="15" fill="rgb(218,159,25)" fg:x="120855645" fg:w="2437944"/><text x="16.4643%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2,437,944 samples, 0.33%)</title><rect x="16.2143%" y="981" width="0.3271%" height="15" fill="rgb(215,211,28)" fg:x="120855645" fg:w="2437944"/><text x="16.4643%" y="991.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2,437,944 samples, 0.33%)</title><rect x="16.2143%" y="965" width="0.3271%" height="15" fill="rgb(238,59,32)" fg:x="120855645" fg:w="2437944"/><text x="16.4643%" y="975.50"></text></g><g><title>core::mem::drop (2,437,944 samples, 0.33%)</title><rect x="16.2143%" y="949" width="0.3271%" height="15" fill="rgb(226,82,3)" fg:x="120855645" fg:w="2437944"/><text x="16.4643%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2,437,944 samples, 0.33%)</title><rect x="16.2143%" y="933" width="0.3271%" height="15" fill="rgb(240,164,32)" fg:x="120855645" fg:w="2437944"/><text x="16.4643%" y="943.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2,437,944 samples, 0.33%)</title><rect x="16.2143%" y="917" width="0.3271%" height="15" fill="rgb(232,46,7)" fg:x="120855645" fg:w="2437944"/><text x="16.4643%" y="927.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val (2,437,944 samples, 0.33%)</title><rect x="16.2143%" y="901" width="0.3271%" height="15" fill="rgb(229,129,53)" fg:x="120855645" fg:w="2437944"/><text x="16.4643%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val::Dropper&lt;serde_json::value::Value&gt;&gt; (2,437,944 samples, 0.33%)</title><rect x="16.2143%" y="885" width="0.3271%" height="15" fill="rgb(234,188,29)" fg:x="120855645" fg:w="2437944"/><text x="16.4643%" y="895.50"></text></g><g><title>&lt;alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val::Dropper&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2,437,944 samples, 0.33%)</title><rect x="16.2143%" y="869" width="0.3271%" height="15" fill="rgb(246,141,4)" fg:x="120855645" fg:w="2437944"/><text x="16.4643%" y="879.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (2,437,944 samples, 0.33%)</title><rect x="16.2143%" y="853" width="0.3271%" height="15" fill="rgb(229,23,39)" fg:x="120855645" fg:w="2437944"/><text x="16.4643%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2,437,944 samples, 0.33%)</title><rect x="16.2143%" y="837" width="0.3271%" height="15" fill="rgb(206,12,3)" fg:x="120855645" fg:w="2437944"/><text x="16.4643%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;serde_json::value::Value&gt;&gt; (2,437,944 samples, 0.33%)</title><rect x="16.2143%" y="821" width="0.3271%" height="15" fill="rgb(252,226,20)" fg:x="120855645" fg:w="2437944"/><text x="16.4643%" y="831.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,437,944 samples, 0.33%)</title><rect x="16.2143%" y="805" width="0.3271%" height="15" fill="rgb(216,123,35)" fg:x="120855645" fg:w="2437944"/><text x="16.4643%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (2,437,944 samples, 0.33%)</title><rect x="16.2143%" y="789" width="0.3271%" height="15" fill="rgb(212,68,40)" fg:x="120855645" fg:w="2437944"/><text x="16.4643%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2,437,944 samples, 0.33%)</title><rect x="16.2143%" y="773" width="0.3271%" height="15" fill="rgb(254,125,32)" fg:x="120855645" fg:w="2437944"/><text x="16.4643%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2,437,944 samples, 0.33%)</title><rect x="16.2143%" y="757" width="0.3271%" height="15" fill="rgb(253,97,22)" fg:x="120855645" fg:w="2437944"/><text x="16.4643%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2,437,944 samples, 0.33%)</title><rect x="16.2143%" y="741" width="0.3271%" height="15" fill="rgb(241,101,14)" fg:x="120855645" fg:w="2437944"/><text x="16.4643%" y="751.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2,437,944 samples, 0.33%)</title><rect x="16.2143%" y="725" width="0.3271%" height="15" fill="rgb(238,103,29)" fg:x="120855645" fg:w="2437944"/><text x="16.4643%" y="735.50"></text></g><g><title>core::mem::drop (2,437,944 samples, 0.33%)</title><rect x="16.2143%" y="709" width="0.3271%" height="15" fill="rgb(233,195,47)" fg:x="120855645" fg:w="2437944"/><text x="16.4643%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2,437,944 samples, 0.33%)</title><rect x="16.2143%" y="693" width="0.3271%" height="15" fill="rgb(246,218,30)" fg:x="120855645" fg:w="2437944"/><text x="16.4643%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2,437,944 samples, 0.33%)</title><rect x="16.2143%" y="677" width="0.3271%" height="15" fill="rgb(219,145,47)" fg:x="120855645" fg:w="2437944"/><text x="16.4643%" y="687.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val (2,437,944 samples, 0.33%)</title><rect x="16.2143%" y="661" width="0.3271%" height="15" fill="rgb(243,12,26)" fg:x="120855645" fg:w="2437944"/><text x="16.4643%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val::Dropper&lt;serde_json::value::Value&gt;&gt; (2,437,944 samples, 0.33%)</title><rect x="16.2143%" y="645" width="0.3271%" height="15" fill="rgb(214,87,16)" fg:x="120855645" fg:w="2437944"/><text x="16.4643%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val::Dropper&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2,437,944 samples, 0.33%)</title><rect x="16.2143%" y="629" width="0.3271%" height="15" fill="rgb(208,99,42)" fg:x="120855645" fg:w="2437944"/><text x="16.4643%" y="639.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (2,437,944 samples, 0.33%)</title><rect x="16.2143%" y="613" width="0.3271%" height="15" fill="rgb(253,99,2)" fg:x="120855645" fg:w="2437944"/><text x="16.4643%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1,124,848 samples, 0.15%)</title><rect x="16.3905%" y="597" width="0.1509%" height="15" fill="rgb(220,168,23)" fg:x="122168741" fg:w="1124848"/><text x="16.6405%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;serde_json::value::Value&gt;&gt; (1,124,848 samples, 0.15%)</title><rect x="16.3905%" y="581" width="0.1509%" height="15" fill="rgb(242,38,24)" fg:x="122168741" fg:w="1124848"/><text x="16.6405%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,124,848 samples, 0.15%)</title><rect x="16.3905%" y="565" width="0.1509%" height="15" fill="rgb(225,182,9)" fg:x="122168741" fg:w="1124848"/><text x="16.6405%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1,124,848 samples, 0.15%)</title><rect x="16.3905%" y="549" width="0.1509%" height="15" fill="rgb(243,178,37)" fg:x="122168741" fg:w="1124848"/><text x="16.6405%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1,124,848 samples, 0.15%)</title><rect x="16.3905%" y="533" width="0.1509%" height="15" fill="rgb(232,139,19)" fg:x="122168741" fg:w="1124848"/><text x="16.6405%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1,124,848 samples, 0.15%)</title><rect x="16.3905%" y="517" width="0.1509%" height="15" fill="rgb(225,201,24)" fg:x="122168741" fg:w="1124848"/><text x="16.6405%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1,124,848 samples, 0.15%)</title><rect x="16.3905%" y="501" width="0.1509%" height="15" fill="rgb(221,47,46)" fg:x="122168741" fg:w="1124848"/><text x="16.6405%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1,124,848 samples, 0.15%)</title><rect x="16.3905%" y="485" width="0.1509%" height="15" fill="rgb(249,23,13)" fg:x="122168741" fg:w="1124848"/><text x="16.6405%" y="495.50"></text></g><g><title>core::mem::drop (1,124,848 samples, 0.15%)</title><rect x="16.3905%" y="469" width="0.1509%" height="15" fill="rgb(219,9,5)" fg:x="122168741" fg:w="1124848"/><text x="16.6405%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1,124,848 samples, 0.15%)</title><rect x="16.3905%" y="453" width="0.1509%" height="15" fill="rgb(254,171,16)" fg:x="122168741" fg:w="1124848"/><text x="16.6405%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1,124,848 samples, 0.15%)</title><rect x="16.3905%" y="437" width="0.1509%" height="15" fill="rgb(230,171,20)" fg:x="122168741" fg:w="1124848"/><text x="16.6405%" y="447.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val (1,124,848 samples, 0.15%)</title><rect x="16.3905%" y="421" width="0.1509%" height="15" fill="rgb(210,71,41)" fg:x="122168741" fg:w="1124848"/><text x="16.6405%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val::Dropper&lt;serde_json::value::Value&gt;&gt; (1,124,848 samples, 0.15%)</title><rect x="16.3905%" y="405" width="0.1509%" height="15" fill="rgb(206,173,20)" fg:x="122168741" fg:w="1124848"/><text x="16.6405%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val::Dropper&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1,124,848 samples, 0.15%)</title><rect x="16.3905%" y="389" width="0.1509%" height="15" fill="rgb(233,88,34)" fg:x="122168741" fg:w="1124848"/><text x="16.6405%" y="399.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (1,124,848 samples, 0.15%)</title><rect x="16.3905%" y="373" width="0.1509%" height="15" fill="rgb(223,209,46)" fg:x="122168741" fg:w="1124848"/><text x="16.6405%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1,124,848 samples, 0.15%)</title><rect x="16.3905%" y="357" width="0.1509%" height="15" fill="rgb(250,43,18)" fg:x="122168741" fg:w="1124848"/><text x="16.6405%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;serde_json::value::Value&gt;&gt; (1,124,848 samples, 0.15%)</title><rect x="16.3905%" y="341" width="0.1509%" height="15" fill="rgb(208,13,10)" fg:x="122168741" fg:w="1124848"/><text x="16.6405%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,124,848 samples, 0.15%)</title><rect x="16.3905%" y="325" width="0.1509%" height="15" fill="rgb(212,200,36)" fg:x="122168741" fg:w="1124848"/><text x="16.6405%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1,124,848 samples, 0.15%)</title><rect x="16.3905%" y="309" width="0.1509%" height="15" fill="rgb(225,90,30)" fg:x="122168741" fg:w="1124848"/><text x="16.6405%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1,124,848 samples, 0.15%)</title><rect x="16.3905%" y="293" width="0.1509%" height="15" fill="rgb(236,182,39)" fg:x="122168741" fg:w="1124848"/><text x="16.6405%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1,124,848 samples, 0.15%)</title><rect x="16.3905%" y="277" width="0.1509%" height="15" fill="rgb(212,144,35)" fg:x="122168741" fg:w="1124848"/><text x="16.6405%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1,124,848 samples, 0.15%)</title><rect x="16.3905%" y="261" width="0.1509%" height="15" fill="rgb(228,63,44)" fg:x="122168741" fg:w="1124848"/><text x="16.6405%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1,124,848 samples, 0.15%)</title><rect x="16.3905%" y="245" width="0.1509%" height="15" fill="rgb(228,109,6)" fg:x="122168741" fg:w="1124848"/><text x="16.6405%" y="255.50"></text></g><g><title>core::mem::drop (1,124,848 samples, 0.15%)</title><rect x="16.3905%" y="229" width="0.1509%" height="15" fill="rgb(238,117,24)" fg:x="122168741" fg:w="1124848"/><text x="16.6405%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1,124,848 samples, 0.15%)</title><rect x="16.3905%" y="213" width="0.1509%" height="15" fill="rgb(242,26,26)" fg:x="122168741" fg:w="1124848"/><text x="16.6405%" y="223.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1,124,848 samples, 0.15%)</title><rect x="16.3905%" y="197" width="0.1509%" height="15" fill="rgb(221,92,48)" fg:x="122168741" fg:w="1124848"/><text x="16.6405%" y="207.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1,124,848 samples, 0.15%)</title><rect x="16.3905%" y="181" width="0.1509%" height="15" fill="rgb(209,209,32)" fg:x="122168741" fg:w="1124848"/><text x="16.6405%" y="191.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Dying,K,V&gt;::deallocating_end (1,124,848 samples, 0.15%)</title><rect x="16.3905%" y="165" width="0.1509%" height="15" fill="rgb(221,70,22)" fg:x="122168741" fg:w="1124848"/><text x="16.6405%" y="175.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_end (1,124,848 samples, 0.15%)</title><rect x="16.3905%" y="149" width="0.1509%" height="15" fill="rgb(248,145,5)" fg:x="122168741" fg:w="1124848"/><text x="16.6405%" y="159.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::deallocate_and_ascend (1,124,848 samples, 0.15%)</title><rect x="16.3905%" y="133" width="0.1509%" height="15" fill="rgb(226,116,26)" fg:x="122168741" fg:w="1124848"/><text x="16.6405%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1,124,848 samples, 0.15%)</title><rect x="16.3905%" y="117" width="0.1509%" height="15" fill="rgb(244,5,17)" fg:x="122168741" fg:w="1124848"/><text x="16.6405%" y="127.50"></text></g><g><title>alloc::alloc::dealloc (1,124,848 samples, 0.15%)</title><rect x="16.3905%" y="101" width="0.1509%" height="15" fill="rgb(252,159,33)" fg:x="122168741" fg:w="1124848"/><text x="16.6405%" y="111.50"></text></g><g><title>cfree (1,124,848 samples, 0.15%)</title><rect x="16.3905%" y="85" width="0.1509%" height="15" fill="rgb(206,71,0)" fg:x="122168741" fg:w="1124848"/><text x="16.6405%" y="95.50"></text></g><g><title>[libc.so.6] (1,124,848 samples, 0.15%)</title><rect x="16.3905%" y="69" width="0.1509%" height="15" fill="rgb(233,118,54)" fg:x="122168741" fg:w="1124848"/><text x="16.6405%" y="79.50"></text></g><g><title>[libc.so.6] (1,124,848 samples, 0.15%)</title><rect x="16.3905%" y="53" width="0.1509%" height="15" fill="rgb(234,83,48)" fg:x="122168741" fg:w="1124848"/><text x="16.6405%" y="63.50"></text></g><g><title>[libc.so.6] (1,124,848 samples, 0.15%)</title><rect x="16.3905%" y="37" width="0.1509%" height="15" fill="rgb(228,3,54)" fg:x="122168741" fg:w="1124848"/><text x="16.6405%" y="47.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (1,261,674 samples, 0.17%)</title><rect x="16.5414%" y="3269" width="0.1693%" height="15" fill="rgb(226,155,13)" fg:x="123293589" fg:w="1261674"/><text x="16.7914%" y="3279.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1,261,674 samples, 0.17%)</title><rect x="16.5414%" y="3253" width="0.1693%" height="15" fill="rgb(241,28,37)" fg:x="123293589" fg:w="1261674"/><text x="16.7914%" y="3263.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1,261,674 samples, 0.17%)</title><rect x="16.5414%" y="3237" width="0.1693%" height="15" fill="rgb(233,93,10)" fg:x="123293589" fg:w="1261674"/><text x="16.7914%" y="3247.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1,261,674 samples, 0.17%)</title><rect x="16.5414%" y="3221" width="0.1693%" height="15" fill="rgb(225,113,19)" fg:x="123293589" fg:w="1261674"/><text x="16.7914%" y="3231.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,261,674 samples, 0.17%)</title><rect x="16.5414%" y="3205" width="0.1693%" height="15" fill="rgb(241,2,18)" fg:x="123293589" fg:w="1261674"/><text x="16.7914%" y="3215.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (1,261,674 samples, 0.17%)</title><rect x="16.5414%" y="3189" width="0.1693%" height="15" fill="rgb(228,207,21)" fg:x="123293589" fg:w="1261674"/><text x="16.7914%" y="3199.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1,261,674 samples, 0.17%)</title><rect x="16.5414%" y="3173" width="0.1693%" height="15" fill="rgb(213,211,35)" fg:x="123293589" fg:w="1261674"/><text x="16.7914%" y="3183.50"></text></g><g><title>alloc::alloc::dealloc (1,261,674 samples, 0.17%)</title><rect x="16.5414%" y="3157" width="0.1693%" height="15" fill="rgb(209,83,10)" fg:x="123293589" fg:w="1261674"/><text x="16.7914%" y="3167.50"></text></g><g><title>cfree (1,261,674 samples, 0.17%)</title><rect x="16.5414%" y="3141" width="0.1693%" height="15" fill="rgb(209,164,1)" fg:x="123293589" fg:w="1261674"/><text x="16.7914%" y="3151.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (1,263,131 samples, 0.17%)</title><rect x="16.7107%" y="869" width="0.1695%" height="15" fill="rgb(213,184,43)" fg:x="124555263" fg:w="1263131"/><text x="16.9607%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1,263,131 samples, 0.17%)</title><rect x="16.7107%" y="853" width="0.1695%" height="15" fill="rgb(231,61,34)" fg:x="124555263" fg:w="1263131"/><text x="16.9607%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1,263,131 samples, 0.17%)</title><rect x="16.7107%" y="837" width="0.1695%" height="15" fill="rgb(235,75,3)" fg:x="124555263" fg:w="1263131"/><text x="16.9607%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1,263,131 samples, 0.17%)</title><rect x="16.7107%" y="821" width="0.1695%" height="15" fill="rgb(220,106,47)" fg:x="124555263" fg:w="1263131"/><text x="16.9607%" y="831.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,263,131 samples, 0.17%)</title><rect x="16.7107%" y="805" width="0.1695%" height="15" fill="rgb(210,196,33)" fg:x="124555263" fg:w="1263131"/><text x="16.9607%" y="815.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (1,263,131 samples, 0.17%)</title><rect x="16.7107%" y="789" width="0.1695%" height="15" fill="rgb(229,154,42)" fg:x="124555263" fg:w="1263131"/><text x="16.9607%" y="799.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1,263,131 samples, 0.17%)</title><rect x="16.7107%" y="773" width="0.1695%" height="15" fill="rgb(228,114,26)" fg:x="124555263" fg:w="1263131"/><text x="16.9607%" y="783.50"></text></g><g><title>alloc::alloc::dealloc (1,263,131 samples, 0.17%)</title><rect x="16.7107%" y="757" width="0.1695%" height="15" fill="rgb(208,144,1)" fg:x="124555263" fg:w="1263131"/><text x="16.9607%" y="767.50"></text></g><g><title>cfree (1,263,131 samples, 0.17%)</title><rect x="16.7107%" y="741" width="0.1695%" height="15" fill="rgb(239,112,37)" fg:x="124555263" fg:w="1263131"/><text x="16.9607%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;main::benchmark::LayoutFrame&gt;&gt; (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="4837" width="0.5058%" height="15" fill="rgb(210,96,50)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="4847.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="4821" width="0.5058%" height="15" fill="rgb(222,178,2)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="4831.50"></text></g><g><title>core::ptr::drop_in_place&lt;[main::benchmark::LayoutFrame]&gt; (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="4805" width="0.5058%" height="15" fill="rgb(226,74,18)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="4815.50"></text></g><g><title>core::ptr::drop_in_place&lt;main::benchmark::LayoutFrame&gt; (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="4789" width="0.5058%" height="15" fill="rgb(225,67,54)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="4799.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="4773" width="0.5058%" height="15" fill="rgb(251,92,32)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="4783.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="4757" width="0.5058%" height="15" fill="rgb(228,149,22)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="4767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="4741" width="0.5058%" height="15" fill="rgb(243,54,13)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="4751.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="4725" width="0.5058%" height="15" fill="rgb(243,180,28)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="4735.50"></text></g><g><title>core::mem::drop (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="4709" width="0.5058%" height="15" fill="rgb(208,167,24)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="4719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="4693" width="0.5058%" height="15" fill="rgb(245,73,45)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="4703.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="4677" width="0.5058%" height="15" fill="rgb(237,203,48)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="4687.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="4661" width="0.5058%" height="15" fill="rgb(211,197,16)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="4671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val::Dropper&lt;serde_json::value::Value&gt;&gt; (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="4645" width="0.5058%" height="15" fill="rgb(243,99,51)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="4655.50"></text></g><g><title>&lt;alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val::Dropper&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="4629" width="0.5058%" height="15" fill="rgb(215,123,29)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="4639.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="4613" width="0.5058%" height="15" fill="rgb(239,186,37)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="4623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="4597" width="0.5058%" height="15" fill="rgb(252,136,39)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="4607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="4581" width="0.5058%" height="15" fill="rgb(223,213,32)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="4591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="4565" width="0.5058%" height="15" fill="rgb(233,115,5)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="4575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="4549" width="0.5058%" height="15" fill="rgb(207,226,44)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="4559.50"></text></g><g><title>core::mem::drop (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="4533" width="0.5058%" height="15" fill="rgb(208,126,0)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="4543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="4517" width="0.5058%" height="15" fill="rgb(244,66,21)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="4527.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="4501" width="0.5058%" height="15" fill="rgb(222,97,12)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="4511.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="4485" width="0.5058%" height="15" fill="rgb(219,213,19)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="4495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val::Dropper&lt;serde_json::value::Value&gt;&gt; (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="4469" width="0.5058%" height="15" fill="rgb(252,169,30)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="4479.50"></text></g><g><title>&lt;alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val::Dropper&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="4453" width="0.5058%" height="15" fill="rgb(206,32,51)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="4463.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="4437" width="0.5058%" height="15" fill="rgb(250,172,42)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="4447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="4421" width="0.5058%" height="15" fill="rgb(209,34,43)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="4431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;serde_json::value::Value&gt;&gt; (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="4405" width="0.5058%" height="15" fill="rgb(223,11,35)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="4415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="4389" width="0.5058%" height="15" fill="rgb(251,219,26)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="4399.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="4373" width="0.5058%" height="15" fill="rgb(231,119,3)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="4383.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="4357" width="0.5058%" height="15" fill="rgb(216,97,11)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="4367.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="4341" width="0.5058%" height="15" fill="rgb(223,59,9)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="4351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="4325" width="0.5058%" height="15" fill="rgb(233,93,31)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="4335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="4309" width="0.5058%" height="15" fill="rgb(239,81,33)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="4319.50"></text></g><g><title>core::mem::drop (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="4293" width="0.5058%" height="15" fill="rgb(213,120,34)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="4303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="4277" width="0.5058%" height="15" fill="rgb(243,49,53)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="4287.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="4261" width="0.5058%" height="15" fill="rgb(247,216,33)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="4271.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="4245" width="0.5058%" height="15" fill="rgb(226,26,14)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="4255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val::Dropper&lt;serde_json::value::Value&gt;&gt; (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="4229" width="0.5058%" height="15" fill="rgb(215,49,53)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="4239.50"></text></g><g><title>&lt;alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val::Dropper&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="4213" width="0.5058%" height="15" fill="rgb(245,162,40)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="4223.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="4197" width="0.5058%" height="15" fill="rgb(229,68,17)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="4207.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="4181" width="0.5058%" height="15" fill="rgb(213,182,10)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="4191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;serde_json::value::Value&gt;&gt; (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="4165" width="0.5058%" height="15" fill="rgb(245,125,30)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="4175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="4149" width="0.5058%" height="15" fill="rgb(232,202,2)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="4159.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="4133" width="0.5058%" height="15" fill="rgb(237,140,51)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="4143.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="4117" width="0.5058%" height="15" fill="rgb(236,157,25)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="4127.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="4101" width="0.5058%" height="15" fill="rgb(219,209,0)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="4111.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="4085" width="0.5058%" height="15" fill="rgb(240,116,54)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="4095.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="4069" width="0.5058%" height="15" fill="rgb(216,10,36)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="4079.50"></text></g><g><title>core::mem::drop (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="4053" width="0.5058%" height="15" fill="rgb(222,72,44)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="4063.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="4037" width="0.5058%" height="15" fill="rgb(232,159,9)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="4047.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="4021" width="0.5058%" height="15" fill="rgb(210,39,32)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="4031.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="4005" width="0.5058%" height="15" fill="rgb(216,194,45)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="4015.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val::Dropper&lt;serde_json::value::Value&gt;&gt; (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="3989" width="0.5058%" height="15" fill="rgb(218,18,35)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="3999.50"></text></g><g><title>&lt;alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val::Dropper&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="3973" width="0.5058%" height="15" fill="rgb(207,83,51)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="3983.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="3957" width="0.5058%" height="15" fill="rgb(225,63,43)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="3967.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="3941" width="0.5058%" height="15" fill="rgb(207,57,36)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="3951.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;serde_json::value::Value&gt;&gt; (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="3925" width="0.5058%" height="15" fill="rgb(216,99,33)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="3935.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="3909" width="0.5058%" height="15" fill="rgb(225,42,16)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="3919.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="3893" width="0.5058%" height="15" fill="rgb(220,201,45)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="3903.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="3877" width="0.5058%" height="15" fill="rgb(225,33,4)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="3887.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="3861" width="0.5058%" height="15" fill="rgb(224,33,50)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="3871.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="3845" width="0.5058%" height="15" fill="rgb(246,198,51)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="3855.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="3829" width="0.5058%" height="15" fill="rgb(205,22,4)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="3839.50"></text></g><g><title>core::mem::drop (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="3813" width="0.5058%" height="15" fill="rgb(206,3,8)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="3823.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="3797" width="0.5058%" height="15" fill="rgb(251,23,15)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="3807.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="3781" width="0.5058%" height="15" fill="rgb(252,88,28)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="3791.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="3765" width="0.5058%" height="15" fill="rgb(212,127,14)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="3775.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val::Dropper&lt;serde_json::value::Value&gt;&gt; (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="3749" width="0.5058%" height="15" fill="rgb(247,145,37)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="3759.50"></text></g><g><title>&lt;alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val::Dropper&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="3733" width="0.5058%" height="15" fill="rgb(209,117,53)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="3743.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="3717" width="0.5058%" height="15" fill="rgb(212,90,42)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="3727.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="3701" width="0.5058%" height="15" fill="rgb(218,164,37)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="3711.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;serde_json::value::Value&gt;&gt; (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="3685" width="0.5058%" height="15" fill="rgb(246,65,34)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="3695.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="3669" width="0.5058%" height="15" fill="rgb(231,100,33)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="3679.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="3653" width="0.5058%" height="15" fill="rgb(228,126,14)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="3663.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="3637" width="0.5058%" height="15" fill="rgb(215,173,21)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="3647.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="3621" width="0.5058%" height="15" fill="rgb(210,6,40)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="3631.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="3605" width="0.5058%" height="15" fill="rgb(212,48,18)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="3615.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="3589" width="0.5058%" height="15" fill="rgb(230,214,11)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="3599.50"></text></g><g><title>core::mem::drop (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="3573" width="0.5058%" height="15" fill="rgb(254,105,39)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="3583.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="3557" width="0.5058%" height="15" fill="rgb(245,158,5)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="3567.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="3541" width="0.5058%" height="15" fill="rgb(249,208,11)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="3551.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="3525" width="0.5058%" height="15" fill="rgb(210,39,28)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="3535.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val::Dropper&lt;serde_json::value::Value&gt;&gt; (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="3509" width="0.5058%" height="15" fill="rgb(211,56,53)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="3519.50"></text></g><g><title>&lt;alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val::Dropper&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="3493" width="0.5058%" height="15" fill="rgb(226,201,30)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="3503.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="3477" width="0.5058%" height="15" fill="rgb(239,101,34)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="3487.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="3461" width="0.5058%" height="15" fill="rgb(226,209,5)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="3471.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;serde_json::value::Value&gt;&gt; (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="3445" width="0.5058%" height="15" fill="rgb(250,105,47)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="3455.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="3429" width="0.5058%" height="15" fill="rgb(230,72,3)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="3439.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="3413" width="0.5058%" height="15" fill="rgb(232,218,39)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="3423.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="3397" width="0.5058%" height="15" fill="rgb(248,166,6)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="3407.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="3381" width="0.5058%" height="15" fill="rgb(247,89,20)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="3391.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="3365" width="0.5058%" height="15" fill="rgb(248,130,54)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="3375.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="3349" width="0.5058%" height="15" fill="rgb(234,196,4)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="3359.50"></text></g><g><title>core::mem::drop (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="3333" width="0.5058%" height="15" fill="rgb(250,143,31)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="3343.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="3317" width="0.5058%" height="15" fill="rgb(211,110,34)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="3327.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="3301" width="0.5058%" height="15" fill="rgb(215,124,48)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="3311.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val (3,770,101 samples, 0.51%)</title><rect x="16.5414%" y="3285" width="0.5058%" height="15" fill="rgb(216,46,13)" fg:x="123293589" fg:w="3770101"/><text x="16.7914%" y="3295.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val::Dropper&lt;serde_json::value::Value&gt;&gt; (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="3269" width="0.3365%" height="15" fill="rgb(205,184,25)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="3279.50"></text></g><g><title>&lt;alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val::Dropper&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="3253" width="0.3365%" height="15" fill="rgb(228,1,10)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="3263.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="3237" width="0.3365%" height="15" fill="rgb(213,116,27)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="3247.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="3221" width="0.3365%" height="15" fill="rgb(241,95,50)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="3231.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;serde_json::value::Value&gt;&gt; (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="3205" width="0.3365%" height="15" fill="rgb(238,48,32)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="3215.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="3189" width="0.3365%" height="15" fill="rgb(235,113,49)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="3199.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="3173" width="0.3365%" height="15" fill="rgb(205,127,43)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="3183.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="3157" width="0.3365%" height="15" fill="rgb(250,162,2)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="3167.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="3141" width="0.3365%" height="15" fill="rgb(220,13,41)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="3151.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="3125" width="0.3365%" height="15" fill="rgb(249,221,25)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="3135.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="3109" width="0.3365%" height="15" fill="rgb(215,208,19)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="3119.50"></text></g><g><title>core::mem::drop (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="3093" width="0.3365%" height="15" fill="rgb(236,175,2)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="3103.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="3077" width="0.3365%" height="15" fill="rgb(241,52,2)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="3087.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="3061" width="0.3365%" height="15" fill="rgb(248,140,14)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="3071.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="3045" width="0.3365%" height="15" fill="rgb(253,22,42)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="3055.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val::Dropper&lt;serde_json::value::Value&gt;&gt; (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="3029" width="0.3365%" height="15" fill="rgb(234,61,47)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="3039.50"></text></g><g><title>&lt;alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val::Dropper&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="3013" width="0.3365%" height="15" fill="rgb(208,226,15)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="3023.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="2997" width="0.3365%" height="15" fill="rgb(217,221,4)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="3007.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="2981" width="0.3365%" height="15" fill="rgb(212,174,34)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="2991.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;serde_json::value::Value&gt;&gt; (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="2965" width="0.3365%" height="15" fill="rgb(253,83,4)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="2975.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="2949" width="0.3365%" height="15" fill="rgb(250,195,49)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="2959.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="2933" width="0.3365%" height="15" fill="rgb(241,192,25)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="2943.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="2917" width="0.3365%" height="15" fill="rgb(208,124,10)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="2927.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="2901" width="0.3365%" height="15" fill="rgb(222,33,0)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="2911.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="2885" width="0.3365%" height="15" fill="rgb(234,209,28)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="2895.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="2869" width="0.3365%" height="15" fill="rgb(224,11,23)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="2879.50"></text></g><g><title>core::mem::drop (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="2853" width="0.3365%" height="15" fill="rgb(232,99,1)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="2863.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="2837" width="0.3365%" height="15" fill="rgb(237,95,45)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="2847.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="2821" width="0.3365%" height="15" fill="rgb(208,109,11)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="2831.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="2805" width="0.3365%" height="15" fill="rgb(216,190,48)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="2815.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val::Dropper&lt;serde_json::value::Value&gt;&gt; (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="2789" width="0.3365%" height="15" fill="rgb(251,171,36)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="2799.50"></text></g><g><title>&lt;alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val::Dropper&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="2773" width="0.3365%" height="15" fill="rgb(230,62,22)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="2783.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="2757" width="0.3365%" height="15" fill="rgb(225,114,35)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="2767.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="2741" width="0.3365%" height="15" fill="rgb(215,118,42)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="2751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;serde_json::value::Value&gt;&gt; (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="2725" width="0.3365%" height="15" fill="rgb(243,119,21)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="2735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="2709" width="0.3365%" height="15" fill="rgb(252,177,53)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="2719.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="2693" width="0.3365%" height="15" fill="rgb(237,209,29)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="2703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="2677" width="0.3365%" height="15" fill="rgb(212,65,23)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="2687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="2661" width="0.3365%" height="15" fill="rgb(230,222,46)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="2671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="2645" width="0.3365%" height="15" fill="rgb(215,135,32)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="2655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="2629" width="0.3365%" height="15" fill="rgb(246,101,22)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="2639.50"></text></g><g><title>core::mem::drop (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="2613" width="0.3365%" height="15" fill="rgb(206,107,13)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="2623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="2597" width="0.3365%" height="15" fill="rgb(250,100,44)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="2607.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="2581" width="0.3365%" height="15" fill="rgb(231,147,38)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="2591.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="2565" width="0.3365%" height="15" fill="rgb(229,8,40)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="2575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val::Dropper&lt;serde_json::value::Value&gt;&gt; (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="2549" width="0.3365%" height="15" fill="rgb(221,135,30)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="2559.50"></text></g><g><title>&lt;alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val::Dropper&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="2533" width="0.3365%" height="15" fill="rgb(249,193,18)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="2543.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="2517" width="0.3365%" height="15" fill="rgb(209,133,39)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="2527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="2501" width="0.3365%" height="15" fill="rgb(232,100,14)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="2511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;serde_json::value::Value&gt;&gt; (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="2485" width="0.3365%" height="15" fill="rgb(224,185,1)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="2495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="2469" width="0.3365%" height="15" fill="rgb(223,139,8)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="2479.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="2453" width="0.3365%" height="15" fill="rgb(232,213,38)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="2463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="2437" width="0.3365%" height="15" fill="rgb(207,94,22)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="2447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="2421" width="0.3365%" height="15" fill="rgb(219,183,54)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="2431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="2405" width="0.3365%" height="15" fill="rgb(216,185,54)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="2415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="2389" width="0.3365%" height="15" fill="rgb(254,217,39)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="2399.50"></text></g><g><title>core::mem::drop (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="2373" width="0.3365%" height="15" fill="rgb(240,178,23)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="2383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="2357" width="0.3365%" height="15" fill="rgb(218,11,47)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="2367.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="2341" width="0.3365%" height="15" fill="rgb(218,51,51)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="2351.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="2325" width="0.3365%" height="15" fill="rgb(238,126,27)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="2335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val::Dropper&lt;serde_json::value::Value&gt;&gt; (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="2309" width="0.3365%" height="15" fill="rgb(249,202,22)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="2319.50"></text></g><g><title>&lt;alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val::Dropper&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="2293" width="0.3365%" height="15" fill="rgb(254,195,49)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="2303.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="2277" width="0.3365%" height="15" fill="rgb(208,123,14)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="2287.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="2261" width="0.3365%" height="15" fill="rgb(224,200,8)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="2271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;serde_json::value::Value&gt;&gt; (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="2245" width="0.3365%" height="15" fill="rgb(217,61,36)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="2255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="2229" width="0.3365%" height="15" fill="rgb(206,35,45)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="2239.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="2213" width="0.3365%" height="15" fill="rgb(217,65,33)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="2223.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="2197" width="0.3365%" height="15" fill="rgb(222,158,48)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="2207.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="2181" width="0.3365%" height="15" fill="rgb(254,2,54)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="2191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="2165" width="0.3365%" height="15" fill="rgb(250,143,38)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="2175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="2149" width="0.3365%" height="15" fill="rgb(248,25,0)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="2159.50"></text></g><g><title>core::mem::drop (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="2133" width="0.3365%" height="15" fill="rgb(206,152,27)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="2143.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="2117" width="0.3365%" height="15" fill="rgb(240,77,30)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="2127.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="2101" width="0.3365%" height="15" fill="rgb(231,5,3)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="2111.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="2085" width="0.3365%" height="15" fill="rgb(207,226,32)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="2095.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val::Dropper&lt;serde_json::value::Value&gt;&gt; (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="2069" width="0.3365%" height="15" fill="rgb(222,207,47)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="2079.50"></text></g><g><title>&lt;alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val::Dropper&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="2053" width="0.3365%" height="15" fill="rgb(229,115,45)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="2063.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="2037" width="0.3365%" height="15" fill="rgb(224,191,6)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="2047.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="2021" width="0.3365%" height="15" fill="rgb(230,227,24)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="2031.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;serde_json::value::Value&gt;&gt; (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="2005" width="0.3365%" height="15" fill="rgb(228,80,19)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="2015.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="1989" width="0.3365%" height="15" fill="rgb(247,229,0)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="1999.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="1973" width="0.3365%" height="15" fill="rgb(237,194,15)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="1983.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="1957" width="0.3365%" height="15" fill="rgb(219,203,20)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="1967.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="1941" width="0.3365%" height="15" fill="rgb(234,128,8)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="1951.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="1925" width="0.3365%" height="15" fill="rgb(248,202,8)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="1935.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="1909" width="0.3365%" height="15" fill="rgb(206,104,37)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="1919.50"></text></g><g><title>core::mem::drop (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="1893" width="0.3365%" height="15" fill="rgb(223,8,27)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="1903.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="1877" width="0.3365%" height="15" fill="rgb(216,217,28)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="1887.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="1861" width="0.3365%" height="15" fill="rgb(249,199,1)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="1871.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="1845" width="0.3365%" height="15" fill="rgb(240,85,17)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="1855.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val::Dropper&lt;serde_json::value::Value&gt;&gt; (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="1829" width="0.3365%" height="15" fill="rgb(206,108,45)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="1839.50"></text></g><g><title>&lt;alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val::Dropper&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="1813" width="0.3365%" height="15" fill="rgb(245,210,41)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="1823.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="1797" width="0.3365%" height="15" fill="rgb(206,13,37)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="1807.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="1781" width="0.3365%" height="15" fill="rgb(250,61,18)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="1791.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;serde_json::value::Value&gt;&gt; (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="1765" width="0.3365%" height="15" fill="rgb(235,172,48)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="1775.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="1749" width="0.3365%" height="15" fill="rgb(249,201,17)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="1759.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="1733" width="0.3365%" height="15" fill="rgb(219,208,6)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="1743.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="1717" width="0.3365%" height="15" fill="rgb(248,31,23)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="1727.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="1701" width="0.3365%" height="15" fill="rgb(245,15,42)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="1711.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="1685" width="0.3365%" height="15" fill="rgb(222,217,39)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="1695.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="1669" width="0.3365%" height="15" fill="rgb(210,219,27)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="1679.50"></text></g><g><title>core::mem::drop (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="1653" width="0.3365%" height="15" fill="rgb(252,166,36)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="1663.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="1637" width="0.3365%" height="15" fill="rgb(245,132,34)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="1647.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="1621" width="0.3365%" height="15" fill="rgb(236,54,3)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="1631.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="1605" width="0.3365%" height="15" fill="rgb(241,173,43)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="1615.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val::Dropper&lt;serde_json::value::Value&gt;&gt; (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="1589" width="0.3365%" height="15" fill="rgb(215,190,9)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="1599.50"></text></g><g><title>&lt;alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val::Dropper&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="1573" width="0.3365%" height="15" fill="rgb(242,101,16)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="1583.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="1557" width="0.3365%" height="15" fill="rgb(223,190,21)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="1567.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="1541" width="0.3365%" height="15" fill="rgb(215,228,25)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="1551.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;serde_json::value::Value&gt;&gt; (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="1525" width="0.3365%" height="15" fill="rgb(225,36,22)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="1535.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="1509" width="0.3365%" height="15" fill="rgb(251,106,46)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="1519.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="1493" width="0.3365%" height="15" fill="rgb(208,90,1)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="1503.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="1477" width="0.3365%" height="15" fill="rgb(243,10,4)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="1487.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="1461" width="0.3365%" height="15" fill="rgb(212,137,27)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="1471.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="1445" width="0.3365%" height="15" fill="rgb(231,220,49)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="1455.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="1429" width="0.3365%" height="15" fill="rgb(237,96,20)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="1439.50"></text></g><g><title>core::mem::drop (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="1413" width="0.3365%" height="15" fill="rgb(239,229,30)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="1423.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="1397" width="0.3365%" height="15" fill="rgb(219,65,33)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="1407.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="1381" width="0.3365%" height="15" fill="rgb(243,134,7)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="1391.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="1365" width="0.3365%" height="15" fill="rgb(216,177,54)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="1375.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val::Dropper&lt;serde_json::value::Value&gt;&gt; (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="1349" width="0.3365%" height="15" fill="rgb(211,160,20)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="1359.50"></text></g><g><title>&lt;alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val::Dropper&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="1333" width="0.3365%" height="15" fill="rgb(239,85,39)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="1343.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="1317" width="0.3365%" height="15" fill="rgb(232,125,22)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="1327.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="1301" width="0.3365%" height="15" fill="rgb(244,57,34)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="1311.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;serde_json::value::Value&gt;&gt; (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="1285" width="0.3365%" height="15" fill="rgb(214,203,32)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="1295.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="1269" width="0.3365%" height="15" fill="rgb(207,58,43)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="1279.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="1253" width="0.3365%" height="15" fill="rgb(215,193,15)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="1263.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="1237" width="0.3365%" height="15" fill="rgb(232,15,44)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="1247.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="1221" width="0.3365%" height="15" fill="rgb(212,3,48)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="1231.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="1205" width="0.3365%" height="15" fill="rgb(218,128,7)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="1215.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="1189" width="0.3365%" height="15" fill="rgb(226,216,39)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="1199.50"></text></g><g><title>core::mem::drop (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="1173" width="0.3365%" height="15" fill="rgb(243,47,51)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="1183.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="1157" width="0.3365%" height="15" fill="rgb(241,183,40)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="1167.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="1141" width="0.3365%" height="15" fill="rgb(231,217,32)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="1151.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="1125" width="0.3365%" height="15" fill="rgb(229,61,38)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="1135.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val::Dropper&lt;serde_json::value::Value&gt;&gt; (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="1109" width="0.3365%" height="15" fill="rgb(225,210,5)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="1119.50"></text></g><g><title>&lt;alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val::Dropper&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="1093" width="0.3365%" height="15" fill="rgb(231,79,45)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="1103.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="1077" width="0.3365%" height="15" fill="rgb(224,100,7)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="1061" width="0.3365%" height="15" fill="rgb(241,198,18)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;serde_json::value::Value&gt;&gt; (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="1045" width="0.3365%" height="15" fill="rgb(252,97,53)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="1055.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="1029" width="0.3365%" height="15" fill="rgb(220,88,7)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="1013" width="0.3365%" height="15" fill="rgb(213,176,14)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="997" width="0.3365%" height="15" fill="rgb(246,73,7)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="981" width="0.3365%" height="15" fill="rgb(245,64,36)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="965" width="0.3365%" height="15" fill="rgb(245,80,10)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="975.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="949" width="0.3365%" height="15" fill="rgb(232,107,50)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="959.50"></text></g><g><title>core::mem::drop (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="933" width="0.3365%" height="15" fill="rgb(253,3,0)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="917" width="0.3365%" height="15" fill="rgb(212,99,53)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="927.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="901" width="0.3365%" height="15" fill="rgb(249,111,54)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="911.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val (2,508,427 samples, 0.34%)</title><rect x="16.7107%" y="885" width="0.3365%" height="15" fill="rgb(249,55,30)" fg:x="124555263" fg:w="2508427"/><text x="16.9607%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val::Dropper&lt;serde_json::value::Value&gt;&gt; (1,245,296 samples, 0.17%)</title><rect x="16.8802%" y="869" width="0.1671%" height="15" fill="rgb(237,47,42)" fg:x="125818394" fg:w="1245296"/><text x="17.1302%" y="879.50"></text></g><g><title>&lt;alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val::Dropper&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1,245,296 samples, 0.17%)</title><rect x="16.8802%" y="853" width="0.1671%" height="15" fill="rgb(211,20,18)" fg:x="125818394" fg:w="1245296"/><text x="17.1302%" y="863.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (1,245,296 samples, 0.17%)</title><rect x="16.8802%" y="837" width="0.1671%" height="15" fill="rgb(231,203,46)" fg:x="125818394" fg:w="1245296"/><text x="17.1302%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1,245,296 samples, 0.17%)</title><rect x="16.8802%" y="821" width="0.1671%" height="15" fill="rgb(237,142,3)" fg:x="125818394" fg:w="1245296"/><text x="17.1302%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;serde_json::value::Value&gt;&gt; (1,245,296 samples, 0.17%)</title><rect x="16.8802%" y="805" width="0.1671%" height="15" fill="rgb(241,107,1)" fg:x="125818394" fg:w="1245296"/><text x="17.1302%" y="815.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,245,296 samples, 0.17%)</title><rect x="16.8802%" y="789" width="0.1671%" height="15" fill="rgb(229,83,13)" fg:x="125818394" fg:w="1245296"/><text x="17.1302%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1,245,296 samples, 0.17%)</title><rect x="16.8802%" y="773" width="0.1671%" height="15" fill="rgb(241,91,40)" fg:x="125818394" fg:w="1245296"/><text x="17.1302%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1,245,296 samples, 0.17%)</title><rect x="16.8802%" y="757" width="0.1671%" height="15" fill="rgb(225,3,45)" fg:x="125818394" fg:w="1245296"/><text x="17.1302%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1,245,296 samples, 0.17%)</title><rect x="16.8802%" y="741" width="0.1671%" height="15" fill="rgb(244,223,14)" fg:x="125818394" fg:w="1245296"/><text x="17.1302%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1,245,296 samples, 0.17%)</title><rect x="16.8802%" y="725" width="0.1671%" height="15" fill="rgb(224,124,37)" fg:x="125818394" fg:w="1245296"/><text x="17.1302%" y="735.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1,245,296 samples, 0.17%)</title><rect x="16.8802%" y="709" width="0.1671%" height="15" fill="rgb(251,171,30)" fg:x="125818394" fg:w="1245296"/><text x="17.1302%" y="719.50"></text></g><g><title>core::mem::drop (1,245,296 samples, 0.17%)</title><rect x="16.8802%" y="693" width="0.1671%" height="15" fill="rgb(236,46,54)" fg:x="125818394" fg:w="1245296"/><text x="17.1302%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1,245,296 samples, 0.17%)</title><rect x="16.8802%" y="677" width="0.1671%" height="15" fill="rgb(245,213,5)" fg:x="125818394" fg:w="1245296"/><text x="17.1302%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1,245,296 samples, 0.17%)</title><rect x="16.8802%" y="661" width="0.1671%" height="15" fill="rgb(230,144,27)" fg:x="125818394" fg:w="1245296"/><text x="17.1302%" y="671.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val (1,245,296 samples, 0.17%)</title><rect x="16.8802%" y="645" width="0.1671%" height="15" fill="rgb(220,86,6)" fg:x="125818394" fg:w="1245296"/><text x="17.1302%" y="655.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (1,245,296 samples, 0.17%)</title><rect x="16.8802%" y="629" width="0.1671%" height="15" fill="rgb(240,20,13)" fg:x="125818394" fg:w="1245296"/><text x="17.1302%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1,245,296 samples, 0.17%)</title><rect x="16.8802%" y="613" width="0.1671%" height="15" fill="rgb(217,89,34)" fg:x="125818394" fg:w="1245296"/><text x="17.1302%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1,245,296 samples, 0.17%)</title><rect x="16.8802%" y="597" width="0.1671%" height="15" fill="rgb(229,13,5)" fg:x="125818394" fg:w="1245296"/><text x="17.1302%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1,245,296 samples, 0.17%)</title><rect x="16.8802%" y="581" width="0.1671%" height="15" fill="rgb(244,67,35)" fg:x="125818394" fg:w="1245296"/><text x="17.1302%" y="591.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,245,296 samples, 0.17%)</title><rect x="16.8802%" y="565" width="0.1671%" height="15" fill="rgb(221,40,2)" fg:x="125818394" fg:w="1245296"/><text x="17.1302%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (1,245,296 samples, 0.17%)</title><rect x="16.8802%" y="549" width="0.1671%" height="15" fill="rgb(237,157,21)" fg:x="125818394" fg:w="1245296"/><text x="17.1302%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1,245,296 samples, 0.17%)</title><rect x="16.8802%" y="533" width="0.1671%" height="15" fill="rgb(222,94,11)" fg:x="125818394" fg:w="1245296"/><text x="17.1302%" y="543.50"></text></g><g><title>alloc::alloc::dealloc (1,245,296 samples, 0.17%)</title><rect x="16.8802%" y="517" width="0.1671%" height="15" fill="rgb(249,113,6)" fg:x="125818394" fg:w="1245296"/><text x="17.1302%" y="527.50"></text></g><g><title>cfree (1,245,296 samples, 0.17%)</title><rect x="16.8802%" y="501" width="0.1671%" height="15" fill="rgb(238,137,36)" fg:x="125818394" fg:w="1245296"/><text x="17.1302%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::insert (1,244,040 samples, 0.17%)</title><rect x="17.0472%" y="4821" width="0.1669%" height="15" fill="rgb(210,102,26)" fg:x="127063690" fg:w="1244040"/><text x="17.2972%" y="4831.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1,244,040 samples, 0.17%)</title><rect x="17.0472%" y="4805" width="0.1669%" height="15" fill="rgb(218,30,30)" fg:x="127063690" fg:w="1244040"/><text x="17.2972%" y="4815.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (1,244,040 samples, 0.17%)</title><rect x="17.0472%" y="4789" width="0.1669%" height="15" fill="rgb(214,67,26)" fg:x="127063690" fg:w="1244040"/><text x="17.2972%" y="4799.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (1,244,040 samples, 0.17%)</title><rect x="17.0472%" y="4773" width="0.1669%" height="15" fill="rgb(251,9,53)" fg:x="127063690" fg:w="1244040"/><text x="17.2972%" y="4783.50"></text></g><g><title>alloc::raw_vec::finish_grow (1,244,040 samples, 0.17%)</title><rect x="17.0472%" y="4757" width="0.1669%" height="15" fill="rgb(228,204,25)" fg:x="127063690" fg:w="1244040"/><text x="17.2972%" y="4767.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1,244,040 samples, 0.17%)</title><rect x="17.0472%" y="4741" width="0.1669%" height="15" fill="rgb(207,153,8)" fg:x="127063690" fg:w="1244040"/><text x="17.2972%" y="4751.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1,244,040 samples, 0.17%)</title><rect x="17.0472%" y="4725" width="0.1669%" height="15" fill="rgb(242,9,16)" fg:x="127063690" fg:w="1244040"/><text x="17.2972%" y="4735.50"></text></g><g><title>alloc::alloc::realloc (1,244,040 samples, 0.17%)</title><rect x="17.0472%" y="4709" width="0.1669%" height="15" fill="rgb(217,211,10)" fg:x="127063690" fg:w="1244040"/><text x="17.2972%" y="4719.50"></text></g><g><title>realloc (1,244,040 samples, 0.17%)</title><rect x="17.0472%" y="4693" width="0.1669%" height="15" fill="rgb(219,228,52)" fg:x="127063690" fg:w="1244040"/><text x="17.2972%" y="4703.50"></text></g><g><title>[libc.so.6] (1,244,040 samples, 0.17%)</title><rect x="17.0472%" y="4677" width="0.1669%" height="15" fill="rgb(231,92,29)" fg:x="127063690" fg:w="1244040"/><text x="17.2972%" y="4687.50"></text></g><g><title>[libc.so.6] (1,244,040 samples, 0.17%)</title><rect x="17.0472%" y="4661" width="0.1669%" height="15" fill="rgb(232,8,23)" fg:x="127063690" fg:w="1244040"/><text x="17.2972%" y="4671.50"></text></g><g><title>[libc.so.6] (1,244,040 samples, 0.17%)</title><rect x="17.0472%" y="4645" width="0.1669%" height="15" fill="rgb(216,211,34)" fg:x="127063690" fg:w="1244040"/><text x="17.2972%" y="4655.50"></text></g><g><title>[libc.so.6] (1,244,040 samples, 0.17%)</title><rect x="17.0472%" y="4629" width="0.1669%" height="15" fill="rgb(236,151,0)" fg:x="127063690" fg:w="1244040"/><text x="17.2972%" y="4639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (1,311,616 samples, 0.18%)</title><rect x="17.2141%" y="4693" width="0.1760%" height="15" fill="rgb(209,168,3)" fg:x="128307730" fg:w="1311616"/><text x="17.4641%" y="4703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_slice (1,311,616 samples, 0.18%)</title><rect x="17.2141%" y="4677" width="0.1760%" height="15" fill="rgb(208,129,28)" fg:x="128307730" fg:w="1311616"/><text x="17.4641%" y="4687.50"></text></g><g><title>css_bitvector_compiler::HtmlNode::fix_parent_pointers (2,469,057 samples, 0.33%)</title><rect x="17.2141%" y="4821" width="0.3313%" height="15" fill="rgb(229,78,22)" fg:x="128307730" fg:w="2469057"/><text x="17.4641%" y="4831.50"></text></g><g><title>css_bitvector_compiler::HtmlNode::fix_parent_pointers (2,469,057 samples, 0.33%)</title><rect x="17.2141%" y="4805" width="0.3313%" height="15" fill="rgb(228,187,13)" fg:x="128307730" fg:w="2469057"/><text x="17.4641%" y="4815.50"></text></g><g><title>css_bitvector_compiler::HtmlNode::fix_parent_pointers (2,469,057 samples, 0.33%)</title><rect x="17.2141%" y="4789" width="0.3313%" height="15" fill="rgb(240,119,24)" fg:x="128307730" fg:w="2469057"/><text x="17.4641%" y="4799.50"></text></g><g><title>css_bitvector_compiler::HtmlNode::fix_parent_pointers (2,469,057 samples, 0.33%)</title><rect x="17.2141%" y="4773" width="0.3313%" height="15" fill="rgb(209,194,42)" fg:x="128307730" fg:w="2469057"/><text x="17.4641%" y="4783.50"></text></g><g><title>css_bitvector_compiler::HtmlNode::fix_parent_pointers (2,469,057 samples, 0.33%)</title><rect x="17.2141%" y="4757" width="0.3313%" height="15" fill="rgb(247,200,46)" fg:x="128307730" fg:w="2469057"/><text x="17.4641%" y="4767.50"></text></g><g><title>css_bitvector_compiler::HtmlNode::fix_parent_pointers (2,469,057 samples, 0.33%)</title><rect x="17.2141%" y="4741" width="0.3313%" height="15" fill="rgb(218,76,16)" fg:x="128307730" fg:w="2469057"/><text x="17.4641%" y="4751.50"></text></g><g><title>css_bitvector_compiler::HtmlNode::fix_parent_pointers (2,469,057 samples, 0.33%)</title><rect x="17.2141%" y="4725" width="0.3313%" height="15" fill="rgb(225,21,48)" fg:x="128307730" fg:w="2469057"/><text x="17.4641%" y="4735.50"></text></g><g><title>css_bitvector_compiler::HtmlNode::fix_parent_pointers (2,469,057 samples, 0.33%)</title><rect x="17.2141%" y="4709" width="0.3313%" height="15" fill="rgb(239,223,50)" fg:x="128307730" fg:w="2469057"/><text x="17.4641%" y="4719.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,157,441 samples, 0.16%)</title><rect x="17.3901%" y="4693" width="0.1553%" height="15" fill="rgb(244,45,21)" fg:x="129619346" fg:w="1157441"/><text x="17.6401%" y="4703.50"></text></g><g><title>main::benchmark::extract_path_from_command (1,288,269 samples, 0.17%)</title><rect x="17.5454%" y="4821" width="0.1728%" height="15" fill="rgb(232,33,43)" fg:x="130776787" fg:w="1288269"/><text x="17.7954%" y="4831.50"></text></g><g><title>serde_json::value::Value::get (1,288,269 samples, 0.17%)</title><rect x="17.5454%" y="4805" width="0.1728%" height="15" fill="rgb(209,8,3)" fg:x="130776787" fg:w="1288269"/><text x="17.7954%" y="4815.50"></text></g><g><title>&lt;&amp;T as serde_json::value::index::Index&gt;::index_into (1,288,269 samples, 0.17%)</title><rect x="17.5454%" y="4789" width="0.1728%" height="15" fill="rgb(214,25,53)" fg:x="130776787" fg:w="1288269"/><text x="17.7954%" y="4799.50"></text></g><g><title>&lt;str as serde_json::value::index::Index&gt;::index_into (1,288,269 samples, 0.17%)</title><rect x="17.5454%" y="4773" width="0.1728%" height="15" fill="rgb(254,186,54)" fg:x="130776787" fg:w="1288269"/><text x="17.7954%" y="4783.50"></text></g><g><title>serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;::get (1,288,269 samples, 0.17%)</title><rect x="17.5454%" y="4757" width="0.1728%" height="15" fill="rgb(208,174,49)" fg:x="130776787" fg:w="1288269"/><text x="17.7954%" y="4767.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::get (1,288,269 samples, 0.17%)</title><rect x="17.5454%" y="4741" width="0.1728%" height="15" fill="rgb(233,191,51)" fg:x="130776787" fg:w="1288269"/><text x="17.7954%" y="4751.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (1,288,269 samples, 0.17%)</title><rect x="17.5454%" y="4725" width="0.1728%" height="15" fill="rgb(222,134,10)" fg:x="130776787" fg:w="1288269"/><text x="17.7954%" y="4735.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (1,288,269 samples, 0.17%)</title><rect x="17.5454%" y="4709" width="0.1728%" height="15" fill="rgb(230,226,20)" fg:x="130776787" fg:w="1288269"/><text x="17.7954%" y="4719.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (1,288,269 samples, 0.17%)</title><rect x="17.5454%" y="4693" width="0.1728%" height="15" fill="rgb(251,111,25)" fg:x="130776787" fg:w="1288269"/><text x="17.7954%" y="4703.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::Ord for str&gt;::cmp (1,288,269 samples, 0.17%)</title><rect x="17.5454%" y="4677" width="0.1728%" height="15" fill="rgb(224,40,46)" fg:x="130776787" fg:w="1288269"/><text x="17.7954%" y="4687.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::Ord for [T]&gt;::cmp (1,288,269 samples, 0.17%)</title><rect x="17.5454%" y="4661" width="0.1728%" height="15" fill="rgb(236,108,47)" fg:x="130776787" fg:w="1288269"/><text x="17.7954%" y="4671.50"></text></g><g><title>&lt;A as core::slice::cmp::SliceOrd&gt;::compare (1,288,269 samples, 0.17%)</title><rect x="17.5454%" y="4645" width="0.1728%" height="15" fill="rgb(234,93,0)" fg:x="130776787" fg:w="1288269"/><text x="17.7954%" y="4655.50"></text></g><g><title>[libc.so.6] (1,288,269 samples, 0.17%)</title><rect x="17.5454%" y="4629" width="0.1728%" height="15" fill="rgb(224,213,32)" fg:x="130776787" fg:w="1288269"/><text x="17.7954%" y="4639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3,609,603 samples, 0.48%)</title><rect x="17.7182%" y="4725" width="0.4843%" height="15" fill="rgb(251,11,48)" fg:x="132065056" fg:w="3609603"/><text x="17.9682%" y="4735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (3,609,603 samples, 0.48%)</title><rect x="17.7182%" y="4709" width="0.4843%" height="15" fill="rgb(236,173,5)" fg:x="132065056" fg:w="3609603"/><text x="17.9682%" y="4719.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (3,609,603 samples, 0.48%)</title><rect x="17.7182%" y="4693" width="0.4843%" height="15" fill="rgb(230,95,12)" fg:x="132065056" fg:w="3609603"/><text x="17.9682%" y="4703.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (3,609,603 samples, 0.48%)</title><rect x="17.7182%" y="4677" width="0.4843%" height="15" fill="rgb(232,209,1)" fg:x="132065056" fg:w="3609603"/><text x="17.9682%" y="4687.50"></text></g><g><title>alloc::raw_vec::finish_grow (3,609,603 samples, 0.48%)</title><rect x="17.7182%" y="4661" width="0.4843%" height="15" fill="rgb(232,6,1)" fg:x="132065056" fg:w="3609603"/><text x="17.9682%" y="4671.50"></text></g><g><title>malloc (3,609,603 samples, 0.48%)</title><rect x="17.7182%" y="4645" width="0.4843%" height="15" fill="rgb(210,224,50)" fg:x="132065056" fg:w="3609603"/><text x="17.9682%" y="4655.50"></text></g><g><title>[libc.so.6] (3,609,603 samples, 0.48%)</title><rect x="17.7182%" y="4629" width="0.4843%" height="15" fill="rgb(228,127,35)" fg:x="132065056" fg:w="3609603"/><text x="17.9682%" y="4639.50"></text></g><g><title>[libc.so.6] (3,609,603 samples, 0.48%)</title><rect x="17.7182%" y="4613" width="0.4843%" height="15" fill="rgb(245,102,45)" fg:x="132065056" fg:w="3609603"/><text x="17.9682%" y="4623.50"></text></g><g><title>main::benchmark::json_to_html_node (954,751 samples, 0.13%)</title><rect x="18.2025%" y="4725" width="0.1281%" height="15" fill="rgb(214,1,49)" fg:x="135674659" fg:w="954751"/><text x="18.4525%" y="4735.50"></text></g><g><title>main::benchmark::json_to_html_node (954,751 samples, 0.13%)</title><rect x="18.2025%" y="4709" width="0.1281%" height="15" fill="rgb(226,163,40)" fg:x="135674659" fg:w="954751"/><text x="18.4525%" y="4719.50"></text></g><g><title>main::benchmark::json_to_html_node (954,751 samples, 0.13%)</title><rect x="18.2025%" y="4693" width="0.1281%" height="15" fill="rgb(239,212,28)" fg:x="135674659" fg:w="954751"/><text x="18.4525%" y="4703.50"></text></g><g><title>main::benchmark::json_to_html_node (954,751 samples, 0.13%)</title><rect x="18.2025%" y="4677" width="0.1281%" height="15" fill="rgb(220,20,13)" fg:x="135674659" fg:w="954751"/><text x="18.4525%" y="4687.50"></text></g><g><title>main::benchmark::json_to_html_node (954,751 samples, 0.13%)</title><rect x="18.2025%" y="4661" width="0.1281%" height="15" fill="rgb(210,164,35)" fg:x="135674659" fg:w="954751"/><text x="18.4525%" y="4671.50"></text></g><g><title>main::benchmark::json_to_html_node (954,751 samples, 0.13%)</title><rect x="18.2025%" y="4645" width="0.1281%" height="15" fill="rgb(248,109,41)" fg:x="135674659" fg:w="954751"/><text x="18.4525%" y="4655.50"></text></g><g><title>main::benchmark::json_to_html_node (954,751 samples, 0.13%)</title><rect x="18.2025%" y="4629" width="0.1281%" height="15" fill="rgb(238,23,50)" fg:x="135674659" fg:w="954751"/><text x="18.4525%" y="4639.50"></text></g><g><title>main::benchmark::json_to_html_node (954,751 samples, 0.13%)</title><rect x="18.2025%" y="4613" width="0.1281%" height="15" fill="rgb(211,48,49)" fg:x="135674659" fg:w="954751"/><text x="18.4525%" y="4623.50"></text></g><g><title>serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;::get (954,751 samples, 0.13%)</title><rect x="18.2025%" y="4597" width="0.1281%" height="15" fill="rgb(223,36,21)" fg:x="135674659" fg:w="954751"/><text x="18.4525%" y="4607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::get (954,751 samples, 0.13%)</title><rect x="18.2025%" y="4581" width="0.1281%" height="15" fill="rgb(207,123,46)" fg:x="135674659" fg:w="954751"/><text x="18.4525%" y="4591.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (954,751 samples, 0.13%)</title><rect x="18.2025%" y="4565" width="0.1281%" height="15" fill="rgb(240,218,32)" fg:x="135674659" fg:w="954751"/><text x="18.4525%" y="4575.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (954,751 samples, 0.13%)</title><rect x="18.2025%" y="4549" width="0.1281%" height="15" fill="rgb(252,5,43)" fg:x="135674659" fg:w="954751"/><text x="18.4525%" y="4559.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (954,751 samples, 0.13%)</title><rect x="18.2025%" y="4533" width="0.1281%" height="15" fill="rgb(252,84,19)" fg:x="135674659" fg:w="954751"/><text x="18.4525%" y="4543.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::keys (954,751 samples, 0.13%)</title><rect x="18.2025%" y="4517" width="0.1281%" height="15" fill="rgb(243,152,39)" fg:x="135674659" fg:w="954751"/><text x="18.4525%" y="4527.50"></text></g><g><title>main::benchmark::json_to_html_node (5,788,942 samples, 0.78%)</title><rect x="17.7182%" y="4821" width="0.7767%" height="15" fill="rgb(234,160,15)" fg:x="132065056" fg:w="5788942"/><text x="17.9682%" y="4831.50"></text></g><g><title>main::benchmark::json_to_html_node (5,788,942 samples, 0.78%)</title><rect x="17.7182%" y="4805" width="0.7767%" height="15" fill="rgb(237,34,20)" fg:x="132065056" fg:w="5788942"/><text x="17.9682%" y="4815.50"></text></g><g><title>main::benchmark::json_to_html_node (5,788,942 samples, 0.78%)</title><rect x="17.7182%" y="4789" width="0.7767%" height="15" fill="rgb(229,97,13)" fg:x="132065056" fg:w="5788942"/><text x="17.9682%" y="4799.50"></text></g><g><title>main::benchmark::json_to_html_node (5,788,942 samples, 0.78%)</title><rect x="17.7182%" y="4773" width="0.7767%" height="15" fill="rgb(234,71,50)" fg:x="132065056" fg:w="5788942"/><text x="17.9682%" y="4783.50"></text></g><g><title>main::benchmark::json_to_html_node (5,788,942 samples, 0.78%)</title><rect x="17.7182%" y="4757" width="0.7767%" height="15" fill="rgb(253,155,4)" fg:x="132065056" fg:w="5788942"/><text x="17.9682%" y="4767.50"></text></g><g><title>main::benchmark::json_to_html_node (5,788,942 samples, 0.78%)</title><rect x="17.7182%" y="4741" width="0.7767%" height="15" fill="rgb(222,185,37)" fg:x="132065056" fg:w="5788942"/><text x="17.9682%" y="4751.50"></text></g><g><title>serde_json::value::index::&lt;impl core::ops::index::Index&lt;I&gt; for serde_json::value::Value&gt;::index (1,224,588 samples, 0.16%)</title><rect x="18.3306%" y="4725" width="0.1643%" height="15" fill="rgb(251,177,13)" fg:x="136629410" fg:w="1224588"/><text x="18.5806%" y="4735.50"></text></g><g><title>&lt;&amp;T as serde_json::value::index::Index&gt;::index_into (1,224,588 samples, 0.16%)</title><rect x="18.3306%" y="4709" width="0.1643%" height="15" fill="rgb(250,179,40)" fg:x="136629410" fg:w="1224588"/><text x="18.5806%" y="4719.50"></text></g><g><title>&lt;str as serde_json::value::index::Index&gt;::index_into (1,224,588 samples, 0.16%)</title><rect x="18.3306%" y="4693" width="0.1643%" height="15" fill="rgb(242,44,2)" fg:x="136629410" fg:w="1224588"/><text x="18.5806%" y="4703.50"></text></g><g><title>serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;::get (1,224,588 samples, 0.16%)</title><rect x="18.3306%" y="4677" width="0.1643%" height="15" fill="rgb(216,177,13)" fg:x="136629410" fg:w="1224588"/><text x="18.5806%" y="4687.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::get (1,224,588 samples, 0.16%)</title><rect x="18.3306%" y="4661" width="0.1643%" height="15" fill="rgb(216,106,43)" fg:x="136629410" fg:w="1224588"/><text x="18.5806%" y="4671.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (1,224,588 samples, 0.16%)</title><rect x="18.3306%" y="4645" width="0.1643%" height="15" fill="rgb(216,183,2)" fg:x="136629410" fg:w="1224588"/><text x="18.5806%" y="4655.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (1,224,588 samples, 0.16%)</title><rect x="18.3306%" y="4629" width="0.1643%" height="15" fill="rgb(249,75,3)" fg:x="136629410" fg:w="1224588"/><text x="18.5806%" y="4639.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (1,224,588 samples, 0.16%)</title><rect x="18.3306%" y="4613" width="0.1643%" height="15" fill="rgb(219,67,39)" fg:x="136629410" fg:w="1224588"/><text x="18.5806%" y="4623.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::Ord for str&gt;::cmp (1,224,588 samples, 0.16%)</title><rect x="18.3306%" y="4597" width="0.1643%" height="15" fill="rgb(253,228,2)" fg:x="136629410" fg:w="1224588"/><text x="18.5806%" y="4607.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::Ord for [T]&gt;::cmp (1,224,588 samples, 0.16%)</title><rect x="18.3306%" y="4581" width="0.1643%" height="15" fill="rgb(235,138,27)" fg:x="136629410" fg:w="1224588"/><text x="18.5806%" y="4591.50"></text></g><g><title>&lt;A as core::slice::cmp::SliceOrd&gt;::compare (1,224,588 samples, 0.16%)</title><rect x="18.3306%" y="4565" width="0.1643%" height="15" fill="rgb(236,97,51)" fg:x="136629410" fg:w="1224588"/><text x="18.5806%" y="4575.50"></text></g><g><title>[libc.so.6] (1,224,588 samples, 0.16%)</title><rect x="18.3306%" y="4549" width="0.1643%" height="15" fill="rgb(240,80,30)" fg:x="136629410" fg:w="1224588"/><text x="18.5806%" y="4559.50"></text></g><g><title>main::benchmark::apply_frame_modifications (12,056,111 samples, 1.62%)</title><rect x="17.0472%" y="4837" width="1.6175%" height="15" fill="rgb(230,178,19)" fg:x="127063690" fg:w="12056111"/><text x="17.2972%" y="4847.50"></text></g><g><title>std::io::stdio::_print (1,265,803 samples, 0.17%)</title><rect x="18.4949%" y="4821" width="0.1698%" height="15" fill="rgb(210,190,27)" fg:x="137853998" fg:w="1265803"/><text x="18.7449%" y="4831.50"></text></g><g><title>std::io::stdio::print_to (1,265,803 samples, 0.17%)</title><rect x="18.4949%" y="4805" width="0.1698%" height="15" fill="rgb(222,107,31)" fg:x="137853998" fg:w="1265803"/><text x="18.7449%" y="4815.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (1,265,803 samples, 0.17%)</title><rect x="18.4949%" y="4789" width="0.1698%" height="15" fill="rgb(216,127,34)" fg:x="137853998" fg:w="1265803"/><text x="18.7449%" y="4799.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (1,265,803 samples, 0.17%)</title><rect x="18.4949%" y="4773" width="0.1698%" height="15" fill="rgb(234,116,52)" fg:x="137853998" fg:w="1265803"/><text x="18.7449%" y="4783.50"></text></g><g><title>std::io::Write::write_fmt (1,265,803 samples, 0.17%)</title><rect x="18.4949%" y="4757" width="0.1698%" height="15" fill="rgb(222,124,15)" fg:x="137853998" fg:w="1265803"/><text x="18.7449%" y="4767.50"></text></g><g><title>core::fmt::write (1,265,803 samples, 0.17%)</title><rect x="18.4949%" y="4741" width="0.1698%" height="15" fill="rgb(231,179,28)" fg:x="137853998" fg:w="1265803"/><text x="18.7449%" y="4751.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1,265,803 samples, 0.17%)</title><rect x="18.4949%" y="4725" width="0.1698%" height="15" fill="rgb(226,93,45)" fg:x="137853998" fg:w="1265803"/><text x="18.7449%" y="4735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::fmt::Debug&gt;::fmt (1,265,803 samples, 0.17%)</title><rect x="18.4949%" y="4709" width="0.1698%" height="15" fill="rgb(215,8,51)" fg:x="137853998" fg:w="1265803"/><text x="18.7449%" y="4719.50"></text></g><g><title>&lt;[T] as core::fmt::Debug&gt;::fmt (1,265,803 samples, 0.17%)</title><rect x="18.4949%" y="4693" width="0.1698%" height="15" fill="rgb(223,106,5)" fg:x="137853998" fg:w="1265803"/><text x="18.7449%" y="4703.50"></text></g><g><title>core::fmt::builders::DebugList::entries (1,265,803 samples, 0.17%)</title><rect x="18.4949%" y="4677" width="0.1698%" height="15" fill="rgb(250,191,5)" fg:x="137853998" fg:w="1265803"/><text x="18.7449%" y="4687.50"></text></g><g><title>core::fmt::builders::DebugSet::entry (1,265,803 samples, 0.17%)</title><rect x="18.4949%" y="4661" width="0.1698%" height="15" fill="rgb(242,132,44)" fg:x="137853998" fg:w="1265803"/><text x="18.7449%" y="4671.50"></text></g><g><title>core::fmt::builders::DebugInner::entry_with (1,265,803 samples, 0.17%)</title><rect x="18.4949%" y="4645" width="0.1698%" height="15" fill="rgb(251,152,29)" fg:x="137853998" fg:w="1265803"/><text x="18.7449%" y="4655.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1,265,803 samples, 0.17%)</title><rect x="18.4949%" y="4629" width="0.1698%" height="15" fill="rgb(218,179,5)" fg:x="137853998" fg:w="1265803"/><text x="18.7449%" y="4639.50"></text></g><g><title>core::fmt::builders::DebugInner::entry_with::_{{closure}} (1,265,803 samples, 0.17%)</title><rect x="18.4949%" y="4613" width="0.1698%" height="15" fill="rgb(227,67,19)" fg:x="137853998" fg:w="1265803"/><text x="18.7449%" y="4623.50"></text></g><g><title>core::fmt::builders::DebugSet::entry::_{{closure}} (1,265,803 samples, 0.17%)</title><rect x="18.4949%" y="4597" width="0.1698%" height="15" fill="rgb(233,119,31)" fg:x="137853998" fg:w="1265803"/><text x="18.7449%" y="4607.50"></text></g><g><title>core::fmt::num::imp::&lt;impl u64&gt;::_fmt (1,265,803 samples, 0.17%)</title><rect x="18.4949%" y="4581" width="0.1698%" height="15" fill="rgb(241,120,22)" fg:x="137853998" fg:w="1265803"/><text x="18.7449%" y="4591.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (1,265,803 samples, 0.17%)</title><rect x="18.4949%" y="4565" width="0.1698%" height="15" fill="rgb(224,102,30)" fg:x="137853998" fg:w="1265803"/><text x="18.7449%" y="4575.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (1,265,803 samples, 0.17%)</title><rect x="18.4949%" y="4549" width="0.1698%" height="15" fill="rgb(210,164,37)" fg:x="137853998" fg:w="1265803"/><text x="18.7449%" y="4559.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (1,265,803 samples, 0.17%)</title><rect x="18.4949%" y="4533" width="0.1698%" height="15" fill="rgb(226,191,16)" fg:x="137853998" fg:w="1265803"/><text x="18.7449%" y="4543.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (1,265,803 samples, 0.17%)</title><rect x="18.4949%" y="4517" width="0.1698%" height="15" fill="rgb(214,40,45)" fg:x="137853998" fg:w="1265803"/><text x="18.7449%" y="4527.50"></text></g><g><title>core::cell::BorrowRefMut::new (1,265,803 samples, 0.17%)</title><rect x="18.4949%" y="4501" width="0.1698%" height="15" fill="rgb(244,29,26)" fg:x="137853998" fg:w="1265803"/><text x="18.7449%" y="4511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1,244,482 samples, 0.17%)</title><rect x="18.7700%" y="4565" width="0.1670%" height="15" fill="rgb(216,16,5)" fg:x="139904362" fg:w="1244482"/><text x="19.0200%" y="4575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,244,482 samples, 0.17%)</title><rect x="18.7700%" y="4549" width="0.1670%" height="15" fill="rgb(249,76,35)" fg:x="139904362" fg:w="1244482"/><text x="19.0200%" y="4559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,244,482 samples, 0.17%)</title><rect x="18.7700%" y="4533" width="0.1670%" height="15" fill="rgb(207,11,44)" fg:x="139904362" fg:w="1244482"/><text x="19.0200%" y="4543.50"></text></g><g><title>alloc::slice::hack::to_vec (1,244,482 samples, 0.17%)</title><rect x="18.7700%" y="4517" width="0.1670%" height="15" fill="rgb(228,190,49)" fg:x="139904362" fg:w="1244482"/><text x="19.0200%" y="4527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1,244,482 samples, 0.17%)</title><rect x="18.7700%" y="4501" width="0.1670%" height="15" fill="rgb(214,173,12)" fg:x="139904362" fg:w="1244482"/><text x="19.0200%" y="4511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,244,482 samples, 0.17%)</title><rect x="18.7700%" y="4485" width="0.1670%" height="15" fill="rgb(218,26,35)" fg:x="139904362" fg:w="1244482"/><text x="19.0200%" y="4495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,244,482 samples, 0.17%)</title><rect x="18.7700%" y="4469" width="0.1670%" height="15" fill="rgb(220,200,19)" fg:x="139904362" fg:w="1244482"/><text x="19.0200%" y="4479.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (1,244,482 samples, 0.17%)</title><rect x="18.7700%" y="4453" width="0.1670%" height="15" fill="rgb(239,95,49)" fg:x="139904362" fg:w="1244482"/><text x="19.0200%" y="4463.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1,244,482 samples, 0.17%)</title><rect x="18.7700%" y="4437" width="0.1670%" height="15" fill="rgb(235,85,53)" fg:x="139904362" fg:w="1244482"/><text x="19.0200%" y="4447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,244,482 samples, 0.17%)</title><rect x="18.7700%" y="4421" width="0.1670%" height="15" fill="rgb(233,133,31)" fg:x="139904362" fg:w="1244482"/><text x="19.0200%" y="4431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,244,482 samples, 0.17%)</title><rect x="18.7700%" y="4405" width="0.1670%" height="15" fill="rgb(218,25,20)" fg:x="139904362" fg:w="1244482"/><text x="19.0200%" y="4415.50"></text></g><g><title>alloc::alloc::alloc (1,244,482 samples, 0.17%)</title><rect x="18.7700%" y="4389" width="0.1670%" height="15" fill="rgb(252,210,38)" fg:x="139904362" fg:w="1244482"/><text x="19.0200%" y="4399.50"></text></g><g><title>malloc (1,244,482 samples, 0.17%)</title><rect x="18.7700%" y="4373" width="0.1670%" height="15" fill="rgb(242,134,21)" fg:x="139904362" fg:w="1244482"/><text x="19.0200%" y="4383.50"></text></g><g><title>[libc.so.6] (1,244,482 samples, 0.17%)</title><rect x="18.7700%" y="4357" width="0.1670%" height="15" fill="rgb(213,28,48)" fg:x="139904362" fg:w="1244482"/><text x="19.0200%" y="4367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (3,622,618 samples, 0.49%)</title><rect x="18.9369%" y="4165" width="0.4860%" height="15" fill="rgb(250,196,2)" fg:x="141148844" fg:w="3622618"/><text x="19.1869%" y="4175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2,368,492 samples, 0.32%)</title><rect x="19.1052%" y="4149" width="0.3178%" height="15" fill="rgb(227,5,17)" fg:x="142402970" fg:w="2368492"/><text x="19.3552%" y="4159.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2,368,492 samples, 0.32%)</title><rect x="19.1052%" y="4133" width="0.3178%" height="15" fill="rgb(221,226,24)" fg:x="142402970" fg:w="2368492"/><text x="19.3552%" y="4143.50"></text></g><g><title>alloc::slice::hack::to_vec (2,368,492 samples, 0.32%)</title><rect x="19.1052%" y="4117" width="0.3178%" height="15" fill="rgb(211,5,48)" fg:x="142402970" fg:w="2368492"/><text x="19.3552%" y="4127.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2,368,492 samples, 0.32%)</title><rect x="19.1052%" y="4101" width="0.3178%" height="15" fill="rgb(219,150,6)" fg:x="142402970" fg:w="2368492"/><text x="19.3552%" y="4111.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2,368,492 samples, 0.32%)</title><rect x="19.1052%" y="4085" width="0.3178%" height="15" fill="rgb(251,46,16)" fg:x="142402970" fg:w="2368492"/><text x="19.3552%" y="4095.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2,368,492 samples, 0.32%)</title><rect x="19.1052%" y="4069" width="0.3178%" height="15" fill="rgb(220,204,40)" fg:x="142402970" fg:w="2368492"/><text x="19.3552%" y="4079.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (2,368,492 samples, 0.32%)</title><rect x="19.1052%" y="4053" width="0.3178%" height="15" fill="rgb(211,85,2)" fg:x="142402970" fg:w="2368492"/><text x="19.3552%" y="4063.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (2,368,492 samples, 0.32%)</title><rect x="19.1052%" y="4037" width="0.3178%" height="15" fill="rgb(229,17,7)" fg:x="142402970" fg:w="2368492"/><text x="19.3552%" y="4047.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2,368,492 samples, 0.32%)</title><rect x="19.1052%" y="4021" width="0.3178%" height="15" fill="rgb(239,72,28)" fg:x="142402970" fg:w="2368492"/><text x="19.3552%" y="4031.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2,368,492 samples, 0.32%)</title><rect x="19.1052%" y="4005" width="0.3178%" height="15" fill="rgb(230,47,54)" fg:x="142402970" fg:w="2368492"/><text x="19.3552%" y="4015.50"></text></g><g><title>alloc::alloc::alloc (2,368,492 samples, 0.32%)</title><rect x="19.1052%" y="3989" width="0.3178%" height="15" fill="rgb(214,50,8)" fg:x="142402970" fg:w="2368492"/><text x="19.3552%" y="3999.50"></text></g><g><title>malloc (2,368,492 samples, 0.32%)</title><rect x="19.1052%" y="3973" width="0.3178%" height="15" fill="rgb(216,198,43)" fg:x="142402970" fg:w="2368492"/><text x="19.3552%" y="3983.50"></text></g><g><title>[libc.so.6] (1,216,817 samples, 0.16%)</title><rect x="19.2597%" y="3957" width="0.1633%" height="15" fill="rgb(234,20,35)" fg:x="143554645" fg:w="1216817"/><text x="19.5097%" y="3967.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,287,963 samples, 0.17%)</title><rect x="19.5920%" y="4005" width="0.1728%" height="15" fill="rgb(254,45,19)" fg:x="146031113" fg:w="1287963"/><text x="19.8420%" y="4015.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,287,963 samples, 0.17%)</title><rect x="19.5920%" y="3989" width="0.1728%" height="15" fill="rgb(219,14,44)" fg:x="146031113" fg:w="1287963"/><text x="19.8420%" y="3999.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (1,287,963 samples, 0.17%)</title><rect x="19.5920%" y="3973" width="0.1728%" height="15" fill="rgb(217,220,26)" fg:x="146031113" fg:w="1287963"/><text x="19.8420%" y="3983.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1,287,963 samples, 0.17%)</title><rect x="19.5920%" y="3957" width="0.1728%" height="15" fill="rgb(213,158,28)" fg:x="146031113" fg:w="1287963"/><text x="19.8420%" y="3967.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,287,963 samples, 0.17%)</title><rect x="19.5920%" y="3941" width="0.1728%" height="15" fill="rgb(252,51,52)" fg:x="146031113" fg:w="1287963"/><text x="19.8420%" y="3951.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,287,963 samples, 0.17%)</title><rect x="19.5920%" y="3925" width="0.1728%" height="15" fill="rgb(246,89,16)" fg:x="146031113" fg:w="1287963"/><text x="19.8420%" y="3935.50"></text></g><g><title>alloc::alloc::alloc (1,287,963 samples, 0.17%)</title><rect x="19.5920%" y="3909" width="0.1728%" height="15" fill="rgb(216,158,49)" fg:x="146031113" fg:w="1287963"/><text x="19.8420%" y="3919.50"></text></g><g><title>malloc (1,287,963 samples, 0.17%)</title><rect x="19.5920%" y="3893" width="0.1728%" height="15" fill="rgb(236,107,19)" fg:x="146031113" fg:w="1287963"/><text x="19.8420%" y="3903.50"></text></g><g><title>[libc.so.6] (1,287,963 samples, 0.17%)</title><rect x="19.5920%" y="3877" width="0.1728%" height="15" fill="rgb(228,185,30)" fg:x="146031113" fg:w="1287963"/><text x="19.8420%" y="3887.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (3,805,635 samples, 0.51%)</title><rect x="19.4230%" y="4085" width="0.5106%" height="15" fill="rgb(246,134,8)" fg:x="144771462" fg:w="3805635"/><text x="19.6730%" y="4095.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2,545,984 samples, 0.34%)</title><rect x="19.5920%" y="4069" width="0.3416%" height="15" fill="rgb(214,143,50)" fg:x="146031113" fg:w="2545984"/><text x="19.8420%" y="4079.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2,545,984 samples, 0.34%)</title><rect x="19.5920%" y="4053" width="0.3416%" height="15" fill="rgb(228,75,8)" fg:x="146031113" fg:w="2545984"/><text x="19.8420%" y="4063.50"></text></g><g><title>alloc::slice::hack::to_vec (2,545,984 samples, 0.34%)</title><rect x="19.5920%" y="4037" width="0.3416%" height="15" fill="rgb(207,175,4)" fg:x="146031113" fg:w="2545984"/><text x="19.8420%" y="4047.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2,545,984 samples, 0.34%)</title><rect x="19.5920%" y="4021" width="0.3416%" height="15" fill="rgb(205,108,24)" fg:x="146031113" fg:w="2545984"/><text x="19.8420%" y="4031.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1,258,021 samples, 0.17%)</title><rect x="19.7648%" y="4005" width="0.1688%" height="15" fill="rgb(244,120,49)" fg:x="147319076" fg:w="1258021"/><text x="20.0148%" y="4015.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,258,021 samples, 0.17%)</title><rect x="19.7648%" y="3989" width="0.1688%" height="15" fill="rgb(223,47,38)" fg:x="147319076" fg:w="1258021"/><text x="20.0148%" y="3999.50"></text></g><g><title>[libc.so.6] (1,258,021 samples, 0.17%)</title><rect x="19.7648%" y="3973" width="0.1688%" height="15" fill="rgb(229,179,11)" fg:x="147319076" fg:w="1258021"/><text x="20.0148%" y="3983.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,314,673 samples, 0.18%)</title><rect x="19.9335%" y="4021" width="0.1764%" height="15" fill="rgb(231,122,1)" fg:x="148577097" fg:w="1314673"/><text x="20.1835%" y="4031.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,314,673 samples, 0.18%)</title><rect x="19.9335%" y="4005" width="0.1764%" height="15" fill="rgb(245,119,9)" fg:x="148577097" fg:w="1314673"/><text x="20.1835%" y="4015.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,314,673 samples, 0.18%)</title><rect x="19.9335%" y="3989" width="0.1764%" height="15" fill="rgb(241,163,25)" fg:x="148577097" fg:w="1314673"/><text x="20.1835%" y="3999.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1,256,082 samples, 0.17%)</title><rect x="20.1099%" y="4005" width="0.1685%" height="15" fill="rgb(217,214,3)" fg:x="149891770" fg:w="1256082"/><text x="20.3599%" y="4015.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,256,082 samples, 0.17%)</title><rect x="20.1099%" y="3989" width="0.1685%" height="15" fill="rgb(240,86,28)" fg:x="149891770" fg:w="1256082"/><text x="20.3599%" y="3999.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,256,082 samples, 0.17%)</title><rect x="20.1099%" y="3973" width="0.1685%" height="15" fill="rgb(215,47,9)" fg:x="149891770" fg:w="1256082"/><text x="20.3599%" y="3983.50"></text></g><g><title>alloc::slice::hack::to_vec (1,256,082 samples, 0.17%)</title><rect x="20.1099%" y="3957" width="0.1685%" height="15" fill="rgb(252,25,45)" fg:x="149891770" fg:w="1256082"/><text x="20.3599%" y="3967.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1,256,082 samples, 0.17%)</title><rect x="20.1099%" y="3941" width="0.1685%" height="15" fill="rgb(251,164,9)" fg:x="149891770" fg:w="1256082"/><text x="20.3599%" y="3951.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1,256,082 samples, 0.17%)</title><rect x="20.1099%" y="3925" width="0.1685%" height="15" fill="rgb(233,194,0)" fg:x="149891770" fg:w="1256082"/><text x="20.3599%" y="3935.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,256,082 samples, 0.17%)</title><rect x="20.1099%" y="3909" width="0.1685%" height="15" fill="rgb(249,111,24)" fg:x="149891770" fg:w="1256082"/><text x="20.3599%" y="3919.50"></text></g><g><title>[libc.so.6] (1,256,082 samples, 0.17%)</title><rect x="20.1099%" y="3893" width="0.1685%" height="15" fill="rgb(250,223,3)" fg:x="149891770" fg:w="1256082"/><text x="20.3599%" y="3903.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2,540,705 samples, 0.34%)</title><rect x="20.2784%" y="3605" width="0.3409%" height="15" fill="rgb(236,178,37)" fg:x="151147852" fg:w="2540705"/><text x="20.5284%" y="3615.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2,540,705 samples, 0.34%)</title><rect x="20.2784%" y="3589" width="0.3409%" height="15" fill="rgb(241,158,50)" fg:x="151147852" fg:w="2540705"/><text x="20.5284%" y="3599.50"></text></g><g><title>alloc::slice::hack::to_vec (2,540,705 samples, 0.34%)</title><rect x="20.2784%" y="3573" width="0.3409%" height="15" fill="rgb(213,121,41)" fg:x="151147852" fg:w="2540705"/><text x="20.5284%" y="3583.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2,540,705 samples, 0.34%)</title><rect x="20.2784%" y="3557" width="0.3409%" height="15" fill="rgb(240,92,3)" fg:x="151147852" fg:w="2540705"/><text x="20.5284%" y="3567.50"></text></g><g><title>&lt;css_bitvector_compiler::HtmlNode as core::clone::Clone&gt;::clone (2,540,705 samples, 0.34%)</title><rect x="20.2784%" y="3541" width="0.3409%" height="15" fill="rgb(205,123,3)" fg:x="151147852" fg:w="2540705"/><text x="20.5284%" y="3551.50"></text></g><g><title>&lt;css_bitvector_compiler::BitVector as core::clone::Clone&gt;::clone (2,540,705 samples, 0.34%)</title><rect x="20.2784%" y="3525" width="0.3409%" height="15" fill="rgb(205,97,47)" fg:x="151147852" fg:w="2540705"/><text x="20.5284%" y="3535.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2,540,705 samples, 0.34%)</title><rect x="20.2784%" y="3509" width="0.3409%" height="15" fill="rgb(247,152,14)" fg:x="151147852" fg:w="2540705"/><text x="20.5284%" y="3519.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2,540,705 samples, 0.34%)</title><rect x="20.2784%" y="3493" width="0.3409%" height="15" fill="rgb(248,195,53)" fg:x="151147852" fg:w="2540705"/><text x="20.5284%" y="3503.50"></text></g><g><title>alloc::slice::hack::to_vec (2,540,705 samples, 0.34%)</title><rect x="20.2784%" y="3477" width="0.3409%" height="15" fill="rgb(226,201,16)" fg:x="151147852" fg:w="2540705"/><text x="20.5284%" y="3487.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2,540,705 samples, 0.34%)</title><rect x="20.2784%" y="3461" width="0.3409%" height="15" fill="rgb(205,98,0)" fg:x="151147852" fg:w="2540705"/><text x="20.5284%" y="3471.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2,540,705 samples, 0.34%)</title><rect x="20.2784%" y="3445" width="0.3409%" height="15" fill="rgb(214,191,48)" fg:x="151147852" fg:w="2540705"/><text x="20.5284%" y="3455.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2,540,705 samples, 0.34%)</title><rect x="20.2784%" y="3429" width="0.3409%" height="15" fill="rgb(237,112,39)" fg:x="151147852" fg:w="2540705"/><text x="20.5284%" y="3439.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (2,540,705 samples, 0.34%)</title><rect x="20.2784%" y="3413" width="0.3409%" height="15" fill="rgb(247,203,27)" fg:x="151147852" fg:w="2540705"/><text x="20.5284%" y="3423.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (2,540,705 samples, 0.34%)</title><rect x="20.2784%" y="3397" width="0.3409%" height="15" fill="rgb(235,124,28)" fg:x="151147852" fg:w="2540705"/><text x="20.5284%" y="3407.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2,540,705 samples, 0.34%)</title><rect x="20.2784%" y="3381" width="0.3409%" height="15" fill="rgb(208,207,46)" fg:x="151147852" fg:w="2540705"/><text x="20.5284%" y="3391.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2,540,705 samples, 0.34%)</title><rect x="20.2784%" y="3365" width="0.3409%" height="15" fill="rgb(234,176,4)" fg:x="151147852" fg:w="2540705"/><text x="20.5284%" y="3375.50"></text></g><g><title>alloc::alloc::alloc (2,540,705 samples, 0.34%)</title><rect x="20.2784%" y="3349" width="0.3409%" height="15" fill="rgb(230,133,28)" fg:x="151147852" fg:w="2540705"/><text x="20.5284%" y="3359.50"></text></g><g><title>malloc (1,248,757 samples, 0.17%)</title><rect x="20.4518%" y="3333" width="0.1675%" height="15" fill="rgb(211,137,40)" fg:x="152439800" fg:w="1248757"/><text x="20.7018%" y="3343.50"></text></g><g><title>[libc.so.6] (1,248,757 samples, 0.17%)</title><rect x="20.4518%" y="3317" width="0.1675%" height="15" fill="rgb(254,35,13)" fg:x="152439800" fg:w="1248757"/><text x="20.7018%" y="3327.50"></text></g><g><title>&lt;css_bitvector_compiler::BitVector as core::clone::Clone&gt;::clone (1,331,125 samples, 0.18%)</title><rect x="20.6193%" y="3605" width="0.1786%" height="15" fill="rgb(225,49,51)" fg:x="153688557" fg:w="1331125"/><text x="20.8693%" y="3615.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,331,125 samples, 0.18%)</title><rect x="20.6193%" y="3589" width="0.1786%" height="15" fill="rgb(251,10,15)" fg:x="153688557" fg:w="1331125"/><text x="20.8693%" y="3599.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,331,125 samples, 0.18%)</title><rect x="20.6193%" y="3573" width="0.1786%" height="15" fill="rgb(228,207,15)" fg:x="153688557" fg:w="1331125"/><text x="20.8693%" y="3583.50"></text></g><g><title>alloc::slice::hack::to_vec (1,331,125 samples, 0.18%)</title><rect x="20.6193%" y="3557" width="0.1786%" height="15" fill="rgb(241,99,19)" fg:x="153688557" fg:w="1331125"/><text x="20.8693%" y="3567.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1,331,125 samples, 0.18%)</title><rect x="20.6193%" y="3541" width="0.1786%" height="15" fill="rgb(207,104,49)" fg:x="153688557" fg:w="1331125"/><text x="20.8693%" y="3551.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,331,125 samples, 0.18%)</title><rect x="20.6193%" y="3525" width="0.1786%" height="15" fill="rgb(234,99,18)" fg:x="153688557" fg:w="1331125"/><text x="20.8693%" y="3535.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,331,125 samples, 0.18%)</title><rect x="20.6193%" y="3509" width="0.1786%" height="15" fill="rgb(213,191,49)" fg:x="153688557" fg:w="1331125"/><text x="20.8693%" y="3519.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (1,331,125 samples, 0.18%)</title><rect x="20.6193%" y="3493" width="0.1786%" height="15" fill="rgb(210,226,19)" fg:x="153688557" fg:w="1331125"/><text x="20.8693%" y="3503.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1,331,125 samples, 0.18%)</title><rect x="20.6193%" y="3477" width="0.1786%" height="15" fill="rgb(229,97,18)" fg:x="153688557" fg:w="1331125"/><text x="20.8693%" y="3487.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,331,125 samples, 0.18%)</title><rect x="20.6193%" y="3461" width="0.1786%" height="15" fill="rgb(211,167,15)" fg:x="153688557" fg:w="1331125"/><text x="20.8693%" y="3471.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,331,125 samples, 0.18%)</title><rect x="20.6193%" y="3445" width="0.1786%" height="15" fill="rgb(210,169,34)" fg:x="153688557" fg:w="1331125"/><text x="20.8693%" y="3455.50"></text></g><g><title>alloc::alloc::alloc (1,331,125 samples, 0.18%)</title><rect x="20.6193%" y="3429" width="0.1786%" height="15" fill="rgb(241,121,31)" fg:x="153688557" fg:w="1331125"/><text x="20.8693%" y="3439.50"></text></g><g><title>malloc (1,331,125 samples, 0.18%)</title><rect x="20.6193%" y="3413" width="0.1786%" height="15" fill="rgb(232,40,11)" fg:x="153688557" fg:w="1331125"/><text x="20.8693%" y="3423.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (5,191,012 samples, 0.70%)</title><rect x="20.2784%" y="3685" width="0.6964%" height="15" fill="rgb(205,86,26)" fg:x="151147852" fg:w="5191012"/><text x="20.5284%" y="3695.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (5,191,012 samples, 0.70%)</title><rect x="20.2784%" y="3669" width="0.6964%" height="15" fill="rgb(231,126,28)" fg:x="151147852" fg:w="5191012"/><text x="20.5284%" y="3679.50"></text></g><g><title>alloc::slice::hack::to_vec (5,191,012 samples, 0.70%)</title><rect x="20.2784%" y="3653" width="0.6964%" height="15" fill="rgb(219,221,18)" fg:x="151147852" fg:w="5191012"/><text x="20.5284%" y="3663.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (5,191,012 samples, 0.70%)</title><rect x="20.2784%" y="3637" width="0.6964%" height="15" fill="rgb(211,40,0)" fg:x="151147852" fg:w="5191012"/><text x="20.5284%" y="3647.50"></text></g><g><title>&lt;css_bitvector_compiler::HtmlNode as core::clone::Clone&gt;::clone (5,191,012 samples, 0.70%)</title><rect x="20.2784%" y="3621" width="0.6964%" height="15" fill="rgb(239,85,43)" fg:x="151147852" fg:w="5191012"/><text x="20.5284%" y="3631.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::clone::Clone&gt;::clone (1,319,182 samples, 0.18%)</title><rect x="20.7979%" y="3605" width="0.1770%" height="15" fill="rgb(231,55,21)" fg:x="155019682" fg:w="1319182"/><text x="21.0479%" y="3615.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::clone::Clone&gt;::clone (1,319,182 samples, 0.18%)</title><rect x="20.7979%" y="3589" width="0.1770%" height="15" fill="rgb(225,184,43)" fg:x="155019682" fg:w="1319182"/><text x="21.0479%" y="3599.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (1,319,182 samples, 0.18%)</title><rect x="20.7979%" y="3573" width="0.1770%" height="15" fill="rgb(251,158,41)" fg:x="155019682" fg:w="1319182"/><text x="21.0479%" y="3583.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,319,182 samples, 0.18%)</title><rect x="20.7979%" y="3557" width="0.1770%" height="15" fill="rgb(234,159,37)" fg:x="155019682" fg:w="1319182"/><text x="21.0479%" y="3567.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::new_uninitialized (1,319,182 samples, 0.18%)</title><rect x="20.7979%" y="3541" width="0.1770%" height="15" fill="rgb(216,204,22)" fg:x="155019682" fg:w="1319182"/><text x="21.0479%" y="3551.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (1,319,182 samples, 0.18%)</title><rect x="20.7979%" y="3525" width="0.1770%" height="15" fill="rgb(214,17,3)" fg:x="155019682" fg:w="1319182"/><text x="21.0479%" y="3535.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (1,319,182 samples, 0.18%)</title><rect x="20.7979%" y="3509" width="0.1770%" height="15" fill="rgb(212,111,17)" fg:x="155019682" fg:w="1319182"/><text x="21.0479%" y="3519.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,319,182 samples, 0.18%)</title><rect x="20.7979%" y="3493" width="0.1770%" height="15" fill="rgb(221,157,24)" fg:x="155019682" fg:w="1319182"/><text x="21.0479%" y="3503.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,319,182 samples, 0.18%)</title><rect x="20.7979%" y="3477" width="0.1770%" height="15" fill="rgb(252,16,13)" fg:x="155019682" fg:w="1319182"/><text x="21.0479%" y="3487.50"></text></g><g><title>alloc::alloc::alloc (1,319,182 samples, 0.18%)</title><rect x="20.7979%" y="3461" width="0.1770%" height="15" fill="rgb(221,62,2)" fg:x="155019682" fg:w="1319182"/><text x="21.0479%" y="3471.50"></text></g><g><title>malloc (1,319,182 samples, 0.18%)</title><rect x="20.7979%" y="3445" width="0.1770%" height="15" fill="rgb(247,87,22)" fg:x="155019682" fg:w="1319182"/><text x="21.0479%" y="3455.50"></text></g><g><title>[libc.so.6] (1,319,182 samples, 0.18%)</title><rect x="20.7979%" y="3429" width="0.1770%" height="15" fill="rgb(215,73,9)" fg:x="155019682" fg:w="1319182"/><text x="21.0479%" y="3439.50"></text></g><g><title>&lt;css_bitvector_compiler::BitVector as core::clone::Clone&gt;::clone (1,110,422 samples, 0.15%)</title><rect x="20.9749%" y="3685" width="0.1490%" height="15" fill="rgb(207,175,33)" fg:x="156338864" fg:w="1110422"/><text x="21.2249%" y="3695.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,110,422 samples, 0.15%)</title><rect x="20.9749%" y="3669" width="0.1490%" height="15" fill="rgb(243,129,54)" fg:x="156338864" fg:w="1110422"/><text x="21.2249%" y="3679.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,110,422 samples, 0.15%)</title><rect x="20.9749%" y="3653" width="0.1490%" height="15" fill="rgb(227,119,45)" fg:x="156338864" fg:w="1110422"/><text x="21.2249%" y="3663.50"></text></g><g><title>alloc::slice::hack::to_vec (1,110,422 samples, 0.15%)</title><rect x="20.9749%" y="3637" width="0.1490%" height="15" fill="rgb(205,109,36)" fg:x="156338864" fg:w="1110422"/><text x="21.2249%" y="3647.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1,110,422 samples, 0.15%)</title><rect x="20.9749%" y="3621" width="0.1490%" height="15" fill="rgb(205,6,39)" fg:x="156338864" fg:w="1110422"/><text x="21.2249%" y="3631.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,110,422 samples, 0.15%)</title><rect x="20.9749%" y="3605" width="0.1490%" height="15" fill="rgb(221,32,16)" fg:x="156338864" fg:w="1110422"/><text x="21.2249%" y="3615.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,110,422 samples, 0.15%)</title><rect x="20.9749%" y="3589" width="0.1490%" height="15" fill="rgb(228,144,50)" fg:x="156338864" fg:w="1110422"/><text x="21.2249%" y="3599.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (1,110,422 samples, 0.15%)</title><rect x="20.9749%" y="3573" width="0.1490%" height="15" fill="rgb(229,201,53)" fg:x="156338864" fg:w="1110422"/><text x="21.2249%" y="3583.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1,110,422 samples, 0.15%)</title><rect x="20.9749%" y="3557" width="0.1490%" height="15" fill="rgb(249,153,27)" fg:x="156338864" fg:w="1110422"/><text x="21.2249%" y="3567.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,110,422 samples, 0.15%)</title><rect x="20.9749%" y="3541" width="0.1490%" height="15" fill="rgb(227,106,25)" fg:x="156338864" fg:w="1110422"/><text x="21.2249%" y="3551.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,110,422 samples, 0.15%)</title><rect x="20.9749%" y="3525" width="0.1490%" height="15" fill="rgb(230,65,29)" fg:x="156338864" fg:w="1110422"/><text x="21.2249%" y="3535.50"></text></g><g><title>alloc::alloc::alloc (1,110,422 samples, 0.15%)</title><rect x="20.9749%" y="3509" width="0.1490%" height="15" fill="rgb(221,57,46)" fg:x="156338864" fg:w="1110422"/><text x="21.2249%" y="3519.50"></text></g><g><title>malloc (1,110,422 samples, 0.15%)</title><rect x="20.9749%" y="3493" width="0.1490%" height="15" fill="rgb(229,161,17)" fg:x="156338864" fg:w="1110422"/><text x="21.2249%" y="3503.50"></text></g><g><title>[libc.so.6] (1,110,422 samples, 0.15%)</title><rect x="20.9749%" y="3477" width="0.1490%" height="15" fill="rgb(222,213,11)" fg:x="156338864" fg:w="1110422"/><text x="21.2249%" y="3487.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (7,663,605 samples, 1.03%)</title><rect x="20.2784%" y="3765" width="1.0282%" height="15" fill="rgb(235,35,13)" fg:x="151147852" fg:w="7663605"/><text x="20.5284%" y="3775.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (7,663,605 samples, 1.03%)</title><rect x="20.2784%" y="3749" width="1.0282%" height="15" fill="rgb(233,158,34)" fg:x="151147852" fg:w="7663605"/><text x="20.5284%" y="3759.50"></text></g><g><title>alloc::slice::hack::to_vec (7,663,605 samples, 1.03%)</title><rect x="20.2784%" y="3733" width="1.0282%" height="15" fill="rgb(215,151,48)" fg:x="151147852" fg:w="7663605"/><text x="20.5284%" y="3743.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (7,663,605 samples, 1.03%)</title><rect x="20.2784%" y="3717" width="1.0282%" height="15" fill="rgb(229,84,14)" fg:x="151147852" fg:w="7663605"/><text x="20.5284%" y="3727.50"></text></g><g><title>&lt;css_bitvector_compiler::HtmlNode as core::clone::Clone&gt;::clone (7,663,605 samples, 1.03%)</title><rect x="20.2784%" y="3701" width="1.0282%" height="15" fill="rgb(229,68,14)" fg:x="151147852" fg:w="7663605"/><text x="20.5284%" y="3711.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::clone::Clone&gt;::clone (1,362,171 samples, 0.18%)</title><rect x="21.1238%" y="3685" width="0.1828%" height="15" fill="rgb(243,106,26)" fg:x="157449286" fg:w="1362171"/><text x="21.3738%" y="3695.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::clone::Clone&gt;::clone (1,362,171 samples, 0.18%)</title><rect x="21.1238%" y="3669" width="0.1828%" height="15" fill="rgb(206,45,38)" fg:x="157449286" fg:w="1362171"/><text x="21.3738%" y="3679.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (1,362,171 samples, 0.18%)</title><rect x="21.1238%" y="3653" width="0.1828%" height="15" fill="rgb(226,6,15)" fg:x="157449286" fg:w="1362171"/><text x="21.3738%" y="3663.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,362,171 samples, 0.18%)</title><rect x="21.1238%" y="3637" width="0.1828%" height="15" fill="rgb(232,22,54)" fg:x="157449286" fg:w="1362171"/><text x="21.3738%" y="3647.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::new_uninitialized (1,362,171 samples, 0.18%)</title><rect x="21.1238%" y="3621" width="0.1828%" height="15" fill="rgb(229,222,32)" fg:x="157449286" fg:w="1362171"/><text x="21.3738%" y="3631.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (1,362,171 samples, 0.18%)</title><rect x="21.1238%" y="3605" width="0.1828%" height="15" fill="rgb(228,62,29)" fg:x="157449286" fg:w="1362171"/><text x="21.3738%" y="3615.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (1,362,171 samples, 0.18%)</title><rect x="21.1238%" y="3589" width="0.1828%" height="15" fill="rgb(251,103,34)" fg:x="157449286" fg:w="1362171"/><text x="21.3738%" y="3599.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,362,171 samples, 0.18%)</title><rect x="21.1238%" y="3573" width="0.1828%" height="15" fill="rgb(233,12,30)" fg:x="157449286" fg:w="1362171"/><text x="21.3738%" y="3583.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,362,171 samples, 0.18%)</title><rect x="21.1238%" y="3557" width="0.1828%" height="15" fill="rgb(238,52,0)" fg:x="157449286" fg:w="1362171"/><text x="21.3738%" y="3567.50"></text></g><g><title>alloc::alloc::alloc (1,362,171 samples, 0.18%)</title><rect x="21.1238%" y="3541" width="0.1828%" height="15" fill="rgb(223,98,5)" fg:x="157449286" fg:w="1362171"/><text x="21.3738%" y="3551.50"></text></g><g><title>malloc (1,362,171 samples, 0.18%)</title><rect x="21.1238%" y="3525" width="0.1828%" height="15" fill="rgb(228,75,37)" fg:x="157449286" fg:w="1362171"/><text x="21.3738%" y="3535.50"></text></g><g><title>[libc.so.6] (1,362,171 samples, 0.18%)</title><rect x="21.1238%" y="3509" width="0.1828%" height="15" fill="rgb(205,115,49)" fg:x="157449286" fg:w="1362171"/><text x="21.3738%" y="3519.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (1,340,642 samples, 0.18%)</title><rect x="21.3066%" y="3765" width="0.1799%" height="15" fill="rgb(250,154,43)" fg:x="158811457" fg:w="1340642"/><text x="21.5566%" y="3775.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1,340,642 samples, 0.18%)</title><rect x="21.3066%" y="3749" width="0.1799%" height="15" fill="rgb(226,43,29)" fg:x="158811457" fg:w="1340642"/><text x="21.5566%" y="3759.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,340,642 samples, 0.18%)</title><rect x="21.3066%" y="3733" width="0.1799%" height="15" fill="rgb(249,228,39)" fg:x="158811457" fg:w="1340642"/><text x="21.5566%" y="3743.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,340,642 samples, 0.18%)</title><rect x="21.3066%" y="3717" width="0.1799%" height="15" fill="rgb(216,79,43)" fg:x="158811457" fg:w="1340642"/><text x="21.5566%" y="3727.50"></text></g><g><title>alloc::slice::hack::to_vec (1,340,642 samples, 0.18%)</title><rect x="21.3066%" y="3701" width="0.1799%" height="15" fill="rgb(228,95,12)" fg:x="158811457" fg:w="1340642"/><text x="21.5566%" y="3711.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1,340,642 samples, 0.18%)</title><rect x="21.3066%" y="3685" width="0.1799%" height="15" fill="rgb(249,221,15)" fg:x="158811457" fg:w="1340642"/><text x="21.5566%" y="3695.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,340,642 samples, 0.18%)</title><rect x="21.3066%" y="3669" width="0.1799%" height="15" fill="rgb(233,34,13)" fg:x="158811457" fg:w="1340642"/><text x="21.5566%" y="3679.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,340,642 samples, 0.18%)</title><rect x="21.3066%" y="3653" width="0.1799%" height="15" fill="rgb(214,103,39)" fg:x="158811457" fg:w="1340642"/><text x="21.5566%" y="3663.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (1,340,642 samples, 0.18%)</title><rect x="21.3066%" y="3637" width="0.1799%" height="15" fill="rgb(251,126,39)" fg:x="158811457" fg:w="1340642"/><text x="21.5566%" y="3647.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1,340,642 samples, 0.18%)</title><rect x="21.3066%" y="3621" width="0.1799%" height="15" fill="rgb(214,216,36)" fg:x="158811457" fg:w="1340642"/><text x="21.5566%" y="3631.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,340,642 samples, 0.18%)</title><rect x="21.3066%" y="3605" width="0.1799%" height="15" fill="rgb(220,221,8)" fg:x="158811457" fg:w="1340642"/><text x="21.5566%" y="3615.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,340,642 samples, 0.18%)</title><rect x="21.3066%" y="3589" width="0.1799%" height="15" fill="rgb(240,216,3)" fg:x="158811457" fg:w="1340642"/><text x="21.5566%" y="3599.50"></text></g><g><title>alloc::alloc::alloc (1,340,642 samples, 0.18%)</title><rect x="21.3066%" y="3573" width="0.1799%" height="15" fill="rgb(232,218,17)" fg:x="158811457" fg:w="1340642"/><text x="21.5566%" y="3583.50"></text></g><g><title>malloc (1,340,642 samples, 0.18%)</title><rect x="21.3066%" y="3557" width="0.1799%" height="15" fill="rgb(229,163,45)" fg:x="158811457" fg:w="1340642"/><text x="21.5566%" y="3567.50"></text></g><g><title>[libc.so.6] (1,340,642 samples, 0.18%)</title><rect x="21.3066%" y="3541" width="0.1799%" height="15" fill="rgb(231,110,42)" fg:x="158811457" fg:w="1340642"/><text x="21.5566%" y="3551.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,273,776 samples, 0.17%)</title><rect x="21.4865%" y="3685" width="0.1709%" height="15" fill="rgb(208,170,48)" fg:x="160152099" fg:w="1273776"/><text x="21.7365%" y="3695.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,273,776 samples, 0.17%)</title><rect x="21.4865%" y="3669" width="0.1709%" height="15" fill="rgb(239,116,25)" fg:x="160152099" fg:w="1273776"/><text x="21.7365%" y="3679.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (1,273,776 samples, 0.17%)</title><rect x="21.4865%" y="3653" width="0.1709%" height="15" fill="rgb(219,200,50)" fg:x="160152099" fg:w="1273776"/><text x="21.7365%" y="3663.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1,273,776 samples, 0.17%)</title><rect x="21.4865%" y="3637" width="0.1709%" height="15" fill="rgb(245,200,0)" fg:x="160152099" fg:w="1273776"/><text x="21.7365%" y="3647.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,273,776 samples, 0.17%)</title><rect x="21.4865%" y="3621" width="0.1709%" height="15" fill="rgb(245,119,33)" fg:x="160152099" fg:w="1273776"/><text x="21.7365%" y="3631.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,273,776 samples, 0.17%)</title><rect x="21.4865%" y="3605" width="0.1709%" height="15" fill="rgb(231,125,12)" fg:x="160152099" fg:w="1273776"/><text x="21.7365%" y="3615.50"></text></g><g><title>alloc::alloc::alloc (1,273,776 samples, 0.17%)</title><rect x="21.4865%" y="3589" width="0.1709%" height="15" fill="rgb(216,96,41)" fg:x="160152099" fg:w="1273776"/><text x="21.7365%" y="3599.50"></text></g><g><title>malloc (1,273,776 samples, 0.17%)</title><rect x="21.4865%" y="3573" width="0.1709%" height="15" fill="rgb(248,43,45)" fg:x="160152099" fg:w="1273776"/><text x="21.7365%" y="3583.50"></text></g><g><title>[libc.so.6] (1,273,776 samples, 0.17%)</title><rect x="21.4865%" y="3557" width="0.1709%" height="15" fill="rgb(217,222,7)" fg:x="160152099" fg:w="1273776"/><text x="21.7365%" y="3567.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (11,533,884 samples, 1.55%)</title><rect x="20.2784%" y="3845" width="1.5474%" height="15" fill="rgb(233,28,6)" fg:x="151147852" fg:w="11533884"/><text x="20.5284%" y="3855.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (11,533,884 samples, 1.55%)</title><rect x="20.2784%" y="3829" width="1.5474%" height="15" fill="rgb(231,218,15)" fg:x="151147852" fg:w="11533884"/><text x="20.5284%" y="3839.50"></text></g><g><title>alloc::slice::hack::to_vec (11,533,884 samples, 1.55%)</title><rect x="20.2784%" y="3813" width="1.5474%" height="15" fill="rgb(226,171,48)" fg:x="151147852" fg:w="11533884"/><text x="20.5284%" y="3823.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (11,533,884 samples, 1.55%)</title><rect x="20.2784%" y="3797" width="1.5474%" height="15" fill="rgb(235,201,9)" fg:x="151147852" fg:w="11533884"/><text x="20.5284%" y="3807.50"></text></g><g><title>&lt;css_bitvector_compiler::HtmlNode as core::clone::Clone&gt;::clone (11,533,884 samples, 1.55%)</title><rect x="20.2784%" y="3781" width="1.5474%" height="15" fill="rgb(217,80,15)" fg:x="151147852" fg:w="11533884"/><text x="20.5284%" y="3791.50"></text></g><g><title>&lt;css_bitvector_compiler::BitVector as core::clone::Clone&gt;::clone (2,529,637 samples, 0.34%)</title><rect x="21.4865%" y="3765" width="0.3394%" height="15" fill="rgb(219,152,8)" fg:x="160152099" fg:w="2529637"/><text x="21.7365%" y="3775.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2,529,637 samples, 0.34%)</title><rect x="21.4865%" y="3749" width="0.3394%" height="15" fill="rgb(243,107,38)" fg:x="160152099" fg:w="2529637"/><text x="21.7365%" y="3759.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2,529,637 samples, 0.34%)</title><rect x="21.4865%" y="3733" width="0.3394%" height="15" fill="rgb(231,17,5)" fg:x="160152099" fg:w="2529637"/><text x="21.7365%" y="3743.50"></text></g><g><title>alloc::slice::hack::to_vec (2,529,637 samples, 0.34%)</title><rect x="21.4865%" y="3717" width="0.3394%" height="15" fill="rgb(209,25,54)" fg:x="160152099" fg:w="2529637"/><text x="21.7365%" y="3727.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2,529,637 samples, 0.34%)</title><rect x="21.4865%" y="3701" width="0.3394%" height="15" fill="rgb(219,0,2)" fg:x="160152099" fg:w="2529637"/><text x="21.7365%" y="3711.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1,255,861 samples, 0.17%)</title><rect x="21.6574%" y="3685" width="0.1685%" height="15" fill="rgb(246,9,5)" fg:x="161425875" fg:w="1255861"/><text x="21.9074%" y="3695.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,255,861 samples, 0.17%)</title><rect x="21.6574%" y="3669" width="0.1685%" height="15" fill="rgb(226,159,4)" fg:x="161425875" fg:w="1255861"/><text x="21.9074%" y="3679.50"></text></g><g><title>[libc.so.6] (1,255,861 samples, 0.17%)</title><rect x="21.6574%" y="3653" width="0.1685%" height="15" fill="rgb(219,175,34)" fg:x="161425875" fg:w="1255861"/><text x="21.9074%" y="3663.50"></text></g><g><title>&lt;css_bitvector_compiler::HtmlNode as core::clone::Clone&gt;::clone (14,120,496 samples, 1.89%)</title><rect x="20.2784%" y="3861" width="1.8944%" height="15" fill="rgb(236,10,46)" fg:x="151147852" fg:w="14120496"/><text x="20.5284%" y="3871.50">&lt;..</text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::clone::Clone&gt;::clone (2,586,612 samples, 0.35%)</title><rect x="21.8259%" y="3845" width="0.3470%" height="15" fill="rgb(240,211,16)" fg:x="162681736" fg:w="2586612"/><text x="22.0759%" y="3855.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::clone::Clone&gt;::clone (2,586,612 samples, 0.35%)</title><rect x="21.8259%" y="3829" width="0.3470%" height="15" fill="rgb(205,3,43)" fg:x="162681736" fg:w="2586612"/><text x="22.0759%" y="3839.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (2,586,612 samples, 0.35%)</title><rect x="21.8259%" y="3813" width="0.3470%" height="15" fill="rgb(245,7,22)" fg:x="162681736" fg:w="2586612"/><text x="22.0759%" y="3823.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (2,586,612 samples, 0.35%)</title><rect x="21.8259%" y="3797" width="0.3470%" height="15" fill="rgb(239,132,32)" fg:x="162681736" fg:w="2586612"/><text x="22.0759%" y="3807.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as hashbrown::raw::RawTableClone&gt;::clone_from_spec (2,586,612 samples, 0.35%)</title><rect x="21.8259%" y="3781" width="0.3470%" height="15" fill="rgb(228,202,34)" fg:x="162681736" fg:w="2586612"/><text x="22.0759%" y="3791.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (2,586,612 samples, 0.35%)</title><rect x="21.8259%" y="3765" width="0.3470%" height="15" fill="rgb(254,200,22)" fg:x="162681736" fg:w="2586612"/><text x="22.0759%" y="3775.50"></text></g><g><title>core::clone::Clone::clone (2,586,612 samples, 0.35%)</title><rect x="21.8259%" y="3749" width="0.3470%" height="15" fill="rgb(219,10,39)" fg:x="162681736" fg:w="2586612"/><text x="22.0759%" y="3759.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2,586,612 samples, 0.35%)</title><rect x="21.8259%" y="3733" width="0.3470%" height="15" fill="rgb(226,210,39)" fg:x="162681736" fg:w="2586612"/><text x="22.0759%" y="3743.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2,586,612 samples, 0.35%)</title><rect x="21.8259%" y="3717" width="0.3470%" height="15" fill="rgb(208,219,16)" fg:x="162681736" fg:w="2586612"/><text x="22.0759%" y="3727.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2,586,612 samples, 0.35%)</title><rect x="21.8259%" y="3701" width="0.3470%" height="15" fill="rgb(216,158,51)" fg:x="162681736" fg:w="2586612"/><text x="22.0759%" y="3711.50"></text></g><g><title>alloc::slice::hack::to_vec (2,586,612 samples, 0.35%)</title><rect x="21.8259%" y="3685" width="0.3470%" height="15" fill="rgb(233,14,44)" fg:x="162681736" fg:w="2586612"/><text x="22.0759%" y="3695.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2,586,612 samples, 0.35%)</title><rect x="21.8259%" y="3669" width="0.3470%" height="15" fill="rgb(237,97,39)" fg:x="162681736" fg:w="2586612"/><text x="22.0759%" y="3679.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2,586,612 samples, 0.35%)</title><rect x="21.8259%" y="3653" width="0.3470%" height="15" fill="rgb(218,198,43)" fg:x="162681736" fg:w="2586612"/><text x="22.0759%" y="3663.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2,586,612 samples, 0.35%)</title><rect x="21.8259%" y="3637" width="0.3470%" height="15" fill="rgb(231,104,20)" fg:x="162681736" fg:w="2586612"/><text x="22.0759%" y="3647.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (2,586,612 samples, 0.35%)</title><rect x="21.8259%" y="3621" width="0.3470%" height="15" fill="rgb(254,36,13)" fg:x="162681736" fg:w="2586612"/><text x="22.0759%" y="3631.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (2,586,612 samples, 0.35%)</title><rect x="21.8259%" y="3605" width="0.3470%" height="15" fill="rgb(248,14,50)" fg:x="162681736" fg:w="2586612"/><text x="22.0759%" y="3615.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2,586,612 samples, 0.35%)</title><rect x="21.8259%" y="3589" width="0.3470%" height="15" fill="rgb(217,107,29)" fg:x="162681736" fg:w="2586612"/><text x="22.0759%" y="3599.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2,586,612 samples, 0.35%)</title><rect x="21.8259%" y="3573" width="0.3470%" height="15" fill="rgb(251,169,33)" fg:x="162681736" fg:w="2586612"/><text x="22.0759%" y="3583.50"></text></g><g><title>alloc::alloc::alloc (2,586,612 samples, 0.35%)</title><rect x="21.8259%" y="3557" width="0.3470%" height="15" fill="rgb(217,108,32)" fg:x="162681736" fg:w="2586612"/><text x="22.0759%" y="3567.50"></text></g><g><title>malloc (2,586,612 samples, 0.35%)</title><rect x="21.8259%" y="3541" width="0.3470%" height="15" fill="rgb(219,66,42)" fg:x="162681736" fg:w="2586612"/><text x="22.0759%" y="3551.50"></text></g><g><title>[libc.so.6] (2,586,612 samples, 0.35%)</title><rect x="21.8259%" y="3525" width="0.3470%" height="15" fill="rgb(206,180,7)" fg:x="162681736" fg:w="2586612"/><text x="22.0759%" y="3535.50"></text></g><g><title>[libc.so.6] (1,270,415 samples, 0.17%)</title><rect x="22.0024%" y="3509" width="0.1704%" height="15" fill="rgb(208,226,31)" fg:x="163997933" fg:w="1270415"/><text x="22.2524%" y="3519.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (15,290,540 samples, 2.05%)</title><rect x="20.2784%" y="3925" width="2.0514%" height="15" fill="rgb(218,26,49)" fg:x="151147852" fg:w="15290540"/><text x="20.5284%" y="3935.50">&lt;..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (15,290,540 samples, 2.05%)</title><rect x="20.2784%" y="3909" width="2.0514%" height="15" fill="rgb(233,197,48)" fg:x="151147852" fg:w="15290540"/><text x="20.5284%" y="3919.50">a..</text></g><g><title>alloc::slice::hack::to_vec (15,290,540 samples, 2.05%)</title><rect x="20.2784%" y="3893" width="2.0514%" height="15" fill="rgb(252,181,51)" fg:x="151147852" fg:w="15290540"/><text x="20.5284%" y="3903.50">a..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (15,290,540 samples, 2.05%)</title><rect x="20.2784%" y="3877" width="2.0514%" height="15" fill="rgb(253,90,19)" fg:x="151147852" fg:w="15290540"/><text x="20.5284%" y="3887.50">&lt;..</text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (1,170,044 samples, 0.16%)</title><rect x="22.1729%" y="3861" width="0.1570%" height="15" fill="rgb(215,171,30)" fg:x="165268348" fg:w="1170044"/><text x="22.4229%" y="3871.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (1,332,843 samples, 0.18%)</title><rect x="22.3299%" y="3925" width="0.1788%" height="15" fill="rgb(214,222,9)" fg:x="166438392" fg:w="1332843"/><text x="22.5799%" y="3935.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1,332,843 samples, 0.18%)</title><rect x="22.3299%" y="3909" width="0.1788%" height="15" fill="rgb(223,3,22)" fg:x="166438392" fg:w="1332843"/><text x="22.5799%" y="3919.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,332,843 samples, 0.18%)</title><rect x="22.3299%" y="3893" width="0.1788%" height="15" fill="rgb(225,196,46)" fg:x="166438392" fg:w="1332843"/><text x="22.5799%" y="3903.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,332,843 samples, 0.18%)</title><rect x="22.3299%" y="3877" width="0.1788%" height="15" fill="rgb(209,110,37)" fg:x="166438392" fg:w="1332843"/><text x="22.5799%" y="3887.50"></text></g><g><title>alloc::slice::hack::to_vec (1,332,843 samples, 0.18%)</title><rect x="22.3299%" y="3861" width="0.1788%" height="15" fill="rgb(249,89,12)" fg:x="166438392" fg:w="1332843"/><text x="22.5799%" y="3871.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1,332,843 samples, 0.18%)</title><rect x="22.3299%" y="3845" width="0.1788%" height="15" fill="rgb(226,27,33)" fg:x="166438392" fg:w="1332843"/><text x="22.5799%" y="3855.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,332,843 samples, 0.18%)</title><rect x="22.3299%" y="3829" width="0.1788%" height="15" fill="rgb(213,82,22)" fg:x="166438392" fg:w="1332843"/><text x="22.5799%" y="3839.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,332,843 samples, 0.18%)</title><rect x="22.3299%" y="3813" width="0.1788%" height="15" fill="rgb(248,140,0)" fg:x="166438392" fg:w="1332843"/><text x="22.5799%" y="3823.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (1,332,843 samples, 0.18%)</title><rect x="22.3299%" y="3797" width="0.1788%" height="15" fill="rgb(228,106,3)" fg:x="166438392" fg:w="1332843"/><text x="22.5799%" y="3807.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1,332,843 samples, 0.18%)</title><rect x="22.3299%" y="3781" width="0.1788%" height="15" fill="rgb(209,23,37)" fg:x="166438392" fg:w="1332843"/><text x="22.5799%" y="3791.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,332,843 samples, 0.18%)</title><rect x="22.3299%" y="3765" width="0.1788%" height="15" fill="rgb(241,93,50)" fg:x="166438392" fg:w="1332843"/><text x="22.5799%" y="3775.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,332,843 samples, 0.18%)</title><rect x="22.3299%" y="3749" width="0.1788%" height="15" fill="rgb(253,46,43)" fg:x="166438392" fg:w="1332843"/><text x="22.5799%" y="3759.50"></text></g><g><title>alloc::alloc::alloc (1,332,843 samples, 0.18%)</title><rect x="22.3299%" y="3733" width="0.1788%" height="15" fill="rgb(226,206,43)" fg:x="166438392" fg:w="1332843"/><text x="22.5799%" y="3743.50"></text></g><g><title>malloc (1,332,843 samples, 0.18%)</title><rect x="22.3299%" y="3717" width="0.1788%" height="15" fill="rgb(217,54,7)" fg:x="166438392" fg:w="1332843"/><text x="22.5799%" y="3727.50"></text></g><g><title>[libc.so.6] (1,332,843 samples, 0.18%)</title><rect x="22.3299%" y="3701" width="0.1788%" height="15" fill="rgb(223,5,52)" fg:x="166438392" fg:w="1332843"/><text x="22.5799%" y="3711.50"></text></g><g><title>core::clone::Clone::clone (701,295 samples, 0.09%)</title><rect x="22.5087%" y="3829" width="0.0941%" height="15" fill="rgb(206,52,46)" fg:x="167771235" fg:w="701295"/><text x="22.7587%" y="3839.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (701,295 samples, 0.09%)</title><rect x="22.5087%" y="3813" width="0.0941%" height="15" fill="rgb(253,136,11)" fg:x="167771235" fg:w="701295"/><text x="22.7587%" y="3823.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (18,571,958 samples, 2.49%)</title><rect x="20.2784%" y="4005" width="2.4917%" height="15" fill="rgb(208,106,33)" fg:x="151147852" fg:w="18571958"/><text x="20.5284%" y="4015.50">&lt;a..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (18,571,958 samples, 2.49%)</title><rect x="20.2784%" y="3989" width="2.4917%" height="15" fill="rgb(206,54,4)" fg:x="151147852" fg:w="18571958"/><text x="20.5284%" y="3999.50">al..</text></g><g><title>alloc::slice::hack::to_vec (18,571,958 samples, 2.49%)</title><rect x="20.2784%" y="3973" width="2.4917%" height="15" fill="rgb(213,3,15)" fg:x="151147852" fg:w="18571958"/><text x="20.5284%" y="3983.50">al..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (18,571,958 samples, 2.49%)</title><rect x="20.2784%" y="3957" width="2.4917%" height="15" fill="rgb(252,211,39)" fg:x="151147852" fg:w="18571958"/><text x="20.5284%" y="3967.50">&lt;T..</text></g><g><title>&lt;css_bitvector_compiler::HtmlNode as core::clone::Clone&gt;::clone (18,571,958 samples, 2.49%)</title><rect x="20.2784%" y="3941" width="2.4917%" height="15" fill="rgb(223,6,36)" fg:x="151147852" fg:w="18571958"/><text x="20.5284%" y="3951.50">&lt;c..</text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::clone::Clone&gt;::clone (1,948,575 samples, 0.26%)</title><rect x="22.5087%" y="3925" width="0.2614%" height="15" fill="rgb(252,169,45)" fg:x="167771235" fg:w="1948575"/><text x="22.7587%" y="3935.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::clone::Clone&gt;::clone (1,948,575 samples, 0.26%)</title><rect x="22.5087%" y="3909" width="0.2614%" height="15" fill="rgb(212,48,26)" fg:x="167771235" fg:w="1948575"/><text x="22.7587%" y="3919.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (1,948,575 samples, 0.26%)</title><rect x="22.5087%" y="3893" width="0.2614%" height="15" fill="rgb(251,102,48)" fg:x="167771235" fg:w="1948575"/><text x="22.7587%" y="3903.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,948,575 samples, 0.26%)</title><rect x="22.5087%" y="3877" width="0.2614%" height="15" fill="rgb(243,208,16)" fg:x="167771235" fg:w="1948575"/><text x="22.7587%" y="3887.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as hashbrown::raw::RawTableClone&gt;::clone_from_spec (1,948,575 samples, 0.26%)</title><rect x="22.5087%" y="3861" width="0.2614%" height="15" fill="rgb(219,96,24)" fg:x="167771235" fg:w="1948575"/><text x="22.7587%" y="3871.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (1,948,575 samples, 0.26%)</title><rect x="22.5087%" y="3845" width="0.2614%" height="15" fill="rgb(219,33,29)" fg:x="167771235" fg:w="1948575"/><text x="22.7587%" y="3855.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::copy_to_nonoverlapping (1,247,280 samples, 0.17%)</title><rect x="22.6028%" y="3829" width="0.1673%" height="15" fill="rgb(223,176,5)" fg:x="168472530" fg:w="1247280"/><text x="22.8528%" y="3839.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,247,280 samples, 0.17%)</title><rect x="22.6028%" y="3813" width="0.1673%" height="15" fill="rgb(228,140,14)" fg:x="168472530" fg:w="1247280"/><text x="22.8528%" y="3823.50"></text></g><g><title>[libc.so.6] (1,247,280 samples, 0.17%)</title><rect x="22.6028%" y="3797" width="0.1673%" height="15" fill="rgb(217,179,31)" fg:x="168472530" fg:w="1247280"/><text x="22.8528%" y="3807.50"></text></g><g><title>__rdl_alloc (1,266,181 samples, 0.17%)</title><rect x="22.7701%" y="3701" width="0.1699%" height="15" fill="rgb(230,9,30)" fg:x="169719810" fg:w="1266181"/><text x="23.0201%" y="3711.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1,266,181 samples, 0.17%)</title><rect x="22.7701%" y="3685" width="0.1699%" height="15" fill="rgb(230,136,20)" fg:x="169719810" fg:w="1266181"/><text x="23.0201%" y="3695.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (23,629,495 samples, 3.17%)</title><rect x="19.9335%" y="4085" width="3.1702%" height="15" fill="rgb(215,210,22)" fg:x="148577097" fg:w="23629495"/><text x="20.1835%" y="4095.50">&lt;al..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (23,629,495 samples, 3.17%)</title><rect x="19.9335%" y="4069" width="3.1702%" height="15" fill="rgb(218,43,5)" fg:x="148577097" fg:w="23629495"/><text x="20.1835%" y="4079.50">all..</text></g><g><title>alloc::slice::hack::to_vec (23,629,495 samples, 3.17%)</title><rect x="19.9335%" y="4053" width="3.1702%" height="15" fill="rgb(216,11,5)" fg:x="148577097" fg:w="23629495"/><text x="20.1835%" y="4063.50">all..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (23,629,495 samples, 3.17%)</title><rect x="19.9335%" y="4037" width="3.1702%" height="15" fill="rgb(209,82,29)" fg:x="148577097" fg:w="23629495"/><text x="20.1835%" y="4047.50">&lt;T ..</text></g><g><title>&lt;css_bitvector_compiler::HtmlNode as core::clone::Clone&gt;::clone (22,314,822 samples, 2.99%)</title><rect x="20.1099%" y="4021" width="2.9938%" height="15" fill="rgb(244,115,12)" fg:x="149891770" fg:w="22314822"/><text x="20.3599%" y="4031.50">&lt;cs..</text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::clone::Clone&gt;::clone (2,486,782 samples, 0.33%)</title><rect x="22.7701%" y="4005" width="0.3336%" height="15" fill="rgb(222,82,18)" fg:x="169719810" fg:w="2486782"/><text x="23.0201%" y="4015.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::clone::Clone&gt;::clone (2,486,782 samples, 0.33%)</title><rect x="22.7701%" y="3989" width="0.3336%" height="15" fill="rgb(249,227,8)" fg:x="169719810" fg:w="2486782"/><text x="23.0201%" y="3999.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (2,486,782 samples, 0.33%)</title><rect x="22.7701%" y="3973" width="0.3336%" height="15" fill="rgb(253,141,45)" fg:x="169719810" fg:w="2486782"/><text x="23.0201%" y="3983.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (2,486,782 samples, 0.33%)</title><rect x="22.7701%" y="3957" width="0.3336%" height="15" fill="rgb(234,184,4)" fg:x="169719810" fg:w="2486782"/><text x="23.0201%" y="3967.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as hashbrown::raw::RawTableClone&gt;::clone_from_spec (2,486,782 samples, 0.33%)</title><rect x="22.7701%" y="3941" width="0.3336%" height="15" fill="rgb(218,194,23)" fg:x="169719810" fg:w="2486782"/><text x="23.0201%" y="3951.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (2,486,782 samples, 0.33%)</title><rect x="22.7701%" y="3925" width="0.3336%" height="15" fill="rgb(235,66,41)" fg:x="169719810" fg:w="2486782"/><text x="23.0201%" y="3935.50"></text></g><g><title>core::clone::Clone::clone (2,486,782 samples, 0.33%)</title><rect x="22.7701%" y="3909" width="0.3336%" height="15" fill="rgb(245,217,1)" fg:x="169719810" fg:w="2486782"/><text x="23.0201%" y="3919.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2,486,782 samples, 0.33%)</title><rect x="22.7701%" y="3893" width="0.3336%" height="15" fill="rgb(229,91,1)" fg:x="169719810" fg:w="2486782"/><text x="23.0201%" y="3903.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2,486,782 samples, 0.33%)</title><rect x="22.7701%" y="3877" width="0.3336%" height="15" fill="rgb(207,101,30)" fg:x="169719810" fg:w="2486782"/><text x="23.0201%" y="3887.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2,486,782 samples, 0.33%)</title><rect x="22.7701%" y="3861" width="0.3336%" height="15" fill="rgb(223,82,49)" fg:x="169719810" fg:w="2486782"/><text x="23.0201%" y="3871.50"></text></g><g><title>alloc::slice::hack::to_vec (2,486,782 samples, 0.33%)</title><rect x="22.7701%" y="3845" width="0.3336%" height="15" fill="rgb(218,167,17)" fg:x="169719810" fg:w="2486782"/><text x="23.0201%" y="3855.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2,486,782 samples, 0.33%)</title><rect x="22.7701%" y="3829" width="0.3336%" height="15" fill="rgb(208,103,14)" fg:x="169719810" fg:w="2486782"/><text x="23.0201%" y="3839.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2,486,782 samples, 0.33%)</title><rect x="22.7701%" y="3813" width="0.3336%" height="15" fill="rgb(238,20,8)" fg:x="169719810" fg:w="2486782"/><text x="23.0201%" y="3823.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2,486,782 samples, 0.33%)</title><rect x="22.7701%" y="3797" width="0.3336%" height="15" fill="rgb(218,80,54)" fg:x="169719810" fg:w="2486782"/><text x="23.0201%" y="3807.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (2,486,782 samples, 0.33%)</title><rect x="22.7701%" y="3781" width="0.3336%" height="15" fill="rgb(240,144,17)" fg:x="169719810" fg:w="2486782"/><text x="23.0201%" y="3791.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (2,486,782 samples, 0.33%)</title><rect x="22.7701%" y="3765" width="0.3336%" height="15" fill="rgb(245,27,50)" fg:x="169719810" fg:w="2486782"/><text x="23.0201%" y="3775.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2,486,782 samples, 0.33%)</title><rect x="22.7701%" y="3749" width="0.3336%" height="15" fill="rgb(251,51,7)" fg:x="169719810" fg:w="2486782"/><text x="23.0201%" y="3759.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2,486,782 samples, 0.33%)</title><rect x="22.7701%" y="3733" width="0.3336%" height="15" fill="rgb(245,217,29)" fg:x="169719810" fg:w="2486782"/><text x="23.0201%" y="3743.50"></text></g><g><title>alloc::alloc::alloc (2,486,782 samples, 0.33%)</title><rect x="22.7701%" y="3717" width="0.3336%" height="15" fill="rgb(221,176,29)" fg:x="169719810" fg:w="2486782"/><text x="23.0201%" y="3727.50"></text></g><g><title>malloc (1,220,601 samples, 0.16%)</title><rect x="22.9400%" y="3701" width="0.1638%" height="15" fill="rgb(212,180,24)" fg:x="170985991" fg:w="1220601"/><text x="23.1900%" y="3711.50"></text></g><g><title>[libc.so.6] (1,220,601 samples, 0.16%)</title><rect x="22.9400%" y="3685" width="0.1638%" height="15" fill="rgb(254,24,2)" fg:x="170985991" fg:w="1220601"/><text x="23.1900%" y="3695.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (1,302,111 samples, 0.17%)</title><rect x="23.1037%" y="4085" width="0.1747%" height="15" fill="rgb(230,100,2)" fg:x="172206592" fg:w="1302111"/><text x="23.3537%" y="4095.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1,302,111 samples, 0.17%)</title><rect x="23.1037%" y="4069" width="0.1747%" height="15" fill="rgb(219,142,25)" fg:x="172206592" fg:w="1302111"/><text x="23.3537%" y="4079.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,302,111 samples, 0.17%)</title><rect x="23.1037%" y="4053" width="0.1747%" height="15" fill="rgb(240,73,43)" fg:x="172206592" fg:w="1302111"/><text x="23.3537%" y="4063.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,302,111 samples, 0.17%)</title><rect x="23.1037%" y="4037" width="0.1747%" height="15" fill="rgb(214,114,15)" fg:x="172206592" fg:w="1302111"/><text x="23.3537%" y="4047.50"></text></g><g><title>alloc::slice::hack::to_vec (1,302,111 samples, 0.17%)</title><rect x="23.1037%" y="4021" width="0.1747%" height="15" fill="rgb(207,130,4)" fg:x="172206592" fg:w="1302111"/><text x="23.3537%" y="4031.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1,302,111 samples, 0.17%)</title><rect x="23.1037%" y="4005" width="0.1747%" height="15" fill="rgb(221,25,40)" fg:x="172206592" fg:w="1302111"/><text x="23.3537%" y="4015.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,302,111 samples, 0.17%)</title><rect x="23.1037%" y="3989" width="0.1747%" height="15" fill="rgb(241,184,7)" fg:x="172206592" fg:w="1302111"/><text x="23.3537%" y="3999.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,302,111 samples, 0.17%)</title><rect x="23.1037%" y="3973" width="0.1747%" height="15" fill="rgb(235,159,4)" fg:x="172206592" fg:w="1302111"/><text x="23.3537%" y="3983.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (1,302,111 samples, 0.17%)</title><rect x="23.1037%" y="3957" width="0.1747%" height="15" fill="rgb(214,87,48)" fg:x="172206592" fg:w="1302111"/><text x="23.3537%" y="3967.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1,302,111 samples, 0.17%)</title><rect x="23.1037%" y="3941" width="0.1747%" height="15" fill="rgb(246,198,24)" fg:x="172206592" fg:w="1302111"/><text x="23.3537%" y="3951.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,302,111 samples, 0.17%)</title><rect x="23.1037%" y="3925" width="0.1747%" height="15" fill="rgb(209,66,40)" fg:x="172206592" fg:w="1302111"/><text x="23.3537%" y="3935.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,302,111 samples, 0.17%)</title><rect x="23.1037%" y="3909" width="0.1747%" height="15" fill="rgb(233,147,39)" fg:x="172206592" fg:w="1302111"/><text x="23.3537%" y="3919.50"></text></g><g><title>alloc::alloc::alloc (1,302,111 samples, 0.17%)</title><rect x="23.1037%" y="3893" width="0.1747%" height="15" fill="rgb(231,145,52)" fg:x="172206592" fg:w="1302111"/><text x="23.3537%" y="3903.50"></text></g><g><title>malloc (1,302,111 samples, 0.17%)</title><rect x="23.1037%" y="3877" width="0.1747%" height="15" fill="rgb(206,20,26)" fg:x="172206592" fg:w="1302111"/><text x="23.3537%" y="3887.50"></text></g><g><title>[libc.so.6] (1,302,111 samples, 0.17%)</title><rect x="23.1037%" y="3861" width="0.1747%" height="15" fill="rgb(238,220,4)" fg:x="172206592" fg:w="1302111"/><text x="23.3537%" y="3871.50"></text></g><g><title>&lt;css_bitvector_compiler::BitVector as core::clone::Clone&gt;::clone (1,362,042 samples, 0.18%)</title><rect x="23.2784%" y="4085" width="0.1827%" height="15" fill="rgb(252,195,42)" fg:x="173508703" fg:w="1362042"/><text x="23.5284%" y="4095.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,362,042 samples, 0.18%)</title><rect x="23.2784%" y="4069" width="0.1827%" height="15" fill="rgb(209,10,6)" fg:x="173508703" fg:w="1362042"/><text x="23.5284%" y="4079.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,362,042 samples, 0.18%)</title><rect x="23.2784%" y="4053" width="0.1827%" height="15" fill="rgb(229,3,52)" fg:x="173508703" fg:w="1362042"/><text x="23.5284%" y="4063.50"></text></g><g><title>alloc::slice::hack::to_vec (1,362,042 samples, 0.18%)</title><rect x="23.2784%" y="4037" width="0.1827%" height="15" fill="rgb(253,49,37)" fg:x="173508703" fg:w="1362042"/><text x="23.5284%" y="4047.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1,362,042 samples, 0.18%)</title><rect x="23.2784%" y="4021" width="0.1827%" height="15" fill="rgb(240,103,49)" fg:x="173508703" fg:w="1362042"/><text x="23.5284%" y="4031.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1,362,042 samples, 0.18%)</title><rect x="23.2784%" y="4005" width="0.1827%" height="15" fill="rgb(250,182,30)" fg:x="173508703" fg:w="1362042"/><text x="23.5284%" y="4015.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,362,042 samples, 0.18%)</title><rect x="23.2784%" y="3989" width="0.1827%" height="15" fill="rgb(248,8,30)" fg:x="173508703" fg:w="1362042"/><text x="23.5284%" y="3999.50"></text></g><g><title>[libc.so.6] (1,362,042 samples, 0.18%)</title><rect x="23.2784%" y="3973" width="0.1827%" height="15" fill="rgb(237,120,30)" fg:x="173508703" fg:w="1362042"/><text x="23.5284%" y="3983.50"></text></g><g><title>core::clone::Clone::clone (1,358,503 samples, 0.18%)</title><rect x="23.4612%" y="3989" width="0.1823%" height="15" fill="rgb(221,146,34)" fg:x="174870745" fg:w="1358503"/><text x="23.7112%" y="3999.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1,358,503 samples, 0.18%)</title><rect x="23.4612%" y="3973" width="0.1823%" height="15" fill="rgb(242,55,13)" fg:x="174870745" fg:w="1358503"/><text x="23.7112%" y="3983.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,358,503 samples, 0.18%)</title><rect x="23.4612%" y="3957" width="0.1823%" height="15" fill="rgb(242,112,31)" fg:x="174870745" fg:w="1358503"/><text x="23.7112%" y="3967.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,358,503 samples, 0.18%)</title><rect x="23.4612%" y="3941" width="0.1823%" height="15" fill="rgb(249,192,27)" fg:x="174870745" fg:w="1358503"/><text x="23.7112%" y="3951.50"></text></g><g><title>alloc::slice::hack::to_vec (1,358,503 samples, 0.18%)</title><rect x="23.4612%" y="3925" width="0.1823%" height="15" fill="rgb(208,204,44)" fg:x="174870745" fg:w="1358503"/><text x="23.7112%" y="3935.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1,358,503 samples, 0.18%)</title><rect x="23.4612%" y="3909" width="0.1823%" height="15" fill="rgb(208,93,54)" fg:x="174870745" fg:w="1358503"/><text x="23.7112%" y="3919.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,358,503 samples, 0.18%)</title><rect x="23.4612%" y="3893" width="0.1823%" height="15" fill="rgb(242,1,31)" fg:x="174870745" fg:w="1358503"/><text x="23.7112%" y="3903.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,358,503 samples, 0.18%)</title><rect x="23.4612%" y="3877" width="0.1823%" height="15" fill="rgb(241,83,25)" fg:x="174870745" fg:w="1358503"/><text x="23.7112%" y="3887.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (1,358,503 samples, 0.18%)</title><rect x="23.4612%" y="3861" width="0.1823%" height="15" fill="rgb(205,169,50)" fg:x="174870745" fg:w="1358503"/><text x="23.7112%" y="3871.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1,358,503 samples, 0.18%)</title><rect x="23.4612%" y="3845" width="0.1823%" height="15" fill="rgb(239,186,37)" fg:x="174870745" fg:w="1358503"/><text x="23.7112%" y="3855.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,358,503 samples, 0.18%)</title><rect x="23.4612%" y="3829" width="0.1823%" height="15" fill="rgb(205,221,10)" fg:x="174870745" fg:w="1358503"/><text x="23.7112%" y="3839.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,358,503 samples, 0.18%)</title><rect x="23.4612%" y="3813" width="0.1823%" height="15" fill="rgb(218,196,15)" fg:x="174870745" fg:w="1358503"/><text x="23.7112%" y="3823.50"></text></g><g><title>alloc::alloc::alloc (1,358,503 samples, 0.18%)</title><rect x="23.4612%" y="3797" width="0.1823%" height="15" fill="rgb(218,196,35)" fg:x="174870745" fg:w="1358503"/><text x="23.7112%" y="3807.50"></text></g><g><title>[libc.so.6] (1,358,503 samples, 0.18%)</title><rect x="23.4612%" y="3781" width="0.1823%" height="15" fill="rgb(233,63,24)" fg:x="174870745" fg:w="1358503"/><text x="23.7112%" y="3791.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (32,642,622 samples, 4.38%)</title><rect x="19.4230%" y="4165" width="4.3794%" height="15" fill="rgb(225,8,4)" fg:x="144771462" fg:w="32642622"/><text x="19.6730%" y="4175.50">&lt;allo..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (32,642,622 samples, 4.38%)</title><rect x="19.4230%" y="4149" width="4.3794%" height="15" fill="rgb(234,105,35)" fg:x="144771462" fg:w="32642622"/><text x="19.6730%" y="4159.50">alloc..</text></g><g><title>alloc::slice::hack::to_vec (32,642,622 samples, 4.38%)</title><rect x="19.4230%" y="4133" width="4.3794%" height="15" fill="rgb(236,21,32)" fg:x="144771462" fg:w="32642622"/><text x="19.6730%" y="4143.50">alloc..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (32,642,622 samples, 4.38%)</title><rect x="19.4230%" y="4117" width="4.3794%" height="15" fill="rgb(228,109,6)" fg:x="144771462" fg:w="32642622"/><text x="19.6730%" y="4127.50">&lt;T as..</text></g><g><title>&lt;css_bitvector_compiler::HtmlNode as core::clone::Clone&gt;::clone (32,642,622 samples, 4.38%)</title><rect x="19.4230%" y="4101" width="4.3794%" height="15" fill="rgb(229,215,31)" fg:x="144771462" fg:w="32642622"/><text x="19.6730%" y="4111.50">&lt;css_..</text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::clone::Clone&gt;::clone (2,543,339 samples, 0.34%)</title><rect x="23.4612%" y="4085" width="0.3412%" height="15" fill="rgb(221,52,54)" fg:x="174870745" fg:w="2543339"/><text x="23.7112%" y="4095.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::clone::Clone&gt;::clone (2,543,339 samples, 0.34%)</title><rect x="23.4612%" y="4069" width="0.3412%" height="15" fill="rgb(252,129,43)" fg:x="174870745" fg:w="2543339"/><text x="23.7112%" y="4079.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (2,543,339 samples, 0.34%)</title><rect x="23.4612%" y="4053" width="0.3412%" height="15" fill="rgb(248,183,27)" fg:x="174870745" fg:w="2543339"/><text x="23.7112%" y="4063.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (2,543,339 samples, 0.34%)</title><rect x="23.4612%" y="4037" width="0.3412%" height="15" fill="rgb(250,0,22)" fg:x="174870745" fg:w="2543339"/><text x="23.7112%" y="4047.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as hashbrown::raw::RawTableClone&gt;::clone_from_spec (2,543,339 samples, 0.34%)</title><rect x="23.4612%" y="4021" width="0.3412%" height="15" fill="rgb(213,166,10)" fg:x="174870745" fg:w="2543339"/><text x="23.7112%" y="4031.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (2,543,339 samples, 0.34%)</title><rect x="23.4612%" y="4005" width="0.3412%" height="15" fill="rgb(207,163,36)" fg:x="174870745" fg:w="2543339"/><text x="23.7112%" y="4015.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::copy_to_nonoverlapping (1,184,836 samples, 0.16%)</title><rect x="23.6434%" y="3989" width="0.1590%" height="15" fill="rgb(208,122,22)" fg:x="176229248" fg:w="1184836"/><text x="23.8934%" y="3999.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,184,836 samples, 0.16%)</title><rect x="23.6434%" y="3973" width="0.1590%" height="15" fill="rgb(207,104,49)" fg:x="176229248" fg:w="1184836"/><text x="23.8934%" y="3983.50"></text></g><g><title>[libc.so.6] (1,184,836 samples, 0.16%)</title><rect x="23.6434%" y="3957" width="0.1590%" height="15" fill="rgb(248,211,50)" fg:x="176229248" fg:w="1184836"/><text x="23.8934%" y="3967.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (2,603,175 samples, 0.35%)</title><rect x="23.8024%" y="4165" width="0.3492%" height="15" fill="rgb(217,13,45)" fg:x="177414084" fg:w="2603175"/><text x="24.0524%" y="4175.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2,603,175 samples, 0.35%)</title><rect x="23.8024%" y="4149" width="0.3492%" height="15" fill="rgb(211,216,49)" fg:x="177414084" fg:w="2603175"/><text x="24.0524%" y="4159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2,603,175 samples, 0.35%)</title><rect x="23.8024%" y="4133" width="0.3492%" height="15" fill="rgb(221,58,53)" fg:x="177414084" fg:w="2603175"/><text x="24.0524%" y="4143.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2,603,175 samples, 0.35%)</title><rect x="23.8024%" y="4117" width="0.3492%" height="15" fill="rgb(220,112,41)" fg:x="177414084" fg:w="2603175"/><text x="24.0524%" y="4127.50"></text></g><g><title>alloc::slice::hack::to_vec (2,603,175 samples, 0.35%)</title><rect x="23.8024%" y="4101" width="0.3492%" height="15" fill="rgb(236,38,28)" fg:x="177414084" fg:w="2603175"/><text x="24.0524%" y="4111.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2,603,175 samples, 0.35%)</title><rect x="23.8024%" y="4085" width="0.3492%" height="15" fill="rgb(227,195,22)" fg:x="177414084" fg:w="2603175"/><text x="24.0524%" y="4095.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2,603,175 samples, 0.35%)</title><rect x="23.8024%" y="4069" width="0.3492%" height="15" fill="rgb(214,55,33)" fg:x="177414084" fg:w="2603175"/><text x="24.0524%" y="4079.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2,603,175 samples, 0.35%)</title><rect x="23.8024%" y="4053" width="0.3492%" height="15" fill="rgb(248,80,13)" fg:x="177414084" fg:w="2603175"/><text x="24.0524%" y="4063.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (2,603,175 samples, 0.35%)</title><rect x="23.8024%" y="4037" width="0.3492%" height="15" fill="rgb(238,52,6)" fg:x="177414084" fg:w="2603175"/><text x="24.0524%" y="4047.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (2,603,175 samples, 0.35%)</title><rect x="23.8024%" y="4021" width="0.3492%" height="15" fill="rgb(224,198,47)" fg:x="177414084" fg:w="2603175"/><text x="24.0524%" y="4031.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2,603,175 samples, 0.35%)</title><rect x="23.8024%" y="4005" width="0.3492%" height="15" fill="rgb(233,171,20)" fg:x="177414084" fg:w="2603175"/><text x="24.0524%" y="4015.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2,603,175 samples, 0.35%)</title><rect x="23.8024%" y="3989" width="0.3492%" height="15" fill="rgb(241,30,25)" fg:x="177414084" fg:w="2603175"/><text x="24.0524%" y="3999.50"></text></g><g><title>alloc::alloc::alloc (2,603,175 samples, 0.35%)</title><rect x="23.8024%" y="3973" width="0.3492%" height="15" fill="rgb(207,171,38)" fg:x="177414084" fg:w="2603175"/><text x="24.0524%" y="3983.50"></text></g><g><title>malloc (2,603,175 samples, 0.35%)</title><rect x="23.8024%" y="3957" width="0.3492%" height="15" fill="rgb(234,70,1)" fg:x="177414084" fg:w="2603175"/><text x="24.0524%" y="3967.50"></text></g><g><title>[libc.so.6] (2,603,175 samples, 0.35%)</title><rect x="23.8024%" y="3941" width="0.3492%" height="15" fill="rgb(232,178,18)" fg:x="177414084" fg:w="2603175"/><text x="24.0524%" y="3951.50"></text></g><g><title>[libc.so.6] (1,345,413 samples, 0.18%)</title><rect x="23.9711%" y="3925" width="0.1805%" height="15" fill="rgb(241,78,40)" fg:x="178671846" fg:w="1345413"/><text x="24.2211%" y="3935.50"></text></g><g><title>&lt;css_bitvector_compiler::HtmlNode as core::clone::Clone&gt;::clone (40,198,547 samples, 5.39%)</title><rect x="18.9369%" y="4261" width="5.3932%" height="15" fill="rgb(222,35,25)" fg:x="141148844" fg:w="40198547"/><text x="19.1869%" y="4271.50">&lt;css_bi..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (40,198,547 samples, 5.39%)</title><rect x="18.9369%" y="4245" width="5.3932%" height="15" fill="rgb(207,92,16)" fg:x="141148844" fg:w="40198547"/><text x="19.1869%" y="4255.50">&lt;alloc:..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (40,198,547 samples, 5.39%)</title><rect x="18.9369%" y="4229" width="5.3932%" height="15" fill="rgb(216,59,51)" fg:x="141148844" fg:w="40198547"/><text x="19.1869%" y="4239.50">alloc::..</text></g><g><title>alloc::slice::hack::to_vec (40,198,547 samples, 5.39%)</title><rect x="18.9369%" y="4213" width="5.3932%" height="15" fill="rgb(213,80,28)" fg:x="141148844" fg:w="40198547"/><text x="19.1869%" y="4223.50">alloc::..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (40,198,547 samples, 5.39%)</title><rect x="18.9369%" y="4197" width="5.3932%" height="15" fill="rgb(220,93,7)" fg:x="141148844" fg:w="40198547"/><text x="19.1869%" y="4207.50">&lt;T as a..</text></g><g><title>&lt;css_bitvector_compiler::HtmlNode as core::clone::Clone&gt;::clone (40,198,547 samples, 5.39%)</title><rect x="18.9369%" y="4181" width="5.3932%" height="15" fill="rgb(225,24,44)" fg:x="141148844" fg:w="40198547"/><text x="19.1869%" y="4191.50">&lt;css_bi..</text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::clone::Clone&gt;::clone (1,330,132 samples, 0.18%)</title><rect x="24.1516%" y="4165" width="0.1785%" height="15" fill="rgb(243,74,40)" fg:x="180017259" fg:w="1330132"/><text x="24.4016%" y="4175.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::clone::Clone&gt;::clone (1,330,132 samples, 0.18%)</title><rect x="24.1516%" y="4149" width="0.1785%" height="15" fill="rgb(228,39,7)" fg:x="180017259" fg:w="1330132"/><text x="24.4016%" y="4159.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (1,330,132 samples, 0.18%)</title><rect x="24.1516%" y="4133" width="0.1785%" height="15" fill="rgb(227,79,8)" fg:x="180017259" fg:w="1330132"/><text x="24.4016%" y="4143.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,330,132 samples, 0.18%)</title><rect x="24.1516%" y="4117" width="0.1785%" height="15" fill="rgb(236,58,11)" fg:x="180017259" fg:w="1330132"/><text x="24.4016%" y="4127.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as hashbrown::raw::RawTableClone&gt;::clone_from_spec (1,330,132 samples, 0.18%)</title><rect x="24.1516%" y="4101" width="0.1785%" height="15" fill="rgb(249,63,35)" fg:x="180017259" fg:w="1330132"/><text x="24.4016%" y="4111.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (1,330,132 samples, 0.18%)</title><rect x="24.1516%" y="4085" width="0.1785%" height="15" fill="rgb(252,114,16)" fg:x="180017259" fg:w="1330132"/><text x="24.4016%" y="4095.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::copy_to_nonoverlapping (1,330,132 samples, 0.18%)</title><rect x="24.1516%" y="4069" width="0.1785%" height="15" fill="rgb(254,151,24)" fg:x="180017259" fg:w="1330132"/><text x="24.4016%" y="4079.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,330,132 samples, 0.18%)</title><rect x="24.1516%" y="4053" width="0.1785%" height="15" fill="rgb(253,54,39)" fg:x="180017259" fg:w="1330132"/><text x="24.4016%" y="4063.50"></text></g><g><title>[libc.so.6] (1,330,132 samples, 0.18%)</title><rect x="24.1516%" y="4037" width="0.1785%" height="15" fill="rgb(243,25,45)" fg:x="180017259" fg:w="1330132"/><text x="24.4016%" y="4047.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (41,151,150 samples, 5.52%)</title><rect x="18.9369%" y="4325" width="5.5210%" height="15" fill="rgb(234,134,9)" fg:x="141148844" fg:w="41151150"/><text x="19.1869%" y="4335.50">&lt;alloc:..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (41,151,150 samples, 5.52%)</title><rect x="18.9369%" y="4309" width="5.5210%" height="15" fill="rgb(227,166,31)" fg:x="141148844" fg:w="41151150"/><text x="19.1869%" y="4319.50">alloc::..</text></g><g><title>alloc::slice::hack::to_vec (41,151,150 samples, 5.52%)</title><rect x="18.9369%" y="4293" width="5.5210%" height="15" fill="rgb(245,143,41)" fg:x="141148844" fg:w="41151150"/><text x="19.1869%" y="4303.50">alloc::..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (41,151,150 samples, 5.52%)</title><rect x="18.9369%" y="4277" width="5.5210%" height="15" fill="rgb(238,181,32)" fg:x="141148844" fg:w="41151150"/><text x="19.1869%" y="4287.50">&lt;T as a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (952,603 samples, 0.13%)</title><rect x="24.3301%" y="4261" width="0.1278%" height="15" fill="rgb(224,113,18)" fg:x="181347391" fg:w="952603"/><text x="24.5801%" y="4271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (952,603 samples, 0.13%)</title><rect x="24.3301%" y="4245" width="0.1278%" height="15" fill="rgb(240,229,28)" fg:x="181347391" fg:w="952603"/><text x="24.5801%" y="4255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (952,603 samples, 0.13%)</title><rect x="24.3301%" y="4229" width="0.1278%" height="15" fill="rgb(250,185,3)" fg:x="181347391" fg:w="952603"/><text x="24.5801%" y="4239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (952,603 samples, 0.13%)</title><rect x="24.3301%" y="4213" width="0.1278%" height="15" fill="rgb(212,59,25)" fg:x="181347391" fg:w="952603"/><text x="24.5801%" y="4223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (952,603 samples, 0.13%)</title><rect x="24.3301%" y="4197" width="0.1278%" height="15" fill="rgb(221,87,20)" fg:x="181347391" fg:w="952603"/><text x="24.5801%" y="4207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (952,603 samples, 0.13%)</title><rect x="24.3301%" y="4181" width="0.1278%" height="15" fill="rgb(213,74,28)" fg:x="181347391" fg:w="952603"/><text x="24.5801%" y="4191.50"></text></g><g><title>alloc::alloc::alloc (952,603 samples, 0.13%)</title><rect x="24.3301%" y="4165" width="0.1278%" height="15" fill="rgb(224,132,34)" fg:x="181347391" fg:w="952603"/><text x="24.5801%" y="4175.50"></text></g><g><title>malloc (952,603 samples, 0.13%)</title><rect x="24.3301%" y="4149" width="0.1278%" height="15" fill="rgb(222,101,24)" fg:x="181347391" fg:w="952603"/><text x="24.5801%" y="4159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (42,437,659 samples, 5.69%)</title><rect x="18.9369%" y="4405" width="5.6936%" height="15" fill="rgb(254,142,4)" fg:x="141148844" fg:w="42437659"/><text x="19.1869%" y="4415.50">&lt;alloc:..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (42,437,659 samples, 5.69%)</title><rect x="18.9369%" y="4389" width="5.6936%" height="15" fill="rgb(230,229,49)" fg:x="141148844" fg:w="42437659"/><text x="19.1869%" y="4399.50">alloc::..</text></g><g><title>alloc::slice::hack::to_vec (42,437,659 samples, 5.69%)</title><rect x="18.9369%" y="4373" width="5.6936%" height="15" fill="rgb(238,70,47)" fg:x="141148844" fg:w="42437659"/><text x="19.1869%" y="4383.50">alloc::..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (42,437,659 samples, 5.69%)</title><rect x="18.9369%" y="4357" width="5.6936%" height="15" fill="rgb(231,160,17)" fg:x="141148844" fg:w="42437659"/><text x="19.1869%" y="4367.50">&lt;T as a..</text></g><g><title>&lt;css_bitvector_compiler::HtmlNode as core::clone::Clone&gt;::clone (42,437,659 samples, 5.69%)</title><rect x="18.9369%" y="4341" width="5.6936%" height="15" fill="rgb(218,68,53)" fg:x="141148844" fg:w="42437659"/><text x="19.1869%" y="4351.50">&lt;css_bi..</text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (1,286,509 samples, 0.17%)</title><rect x="24.4579%" y="4325" width="0.1726%" height="15" fill="rgb(236,111,10)" fg:x="182299994" fg:w="1286509"/><text x="24.7079%" y="4335.50"></text></g><g><title>malloc (1,286,509 samples, 0.17%)</title><rect x="24.4579%" y="4309" width="0.1726%" height="15" fill="rgb(224,34,41)" fg:x="182299994" fg:w="1286509"/><text x="24.7079%" y="4319.50"></text></g><g><title>&lt;css_bitvector_compiler::HtmlNode as core::clone::Clone&gt;::clone (44,994,954 samples, 6.04%)</title><rect x="18.7700%" y="4581" width="6.0367%" height="15" fill="rgb(241,118,19)" fg:x="139904362" fg:w="44994954"/><text x="19.0200%" y="4591.50">&lt;css_bit..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (43,750,472 samples, 5.87%)</title><rect x="18.9369%" y="4565" width="5.8697%" height="15" fill="rgb(238,129,25)" fg:x="141148844" fg:w="43750472"/><text x="19.1869%" y="4575.50">&lt;alloc:..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (43,750,472 samples, 5.87%)</title><rect x="18.9369%" y="4549" width="5.8697%" height="15" fill="rgb(238,22,31)" fg:x="141148844" fg:w="43750472"/><text x="19.1869%" y="4559.50">alloc::..</text></g><g><title>alloc::slice::hack::to_vec (43,750,472 samples, 5.87%)</title><rect x="18.9369%" y="4533" width="5.8697%" height="15" fill="rgb(222,174,48)" fg:x="141148844" fg:w="43750472"/><text x="19.1869%" y="4543.50">alloc::..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (43,750,472 samples, 5.87%)</title><rect x="18.9369%" y="4517" width="5.8697%" height="15" fill="rgb(206,152,40)" fg:x="141148844" fg:w="43750472"/><text x="19.1869%" y="4527.50">&lt;T as a..</text></g><g><title>&lt;css_bitvector_compiler::HtmlNode as core::clone::Clone&gt;::clone (43,750,472 samples, 5.87%)</title><rect x="18.9369%" y="4501" width="5.8697%" height="15" fill="rgb(218,99,54)" fg:x="141148844" fg:w="43750472"/><text x="19.1869%" y="4511.50">&lt;css_bi..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (43,750,472 samples, 5.87%)</title><rect x="18.9369%" y="4485" width="5.8697%" height="15" fill="rgb(220,174,26)" fg:x="141148844" fg:w="43750472"/><text x="19.1869%" y="4495.50">&lt;alloc:..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (43,750,472 samples, 5.87%)</title><rect x="18.9369%" y="4469" width="5.8697%" height="15" fill="rgb(245,116,9)" fg:x="141148844" fg:w="43750472"/><text x="19.1869%" y="4479.50">alloc::..</text></g><g><title>alloc::slice::hack::to_vec (43,750,472 samples, 5.87%)</title><rect x="18.9369%" y="4453" width="5.8697%" height="15" fill="rgb(209,72,35)" fg:x="141148844" fg:w="43750472"/><text x="19.1869%" y="4463.50">alloc::..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (43,750,472 samples, 5.87%)</title><rect x="18.9369%" y="4437" width="5.8697%" height="15" fill="rgb(226,126,21)" fg:x="141148844" fg:w="43750472"/><text x="19.1869%" y="4447.50">&lt;T as a..</text></g><g><title>&lt;css_bitvector_compiler::HtmlNode as core::clone::Clone&gt;::clone (43,750,472 samples, 5.87%)</title><rect x="18.9369%" y="4421" width="5.8697%" height="15" fill="rgb(227,192,1)" fg:x="141148844" fg:w="43750472"/><text x="19.1869%" y="4431.50">&lt;css_bi..</text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (1,312,813 samples, 0.18%)</title><rect x="24.6305%" y="4405" width="0.1761%" height="15" fill="rgb(237,180,29)" fg:x="183586503" fg:w="1312813"/><text x="24.8805%" y="4415.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1,312,813 samples, 0.18%)</title><rect x="24.6305%" y="4389" width="0.1761%" height="15" fill="rgb(230,197,35)" fg:x="183586503" fg:w="1312813"/><text x="24.8805%" y="4399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,312,813 samples, 0.18%)</title><rect x="24.6305%" y="4373" width="0.1761%" height="15" fill="rgb(246,193,31)" fg:x="183586503" fg:w="1312813"/><text x="24.8805%" y="4383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,312,813 samples, 0.18%)</title><rect x="24.6305%" y="4357" width="0.1761%" height="15" fill="rgb(241,36,4)" fg:x="183586503" fg:w="1312813"/><text x="24.8805%" y="4367.50"></text></g><g><title>alloc::slice::hack::to_vec (1,312,813 samples, 0.18%)</title><rect x="24.6305%" y="4341" width="0.1761%" height="15" fill="rgb(241,130,17)" fg:x="183586503" fg:w="1312813"/><text x="24.8805%" y="4351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1,312,813 samples, 0.18%)</title><rect x="24.6305%" y="4325" width="0.1761%" height="15" fill="rgb(206,137,32)" fg:x="183586503" fg:w="1312813"/><text x="24.8805%" y="4335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,312,813 samples, 0.18%)</title><rect x="24.6305%" y="4309" width="0.1761%" height="15" fill="rgb(237,228,51)" fg:x="183586503" fg:w="1312813"/><text x="24.8805%" y="4319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,312,813 samples, 0.18%)</title><rect x="24.6305%" y="4293" width="0.1761%" height="15" fill="rgb(243,6,42)" fg:x="183586503" fg:w="1312813"/><text x="24.8805%" y="4303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (1,312,813 samples, 0.18%)</title><rect x="24.6305%" y="4277" width="0.1761%" height="15" fill="rgb(251,74,28)" fg:x="183586503" fg:w="1312813"/><text x="24.8805%" y="4287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1,312,813 samples, 0.18%)</title><rect x="24.6305%" y="4261" width="0.1761%" height="15" fill="rgb(218,20,49)" fg:x="183586503" fg:w="1312813"/><text x="24.8805%" y="4271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,312,813 samples, 0.18%)</title><rect x="24.6305%" y="4245" width="0.1761%" height="15" fill="rgb(238,28,14)" fg:x="183586503" fg:w="1312813"/><text x="24.8805%" y="4255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,312,813 samples, 0.18%)</title><rect x="24.6305%" y="4229" width="0.1761%" height="15" fill="rgb(229,40,46)" fg:x="183586503" fg:w="1312813"/><text x="24.8805%" y="4239.50"></text></g><g><title>alloc::alloc::alloc (1,312,813 samples, 0.18%)</title><rect x="24.6305%" y="4213" width="0.1761%" height="15" fill="rgb(244,195,20)" fg:x="183586503" fg:w="1312813"/><text x="24.8805%" y="4223.50"></text></g><g><title>malloc (1,312,813 samples, 0.18%)</title><rect x="24.6305%" y="4197" width="0.1761%" height="15" fill="rgb(253,56,35)" fg:x="183586503" fg:w="1312813"/><text x="24.8805%" y="4207.50"></text></g><g><title>[libc.so.6] (1,312,813 samples, 0.18%)</title><rect x="24.6305%" y="4181" width="0.1761%" height="15" fill="rgb(210,149,44)" fg:x="183586503" fg:w="1312813"/><text x="24.8805%" y="4191.50"></text></g><g><title>&lt;css_bitvector_compiler::HtmlNode as core::clone::Clone&gt;::clone (49,842,766 samples, 6.69%)</title><rect x="18.7700%" y="4821" width="6.6870%" height="15" fill="rgb(240,135,12)" fg:x="139904362" fg:w="49842766"/><text x="19.0200%" y="4831.50">&lt;css_bitv..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (49,842,766 samples, 6.69%)</title><rect x="18.7700%" y="4805" width="6.6870%" height="15" fill="rgb(251,24,50)" fg:x="139904362" fg:w="49842766"/><text x="19.0200%" y="4815.50">&lt;alloc::v..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (49,842,766 samples, 6.69%)</title><rect x="18.7700%" y="4789" width="6.6870%" height="15" fill="rgb(243,200,47)" fg:x="139904362" fg:w="49842766"/><text x="19.0200%" y="4799.50">alloc::sl..</text></g><g><title>alloc::slice::hack::to_vec (49,842,766 samples, 6.69%)</title><rect x="18.7700%" y="4773" width="6.6870%" height="15" fill="rgb(224,166,26)" fg:x="139904362" fg:w="49842766"/><text x="19.0200%" y="4783.50">alloc::sl..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (49,842,766 samples, 6.69%)</title><rect x="18.7700%" y="4757" width="6.6870%" height="15" fill="rgb(233,0,47)" fg:x="139904362" fg:w="49842766"/><text x="19.0200%" y="4767.50">&lt;T as all..</text></g><g><title>&lt;css_bitvector_compiler::HtmlNode as core::clone::Clone&gt;::clone (49,842,766 samples, 6.69%)</title><rect x="18.7700%" y="4741" width="6.6870%" height="15" fill="rgb(253,80,5)" fg:x="139904362" fg:w="49842766"/><text x="19.0200%" y="4751.50">&lt;css_bitv..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (49,842,766 samples, 6.69%)</title><rect x="18.7700%" y="4725" width="6.6870%" height="15" fill="rgb(214,133,25)" fg:x="139904362" fg:w="49842766"/><text x="19.0200%" y="4735.50">&lt;alloc::v..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (49,842,766 samples, 6.69%)</title><rect x="18.7700%" y="4709" width="6.6870%" height="15" fill="rgb(209,27,14)" fg:x="139904362" fg:w="49842766"/><text x="19.0200%" y="4719.50">alloc::sl..</text></g><g><title>alloc::slice::hack::to_vec (49,842,766 samples, 6.69%)</title><rect x="18.7700%" y="4693" width="6.6870%" height="15" fill="rgb(219,102,51)" fg:x="139904362" fg:w="49842766"/><text x="19.0200%" y="4703.50">alloc::sl..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (49,842,766 samples, 6.69%)</title><rect x="18.7700%" y="4677" width="6.6870%" height="15" fill="rgb(237,18,16)" fg:x="139904362" fg:w="49842766"/><text x="19.0200%" y="4687.50">&lt;T as all..</text></g><g><title>&lt;css_bitvector_compiler::HtmlNode as core::clone::Clone&gt;::clone (49,842,766 samples, 6.69%)</title><rect x="18.7700%" y="4661" width="6.6870%" height="15" fill="rgb(241,85,17)" fg:x="139904362" fg:w="49842766"/><text x="19.0200%" y="4671.50">&lt;css_bitv..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (49,842,766 samples, 6.69%)</title><rect x="18.7700%" y="4645" width="6.6870%" height="15" fill="rgb(236,90,42)" fg:x="139904362" fg:w="49842766"/><text x="19.0200%" y="4655.50">&lt;alloc::v..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (49,842,766 samples, 6.69%)</title><rect x="18.7700%" y="4629" width="6.6870%" height="15" fill="rgb(249,57,21)" fg:x="139904362" fg:w="49842766"/><text x="19.0200%" y="4639.50">alloc::sl..</text></g><g><title>alloc::slice::hack::to_vec (49,842,766 samples, 6.69%)</title><rect x="18.7700%" y="4613" width="6.6870%" height="15" fill="rgb(243,12,36)" fg:x="139904362" fg:w="49842766"/><text x="19.0200%" y="4623.50">alloc::sl..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (49,842,766 samples, 6.69%)</title><rect x="18.7700%" y="4597" width="6.6870%" height="15" fill="rgb(253,128,47)" fg:x="139904362" fg:w="49842766"/><text x="19.0200%" y="4607.50">&lt;T as all..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (4,847,812 samples, 0.65%)</title><rect x="24.8066%" y="4581" width="0.6504%" height="15" fill="rgb(207,33,20)" fg:x="184899316" fg:w="4847812"/><text x="25.0566%" y="4591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4,847,812 samples, 0.65%)</title><rect x="24.8066%" y="4565" width="0.6504%" height="15" fill="rgb(233,215,35)" fg:x="184899316" fg:w="4847812"/><text x="25.0566%" y="4575.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (4,847,812 samples, 0.65%)</title><rect x="24.8066%" y="4549" width="0.6504%" height="15" fill="rgb(249,188,52)" fg:x="184899316" fg:w="4847812"/><text x="25.0566%" y="4559.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (4,847,812 samples, 0.65%)</title><rect x="24.8066%" y="4533" width="0.6504%" height="15" fill="rgb(225,12,32)" fg:x="184899316" fg:w="4847812"/><text x="25.0566%" y="4543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4,847,812 samples, 0.65%)</title><rect x="24.8066%" y="4517" width="0.6504%" height="15" fill="rgb(247,98,14)" fg:x="184899316" fg:w="4847812"/><text x="25.0566%" y="4527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4,847,812 samples, 0.65%)</title><rect x="24.8066%" y="4501" width="0.6504%" height="15" fill="rgb(247,219,48)" fg:x="184899316" fg:w="4847812"/><text x="25.0566%" y="4511.50"></text></g><g><title>alloc::alloc::alloc (4,847,812 samples, 0.65%)</title><rect x="24.8066%" y="4485" width="0.6504%" height="15" fill="rgb(253,60,48)" fg:x="184899316" fg:w="4847812"/><text x="25.0566%" y="4495.50"></text></g><g><title>malloc (4,847,812 samples, 0.65%)</title><rect x="24.8066%" y="4469" width="0.6504%" height="15" fill="rgb(245,15,52)" fg:x="184899316" fg:w="4847812"/><text x="25.0566%" y="4479.50"></text></g><g><title>[libc.so.6] (4,847,812 samples, 0.65%)</title><rect x="24.8066%" y="4453" width="0.6504%" height="15" fill="rgb(220,133,28)" fg:x="184899316" fg:w="4847812"/><text x="25.0566%" y="4463.50"></text></g><g><title>[libc.so.6] (4,847,812 samples, 0.65%)</title><rect x="24.8066%" y="4437" width="0.6504%" height="15" fill="rgb(217,180,4)" fg:x="184899316" fg:w="4847812"/><text x="25.0566%" y="4447.50"></text></g><g><title>[libc.so.6] (1,177,524 samples, 0.16%)</title><rect x="25.2990%" y="4421" width="0.1580%" height="15" fill="rgb(251,24,1)" fg:x="188569604" fg:w="1177524"/><text x="25.5490%" y="4431.50"></text></g><g><title>cfree (1,156,383 samples, 0.16%)</title><rect x="25.4570%" y="4181" width="0.1551%" height="15" fill="rgb(212,185,49)" fg:x="189747128" fg:w="1156383"/><text x="25.7070%" y="4191.50"></text></g><g><title>[libc.so.6] (1,156,383 samples, 0.16%)</title><rect x="25.4570%" y="4165" width="0.1551%" height="15" fill="rgb(215,175,22)" fg:x="189747128" fg:w="1156383"/><text x="25.7070%" y="4175.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1,307,068 samples, 0.18%)</title><rect x="25.6122%" y="4165" width="0.1754%" height="15" fill="rgb(250,205,14)" fg:x="190903511" fg:w="1307068"/><text x="25.8622%" y="4175.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1,307,068 samples, 0.18%)</title><rect x="25.6122%" y="4149" width="0.1754%" height="15" fill="rgb(225,211,22)" fg:x="190903511" fg:w="1307068"/><text x="25.8622%" y="4159.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1,307,068 samples, 0.18%)</title><rect x="25.6122%" y="4133" width="0.1754%" height="15" fill="rgb(251,179,42)" fg:x="190903511" fg:w="1307068"/><text x="25.8622%" y="4143.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,307,068 samples, 0.18%)</title><rect x="25.6122%" y="4117" width="0.1754%" height="15" fill="rgb(208,216,51)" fg:x="190903511" fg:w="1307068"/><text x="25.8622%" y="4127.50"></text></g><g><title>cfree (1,297,837 samples, 0.17%)</title><rect x="25.7875%" y="4117" width="0.1741%" height="15" fill="rgb(235,36,11)" fg:x="192210579" fg:w="1297837"/><text x="26.0375%" y="4127.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;css_bitvector_compiler::HtmlNode&gt;&gt; (582,250 samples, 0.08%)</title><rect x="25.9616%" y="3909" width="0.0781%" height="15" fill="rgb(213,189,28)" fg:x="193508416" fg:w="582250"/><text x="26.2116%" y="3919.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (582,250 samples, 0.08%)</title><rect x="25.9616%" y="3893" width="0.0781%" height="15" fill="rgb(227,203,42)" fg:x="193508416" fg:w="582250"/><text x="26.2116%" y="3903.50"></text></g><g><title>core::ptr::drop_in_place&lt;[css_bitvector_compiler::HtmlNode]&gt; (582,250 samples, 0.08%)</title><rect x="25.9616%" y="3877" width="0.0781%" height="15" fill="rgb(244,72,36)" fg:x="193508416" fg:w="582250"/><text x="26.2116%" y="3887.50"></text></g><g><title>core::ptr::drop_in_place&lt;css_bitvector_compiler::HtmlNode&gt; (582,250 samples, 0.08%)</title><rect x="25.9616%" y="3861" width="0.0781%" height="15" fill="rgb(213,53,17)" fg:x="193508416" fg:w="582250"/><text x="26.2116%" y="3871.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::set::HashSet&lt;alloc::string::String&gt;&gt; (582,250 samples, 0.08%)</title><rect x="25.9616%" y="3845" width="0.0781%" height="15" fill="rgb(207,167,3)" fg:x="193508416" fg:w="582250"/><text x="26.2116%" y="3855.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::set::HashSet&lt;alloc::string::String,std::hash::random::RandomState&gt;&gt; (582,250 samples, 0.08%)</title><rect x="25.9616%" y="3829" width="0.0781%" height="15" fill="rgb(216,98,30)" fg:x="193508416" fg:w="582250"/><text x="26.2116%" y="3839.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,(),std::hash::random::RandomState&gt;&gt; (582,250 samples, 0.08%)</title><rect x="25.9616%" y="3813" width="0.0781%" height="15" fill="rgb(236,123,15)" fg:x="193508416" fg:w="582250"/><text x="26.2116%" y="3823.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,())&gt;&gt; (582,250 samples, 0.08%)</title><rect x="25.9616%" y="3797" width="0.0781%" height="15" fill="rgb(248,81,50)" fg:x="193508416" fg:w="582250"/><text x="26.2116%" y="3807.50"></text></g><g><title>cfree (582,250 samples, 0.08%)</title><rect x="25.9616%" y="3781" width="0.0781%" height="15" fill="rgb(214,120,4)" fg:x="193508416" fg:w="582250"/><text x="26.2116%" y="3791.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;css_bitvector_compiler::HtmlNode&gt;&gt; (1,061,334 samples, 0.14%)</title><rect x="25.9616%" y="3973" width="0.1424%" height="15" fill="rgb(208,179,34)" fg:x="193508416" fg:w="1061334"/><text x="26.2116%" y="3983.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,061,334 samples, 0.14%)</title><rect x="25.9616%" y="3957" width="0.1424%" height="15" fill="rgb(227,140,7)" fg:x="193508416" fg:w="1061334"/><text x="26.2116%" y="3967.50"></text></g><g><title>core::ptr::drop_in_place&lt;[css_bitvector_compiler::HtmlNode]&gt; (1,061,334 samples, 0.14%)</title><rect x="25.9616%" y="3941" width="0.1424%" height="15" fill="rgb(214,22,6)" fg:x="193508416" fg:w="1061334"/><text x="26.2116%" y="3951.50"></text></g><g><title>core::ptr::drop_in_place&lt;css_bitvector_compiler::HtmlNode&gt; (1,061,334 samples, 0.14%)</title><rect x="25.9616%" y="3925" width="0.1424%" height="15" fill="rgb(207,137,27)" fg:x="193508416" fg:w="1061334"/><text x="26.2116%" y="3935.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::string::String&gt;&gt; (479,084 samples, 0.06%)</title><rect x="26.0398%" y="3909" width="0.0643%" height="15" fill="rgb(210,8,46)" fg:x="194090666" fg:w="479084"/><text x="26.2898%" y="3919.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (479,084 samples, 0.06%)</title><rect x="26.0398%" y="3893" width="0.0643%" height="15" fill="rgb(240,16,54)" fg:x="194090666" fg:w="479084"/><text x="26.2898%" y="3903.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (479,084 samples, 0.06%)</title><rect x="26.0398%" y="3877" width="0.0643%" height="15" fill="rgb(211,209,29)" fg:x="194090666" fg:w="479084"/><text x="26.2898%" y="3887.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (479,084 samples, 0.06%)</title><rect x="26.0398%" y="3861" width="0.0643%" height="15" fill="rgb(226,228,24)" fg:x="194090666" fg:w="479084"/><text x="26.2898%" y="3871.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (479,084 samples, 0.06%)</title><rect x="26.0398%" y="3845" width="0.0643%" height="15" fill="rgb(222,84,9)" fg:x="194090666" fg:w="479084"/><text x="26.2898%" y="3855.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (479,084 samples, 0.06%)</title><rect x="26.0398%" y="3829" width="0.0643%" height="15" fill="rgb(234,203,30)" fg:x="194090666" fg:w="479084"/><text x="26.2898%" y="3839.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (479,084 samples, 0.06%)</title><rect x="26.0398%" y="3813" width="0.0643%" height="15" fill="rgb(238,109,14)" fg:x="194090666" fg:w="479084"/><text x="26.2898%" y="3823.50"></text></g><g><title>alloc::alloc::dealloc (479,084 samples, 0.06%)</title><rect x="26.0398%" y="3797" width="0.0643%" height="15" fill="rgb(233,206,34)" fg:x="194090666" fg:w="479084"/><text x="26.2898%" y="3807.50"></text></g><g><title>cfree (479,084 samples, 0.06%)</title><rect x="26.0398%" y="3781" width="0.0643%" height="15" fill="rgb(220,167,47)" fg:x="194090666" fg:w="479084"/><text x="26.2898%" y="3791.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::string::String&gt;&gt; (1,334,051 samples, 0.18%)</title><rect x="26.1040%" y="3973" width="0.1790%" height="15" fill="rgb(238,105,10)" fg:x="194569750" fg:w="1334051"/><text x="26.3540%" y="3983.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1,334,051 samples, 0.18%)</title><rect x="26.1040%" y="3957" width="0.1790%" height="15" fill="rgb(213,227,17)" fg:x="194569750" fg:w="1334051"/><text x="26.3540%" y="3967.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1,334,051 samples, 0.18%)</title><rect x="26.1040%" y="3941" width="0.1790%" height="15" fill="rgb(217,132,38)" fg:x="194569750" fg:w="1334051"/><text x="26.3540%" y="3951.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1,334,051 samples, 0.18%)</title><rect x="26.1040%" y="3925" width="0.1790%" height="15" fill="rgb(242,146,4)" fg:x="194569750" fg:w="1334051"/><text x="26.3540%" y="3935.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,334,051 samples, 0.18%)</title><rect x="26.1040%" y="3909" width="0.1790%" height="15" fill="rgb(212,61,9)" fg:x="194569750" fg:w="1334051"/><text x="26.3540%" y="3919.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (1,334,051 samples, 0.18%)</title><rect x="26.1040%" y="3893" width="0.1790%" height="15" fill="rgb(247,126,22)" fg:x="194569750" fg:w="1334051"/><text x="26.3540%" y="3903.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1,334,051 samples, 0.18%)</title><rect x="26.1040%" y="3877" width="0.1790%" height="15" fill="rgb(220,196,2)" fg:x="194569750" fg:w="1334051"/><text x="26.3540%" y="3887.50"></text></g><g><title>alloc::alloc::dealloc (1,334,051 samples, 0.18%)</title><rect x="26.1040%" y="3861" width="0.1790%" height="15" fill="rgb(208,46,4)" fg:x="194569750" fg:w="1334051"/><text x="26.3540%" y="3871.50"></text></g><g><title>cfree (1,334,051 samples, 0.18%)</title><rect x="26.1040%" y="3845" width="0.1790%" height="15" fill="rgb(252,104,46)" fg:x="194569750" fg:w="1334051"/><text x="26.3540%" y="3855.50"></text></g><g><title>[libc.so.6] (1,334,051 samples, 0.18%)</title><rect x="26.1040%" y="3829" width="0.1790%" height="15" fill="rgb(237,152,48)" fg:x="194569750" fg:w="1334051"/><text x="26.3540%" y="3839.50"></text></g><g><title>core::ptr::drop_in_place&lt;css_bitvector_compiler::BitVector&gt; (1,296,116 samples, 0.17%)</title><rect x="26.2830%" y="3973" width="0.1739%" height="15" fill="rgb(221,59,37)" fg:x="195903801" fg:w="1296116"/><text x="26.5330%" y="3983.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1,296,116 samples, 0.17%)</title><rect x="26.2830%" y="3957" width="0.1739%" height="15" fill="rgb(209,202,51)" fg:x="195903801" fg:w="1296116"/><text x="26.5330%" y="3967.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1,296,116 samples, 0.17%)</title><rect x="26.2830%" y="3941" width="0.1739%" height="15" fill="rgb(228,81,30)" fg:x="195903801" fg:w="1296116"/><text x="26.5330%" y="3951.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,296,116 samples, 0.17%)</title><rect x="26.2830%" y="3925" width="0.1739%" height="15" fill="rgb(227,42,39)" fg:x="195903801" fg:w="1296116"/><text x="26.5330%" y="3935.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (1,296,116 samples, 0.17%)</title><rect x="26.2830%" y="3909" width="0.1739%" height="15" fill="rgb(221,26,2)" fg:x="195903801" fg:w="1296116"/><text x="26.5330%" y="3919.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1,296,116 samples, 0.17%)</title><rect x="26.2830%" y="3893" width="0.1739%" height="15" fill="rgb(254,61,31)" fg:x="195903801" fg:w="1296116"/><text x="26.5330%" y="3903.50"></text></g><g><title>alloc::alloc::dealloc (1,296,116 samples, 0.17%)</title><rect x="26.2830%" y="3877" width="0.1739%" height="15" fill="rgb(222,173,38)" fg:x="195903801" fg:w="1296116"/><text x="26.5330%" y="3887.50"></text></g><g><title>cfree (1,296,116 samples, 0.17%)</title><rect x="26.2830%" y="3861" width="0.1739%" height="15" fill="rgb(218,50,12)" fg:x="195903801" fg:w="1296116"/><text x="26.5330%" y="3871.50"></text></g><g><title>[libc.so.6] (1,296,116 samples, 0.17%)</title><rect x="26.2830%" y="3845" width="0.1739%" height="15" fill="rgb(223,88,40)" fg:x="195903801" fg:w="1296116"/><text x="26.5330%" y="3855.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;css_bitvector_compiler::HtmlNode&gt;&gt; (4,861,693 samples, 0.65%)</title><rect x="25.9616%" y="4037" width="0.6523%" height="15" fill="rgb(237,54,19)" fg:x="193508416" fg:w="4861693"/><text x="26.2116%" y="4047.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4,861,693 samples, 0.65%)</title><rect x="25.9616%" y="4021" width="0.6523%" height="15" fill="rgb(251,129,25)" fg:x="193508416" fg:w="4861693"/><text x="26.2116%" y="4031.50"></text></g><g><title>core::ptr::drop_in_place&lt;[css_bitvector_compiler::HtmlNode]&gt; (4,861,693 samples, 0.65%)</title><rect x="25.9616%" y="4005" width="0.6523%" height="15" fill="rgb(238,97,19)" fg:x="193508416" fg:w="4861693"/><text x="26.2116%" y="4015.50"></text></g><g><title>core::ptr::drop_in_place&lt;css_bitvector_compiler::HtmlNode&gt; (4,861,693 samples, 0.65%)</title><rect x="25.9616%" y="3989" width="0.6523%" height="15" fill="rgb(240,169,18)" fg:x="193508416" fg:w="4861693"/><text x="26.2116%" y="3999.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::set::HashSet&lt;alloc::string::String&gt;&gt; (1,170,192 samples, 0.16%)</title><rect x="26.4569%" y="3973" width="0.1570%" height="15" fill="rgb(230,187,49)" fg:x="197199917" fg:w="1170192"/><text x="26.7069%" y="3983.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::set::HashSet&lt;alloc::string::String,std::hash::random::RandomState&gt;&gt; (1,170,192 samples, 0.16%)</title><rect x="26.4569%" y="3957" width="0.1570%" height="15" fill="rgb(209,44,26)" fg:x="197199917" fg:w="1170192"/><text x="26.7069%" y="3967.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,(),std::hash::random::RandomState&gt;&gt; (1,170,192 samples, 0.16%)</title><rect x="26.4569%" y="3941" width="0.1570%" height="15" fill="rgb(244,0,6)" fg:x="197199917" fg:w="1170192"/><text x="26.7069%" y="3951.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,())&gt;&gt; (1,170,192 samples, 0.16%)</title><rect x="26.4569%" y="3925" width="0.1570%" height="15" fill="rgb(248,18,21)" fg:x="197199917" fg:w="1170192"/><text x="26.7069%" y="3935.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,170,192 samples, 0.16%)</title><rect x="26.4569%" y="3909" width="0.1570%" height="15" fill="rgb(245,180,19)" fg:x="197199917" fg:w="1170192"/><text x="26.7069%" y="3919.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (1,170,192 samples, 0.16%)</title><rect x="26.4569%" y="3893" width="0.1570%" height="15" fill="rgb(252,118,36)" fg:x="197199917" fg:w="1170192"/><text x="26.7069%" y="3903.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (1,170,192 samples, 0.16%)</title><rect x="26.4569%" y="3877" width="0.1570%" height="15" fill="rgb(210,224,19)" fg:x="197199917" fg:w="1170192"/><text x="26.7069%" y="3887.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (1,170,192 samples, 0.16%)</title><rect x="26.4569%" y="3861" width="0.1570%" height="15" fill="rgb(218,30,24)" fg:x="197199917" fg:w="1170192"/><text x="26.7069%" y="3871.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (1,170,192 samples, 0.16%)</title><rect x="26.4569%" y="3845" width="0.1570%" height="15" fill="rgb(219,75,50)" fg:x="197199917" fg:w="1170192"/><text x="26.7069%" y="3855.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,())&gt; (1,170,192 samples, 0.16%)</title><rect x="26.4569%" y="3829" width="0.1570%" height="15" fill="rgb(234,72,50)" fg:x="197199917" fg:w="1170192"/><text x="26.7069%" y="3839.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1,170,192 samples, 0.16%)</title><rect x="26.4569%" y="3813" width="0.1570%" height="15" fill="rgb(219,100,48)" fg:x="197199917" fg:w="1170192"/><text x="26.7069%" y="3823.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1,170,192 samples, 0.16%)</title><rect x="26.4569%" y="3797" width="0.1570%" height="15" fill="rgb(253,5,41)" fg:x="197199917" fg:w="1170192"/><text x="26.7069%" y="3807.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1,170,192 samples, 0.16%)</title><rect x="26.4569%" y="3781" width="0.1570%" height="15" fill="rgb(247,181,11)" fg:x="197199917" fg:w="1170192"/><text x="26.7069%" y="3791.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,170,192 samples, 0.16%)</title><rect x="26.4569%" y="3765" width="0.1570%" height="15" fill="rgb(222,223,25)" fg:x="197199917" fg:w="1170192"/><text x="26.7069%" y="3775.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (1,170,192 samples, 0.16%)</title><rect x="26.4569%" y="3749" width="0.1570%" height="15" fill="rgb(214,198,28)" fg:x="197199917" fg:w="1170192"/><text x="26.7069%" y="3759.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1,170,192 samples, 0.16%)</title><rect x="26.4569%" y="3733" width="0.1570%" height="15" fill="rgb(230,46,43)" fg:x="197199917" fg:w="1170192"/><text x="26.7069%" y="3743.50"></text></g><g><title>alloc::alloc::dealloc (1,170,192 samples, 0.16%)</title><rect x="26.4569%" y="3717" width="0.1570%" height="15" fill="rgb(233,65,53)" fg:x="197199917" fg:w="1170192"/><text x="26.7069%" y="3727.50"></text></g><g><title>cfree (1,170,192 samples, 0.16%)</title><rect x="26.4569%" y="3701" width="0.1570%" height="15" fill="rgb(221,121,27)" fg:x="197199917" fg:w="1170192"/><text x="26.7069%" y="3711.50"></text></g><g><title>[libc.so.6] (1,170,192 samples, 0.16%)</title><rect x="26.4569%" y="3685" width="0.1570%" height="15" fill="rgb(247,70,47)" fg:x="197199917" fg:w="1170192"/><text x="26.7069%" y="3695.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;css_bitvector_compiler::HtmlNode&gt;&gt; (6,162,135 samples, 0.83%)</title><rect x="25.9616%" y="4101" width="0.8267%" height="15" fill="rgb(228,85,35)" fg:x="193508416" fg:w="6162135"/><text x="26.2116%" y="4111.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6,162,135 samples, 0.83%)</title><rect x="25.9616%" y="4085" width="0.8267%" height="15" fill="rgb(209,50,18)" fg:x="193508416" fg:w="6162135"/><text x="26.2116%" y="4095.50"></text></g><g><title>core::ptr::drop_in_place&lt;[css_bitvector_compiler::HtmlNode]&gt; (6,162,135 samples, 0.83%)</title><rect x="25.9616%" y="4069" width="0.8267%" height="15" fill="rgb(250,19,35)" fg:x="193508416" fg:w="6162135"/><text x="26.2116%" y="4079.50"></text></g><g><title>core::ptr::drop_in_place&lt;css_bitvector_compiler::HtmlNode&gt; (6,162,135 samples, 0.83%)</title><rect x="25.9616%" y="4053" width="0.8267%" height="15" fill="rgb(253,107,29)" fg:x="193508416" fg:w="6162135"/><text x="26.2116%" y="4063.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::set::HashSet&lt;alloc::string::String&gt;&gt; (1,300,442 samples, 0.17%)</title><rect x="26.6139%" y="4037" width="0.1745%" height="15" fill="rgb(252,179,29)" fg:x="198370109" fg:w="1300442"/><text x="26.8639%" y="4047.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::set::HashSet&lt;alloc::string::String,std::hash::random::RandomState&gt;&gt; (1,300,442 samples, 0.17%)</title><rect x="26.6139%" y="4021" width="0.1745%" height="15" fill="rgb(238,194,6)" fg:x="198370109" fg:w="1300442"/><text x="26.8639%" y="4031.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,(),std::hash::random::RandomState&gt;&gt; (1,300,442 samples, 0.17%)</title><rect x="26.6139%" y="4005" width="0.1745%" height="15" fill="rgb(238,164,29)" fg:x="198370109" fg:w="1300442"/><text x="26.8639%" y="4015.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,())&gt;&gt; (1,300,442 samples, 0.17%)</title><rect x="26.6139%" y="3989" width="0.1745%" height="15" fill="rgb(224,25,9)" fg:x="198370109" fg:w="1300442"/><text x="26.8639%" y="3999.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,300,442 samples, 0.17%)</title><rect x="26.6139%" y="3973" width="0.1745%" height="15" fill="rgb(244,153,23)" fg:x="198370109" fg:w="1300442"/><text x="26.8639%" y="3983.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (1,300,442 samples, 0.17%)</title><rect x="26.6139%" y="3957" width="0.1745%" height="15" fill="rgb(212,203,14)" fg:x="198370109" fg:w="1300442"/><text x="26.8639%" y="3967.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_empty_singleton (1,300,442 samples, 0.17%)</title><rect x="26.6139%" y="3941" width="0.1745%" height="15" fill="rgb(220,164,20)" fg:x="198370109" fg:w="1300442"/><text x="26.8639%" y="3951.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::vec::Vec&lt;css_bitvector_compiler::IState&gt;&gt;&gt; (1,183,098 samples, 0.16%)</title><rect x="26.7884%" y="4101" width="0.1587%" height="15" fill="rgb(222,203,48)" fg:x="199670551" fg:w="1183098"/><text x="27.0384%" y="4111.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;css_bitvector_compiler::IState&gt;&gt; (1,183,098 samples, 0.16%)</title><rect x="26.7884%" y="4085" width="0.1587%" height="15" fill="rgb(215,159,22)" fg:x="199670551" fg:w="1183098"/><text x="27.0384%" y="4095.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;css_bitvector_compiler::IState&gt;&gt; (1,183,098 samples, 0.16%)</title><rect x="26.7884%" y="4069" width="0.1587%" height="15" fill="rgb(216,183,47)" fg:x="199670551" fg:w="1183098"/><text x="27.0384%" y="4079.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,183,098 samples, 0.16%)</title><rect x="26.7884%" y="4053" width="0.1587%" height="15" fill="rgb(229,195,25)" fg:x="199670551" fg:w="1183098"/><text x="27.0384%" y="4063.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (1,183,098 samples, 0.16%)</title><rect x="26.7884%" y="4037" width="0.1587%" height="15" fill="rgb(224,132,51)" fg:x="199670551" fg:w="1183098"/><text x="27.0384%" y="4047.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1,183,098 samples, 0.16%)</title><rect x="26.7884%" y="4021" width="0.1587%" height="15" fill="rgb(240,63,7)" fg:x="199670551" fg:w="1183098"/><text x="27.0384%" y="4031.50"></text></g><g><title>alloc::alloc::dealloc (1,183,098 samples, 0.16%)</title><rect x="26.7884%" y="4005" width="0.1587%" height="15" fill="rgb(249,182,41)" fg:x="199670551" fg:w="1183098"/><text x="27.0384%" y="4015.50"></text></g><g><title>cfree (1,183,098 samples, 0.16%)</title><rect x="26.7884%" y="3989" width="0.1587%" height="15" fill="rgb(243,47,26)" fg:x="199670551" fg:w="1183098"/><text x="27.0384%" y="3999.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9,976,856 samples, 1.34%)</title><rect x="25.7875%" y="4149" width="1.3385%" height="15" fill="rgb(233,48,2)" fg:x="192210579" fg:w="9976856"/><text x="26.0375%" y="4159.50"></text></g><g><title>core::ptr::drop_in_place&lt;[css_bitvector_compiler::HtmlNode]&gt; (9,976,856 samples, 1.34%)</title><rect x="25.7875%" y="4133" width="1.3385%" height="15" fill="rgb(244,165,34)" fg:x="192210579" fg:w="9976856"/><text x="26.0375%" y="4143.50"></text></g><g><title>core::ptr::drop_in_place&lt;css_bitvector_compiler::HtmlNode&gt; (8,679,019 samples, 1.16%)</title><rect x="25.9616%" y="4117" width="1.1644%" height="15" fill="rgb(207,89,7)" fg:x="193508416" fg:w="8679019"/><text x="26.2116%" y="4127.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::set::HashSet&lt;alloc::string::String&gt;&gt; (1,333,786 samples, 0.18%)</title><rect x="26.9471%" y="4101" width="0.1789%" height="15" fill="rgb(244,117,36)" fg:x="200853649" fg:w="1333786"/><text x="27.1971%" y="4111.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::set::HashSet&lt;alloc::string::String,std::hash::random::RandomState&gt;&gt; (1,333,786 samples, 0.18%)</title><rect x="26.9471%" y="4085" width="0.1789%" height="15" fill="rgb(226,144,34)" fg:x="200853649" fg:w="1333786"/><text x="27.1971%" y="4095.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,(),std::hash::random::RandomState&gt;&gt; (1,333,786 samples, 0.18%)</title><rect x="26.9471%" y="4069" width="0.1789%" height="15" fill="rgb(213,23,19)" fg:x="200853649" fg:w="1333786"/><text x="27.1971%" y="4079.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,())&gt;&gt; (1,333,786 samples, 0.18%)</title><rect x="26.9471%" y="4053" width="0.1789%" height="15" fill="rgb(217,75,12)" fg:x="200853649" fg:w="1333786"/><text x="27.1971%" y="4063.50"></text></g><g><title>cfree (1,333,786 samples, 0.18%)</title><rect x="26.9471%" y="4037" width="0.1789%" height="15" fill="rgb(224,159,17)" fg:x="200853649" fg:w="1333786"/><text x="27.1971%" y="4047.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;css_bitvector_compiler::HtmlNode&gt;&gt; (13,604,114 samples, 1.83%)</title><rect x="25.4570%" y="4229" width="1.8252%" height="15" fill="rgb(217,118,1)" fg:x="189747128" fg:w="13604114"/><text x="25.7070%" y="4239.50">c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13,604,114 samples, 1.83%)</title><rect x="25.4570%" y="4213" width="1.8252%" height="15" fill="rgb(232,180,48)" fg:x="189747128" fg:w="13604114"/><text x="25.7070%" y="4223.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;[css_bitvector_compiler::HtmlNode]&gt; (13,604,114 samples, 1.83%)</title><rect x="25.4570%" y="4197" width="1.8252%" height="15" fill="rgb(230,27,33)" fg:x="189747128" fg:w="13604114"/><text x="25.7070%" y="4207.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;css_bitvector_compiler::HtmlNode&gt; (12,447,731 samples, 1.67%)</title><rect x="25.6122%" y="4181" width="1.6700%" height="15" fill="rgb(205,31,21)" fg:x="190903511" fg:w="12447731"/><text x="25.8622%" y="4191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;css_bitvector_compiler::HtmlNode&gt;&gt; (11,140,663 samples, 1.49%)</title><rect x="25.7875%" y="4165" width="1.4947%" height="15" fill="rgb(253,59,4)" fg:x="192210579" fg:w="11140663"/><text x="26.0375%" y="4175.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;css_bitvector_compiler::HtmlNode&gt;&gt; (1,163,807 samples, 0.16%)</title><rect x="27.1260%" y="4149" width="0.1561%" height="15" fill="rgb(224,201,9)" fg:x="202187435" fg:w="1163807"/><text x="27.3760%" y="4159.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,163,807 samples, 0.16%)</title><rect x="27.1260%" y="4133" width="0.1561%" height="15" fill="rgb(229,206,30)" fg:x="202187435" fg:w="1163807"/><text x="27.3760%" y="4143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (1,163,807 samples, 0.16%)</title><rect x="27.1260%" y="4117" width="0.1561%" height="15" fill="rgb(212,67,47)" fg:x="202187435" fg:w="1163807"/><text x="27.3760%" y="4127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1,163,807 samples, 0.16%)</title><rect x="27.1260%" y="4101" width="0.1561%" height="15" fill="rgb(211,96,50)" fg:x="202187435" fg:w="1163807"/><text x="27.3760%" y="4111.50"></text></g><g><title>alloc::alloc::dealloc (1,163,807 samples, 0.16%)</title><rect x="27.1260%" y="4085" width="0.1561%" height="15" fill="rgb(252,114,18)" fg:x="202187435" fg:w="1163807"/><text x="27.3760%" y="4095.50"></text></g><g><title>cfree (1,163,807 samples, 0.16%)</title><rect x="27.1260%" y="4069" width="0.1561%" height="15" fill="rgb(223,58,37)" fg:x="202187435" fg:w="1163807"/><text x="27.3760%" y="4079.50"></text></g><g><title>[libc.so.6] (1,163,807 samples, 0.16%)</title><rect x="27.1260%" y="4053" width="0.1561%" height="15" fill="rgb(237,70,4)" fg:x="202187435" fg:w="1163807"/><text x="27.3760%" y="4063.50"></text></g><g><title>[libc.so.6] (1,163,807 samples, 0.16%)</title><rect x="27.1260%" y="4037" width="0.1561%" height="15" fill="rgb(244,85,46)" fg:x="202187435" fg:w="1163807"/><text x="27.3760%" y="4047.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::string::String&gt;&gt; (1,326,257 samples, 0.18%)</title><rect x="27.2822%" y="4229" width="0.1779%" height="15" fill="rgb(223,39,52)" fg:x="203351242" fg:w="1326257"/><text x="27.5322%" y="4239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1,326,257 samples, 0.18%)</title><rect x="27.2822%" y="4213" width="0.1779%" height="15" fill="rgb(218,200,14)" fg:x="203351242" fg:w="1326257"/><text x="27.5322%" y="4223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1,326,257 samples, 0.18%)</title><rect x="27.2822%" y="4197" width="0.1779%" height="15" fill="rgb(208,171,16)" fg:x="203351242" fg:w="1326257"/><text x="27.5322%" y="4207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1,326,257 samples, 0.18%)</title><rect x="27.2822%" y="4181" width="0.1779%" height="15" fill="rgb(234,200,18)" fg:x="203351242" fg:w="1326257"/><text x="27.5322%" y="4191.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,326,257 samples, 0.18%)</title><rect x="27.2822%" y="4165" width="0.1779%" height="15" fill="rgb(228,45,11)" fg:x="203351242" fg:w="1326257"/><text x="27.5322%" y="4175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (1,326,257 samples, 0.18%)</title><rect x="27.2822%" y="4149" width="0.1779%" height="15" fill="rgb(237,182,11)" fg:x="203351242" fg:w="1326257"/><text x="27.5322%" y="4159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1,326,257 samples, 0.18%)</title><rect x="27.2822%" y="4133" width="0.1779%" height="15" fill="rgb(241,175,49)" fg:x="203351242" fg:w="1326257"/><text x="27.5322%" y="4143.50"></text></g><g><title>alloc::alloc::dealloc (1,326,257 samples, 0.18%)</title><rect x="27.2822%" y="4117" width="0.1779%" height="15" fill="rgb(247,38,35)" fg:x="203351242" fg:w="1326257"/><text x="27.5322%" y="4127.50"></text></g><g><title>cfree (1,326,257 samples, 0.18%)</title><rect x="27.2822%" y="4101" width="0.1779%" height="15" fill="rgb(228,39,49)" fg:x="203351242" fg:w="1326257"/><text x="27.5322%" y="4111.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (16,132,501 samples, 2.16%)</title><rect x="25.4570%" y="4277" width="2.1644%" height="15" fill="rgb(226,101,26)" fg:x="189747128" fg:w="16132501"/><text x="25.7070%" y="4287.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;[css_bitvector_compiler::HtmlNode]&gt; (16,132,501 samples, 2.16%)</title><rect x="25.4570%" y="4261" width="2.1644%" height="15" fill="rgb(206,141,19)" fg:x="189747128" fg:w="16132501"/><text x="25.7070%" y="4271.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;css_bitvector_compiler::HtmlNode&gt; (16,132,501 samples, 2.16%)</title><rect x="25.4570%" y="4245" width="2.1644%" height="15" fill="rgb(211,200,13)" fg:x="189747128" fg:w="16132501"/><text x="25.7070%" y="4255.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;css_bitvector_compiler::BitVector&gt; (1,202,130 samples, 0.16%)</title><rect x="27.4601%" y="4229" width="0.1613%" height="15" fill="rgb(241,121,6)" fg:x="204677499" fg:w="1202130"/><text x="27.7101%" y="4239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1,202,130 samples, 0.16%)</title><rect x="27.4601%" y="4213" width="0.1613%" height="15" fill="rgb(234,221,29)" fg:x="204677499" fg:w="1202130"/><text x="27.7101%" y="4223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1,202,130 samples, 0.16%)</title><rect x="27.4601%" y="4197" width="0.1613%" height="15" fill="rgb(229,136,5)" fg:x="204677499" fg:w="1202130"/><text x="27.7101%" y="4207.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,202,130 samples, 0.16%)</title><rect x="27.4601%" y="4181" width="0.1613%" height="15" fill="rgb(238,36,11)" fg:x="204677499" fg:w="1202130"/><text x="27.7101%" y="4191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (1,202,130 samples, 0.16%)</title><rect x="27.4601%" y="4165" width="0.1613%" height="15" fill="rgb(251,55,41)" fg:x="204677499" fg:w="1202130"/><text x="27.7101%" y="4175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1,202,130 samples, 0.16%)</title><rect x="27.4601%" y="4149" width="0.1613%" height="15" fill="rgb(242,34,40)" fg:x="204677499" fg:w="1202130"/><text x="27.7101%" y="4159.50"></text></g><g><title>alloc::alloc::dealloc (1,202,130 samples, 0.16%)</title><rect x="27.4601%" y="4133" width="0.1613%" height="15" fill="rgb(215,42,17)" fg:x="204677499" fg:w="1202130"/><text x="27.7101%" y="4143.50"></text></g><g><title>cfree (1,202,130 samples, 0.16%)</title><rect x="27.4601%" y="4117" width="0.1613%" height="15" fill="rgb(207,44,46)" fg:x="204677499" fg:w="1202130"/><text x="27.7101%" y="4127.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;css_bitvector_compiler::HtmlNode&gt;&gt; (20,066,867 samples, 2.69%)</title><rect x="25.4570%" y="4485" width="2.6922%" height="15" fill="rgb(211,206,28)" fg:x="189747128" fg:w="20066867"/><text x="25.7070%" y="4495.50">co..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (20,066,867 samples, 2.69%)</title><rect x="25.4570%" y="4469" width="2.6922%" height="15" fill="rgb(237,167,16)" fg:x="189747128" fg:w="20066867"/><text x="25.7070%" y="4479.50">&lt;a..</text></g><g><title>core::ptr::drop_in_place&lt;[css_bitvector_compiler::HtmlNode]&gt; (20,066,867 samples, 2.69%)</title><rect x="25.4570%" y="4453" width="2.6922%" height="15" fill="rgb(233,66,6)" fg:x="189747128" fg:w="20066867"/><text x="25.7070%" y="4463.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;css_bitvector_compiler::HtmlNode&gt; (20,066,867 samples, 2.69%)</title><rect x="25.4570%" y="4437" width="2.6922%" height="15" fill="rgb(246,123,29)" fg:x="189747128" fg:w="20066867"/><text x="25.7070%" y="4447.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;css_bitvector_compiler::HtmlNode&gt;&gt; (20,066,867 samples, 2.69%)</title><rect x="25.4570%" y="4421" width="2.6922%" height="15" fill="rgb(209,62,40)" fg:x="189747128" fg:w="20066867"/><text x="25.7070%" y="4431.50">co..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (20,066,867 samples, 2.69%)</title><rect x="25.4570%" y="4405" width="2.6922%" height="15" fill="rgb(218,4,25)" fg:x="189747128" fg:w="20066867"/><text x="25.7070%" y="4415.50">&lt;a..</text></g><g><title>core::ptr::drop_in_place&lt;[css_bitvector_compiler::HtmlNode]&gt; (20,066,867 samples, 2.69%)</title><rect x="25.4570%" y="4389" width="2.6922%" height="15" fill="rgb(253,91,49)" fg:x="189747128" fg:w="20066867"/><text x="25.7070%" y="4399.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;css_bitvector_compiler::HtmlNode&gt; (20,066,867 samples, 2.69%)</title><rect x="25.4570%" y="4373" width="2.6922%" height="15" fill="rgb(228,155,29)" fg:x="189747128" fg:w="20066867"/><text x="25.7070%" y="4383.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;css_bitvector_compiler::HtmlNode&gt;&gt; (20,066,867 samples, 2.69%)</title><rect x="25.4570%" y="4357" width="2.6922%" height="15" fill="rgb(243,57,37)" fg:x="189747128" fg:w="20066867"/><text x="25.7070%" y="4367.50">co..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (20,066,867 samples, 2.69%)</title><rect x="25.4570%" y="4341" width="2.6922%" height="15" fill="rgb(244,167,17)" fg:x="189747128" fg:w="20066867"/><text x="25.7070%" y="4351.50">&lt;a..</text></g><g><title>core::ptr::drop_in_place&lt;[css_bitvector_compiler::HtmlNode]&gt; (20,066,867 samples, 2.69%)</title><rect x="25.4570%" y="4325" width="2.6922%" height="15" fill="rgb(207,181,38)" fg:x="189747128" fg:w="20066867"/><text x="25.7070%" y="4335.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;css_bitvector_compiler::HtmlNode&gt; (20,066,867 samples, 2.69%)</title><rect x="25.4570%" y="4309" width="2.6922%" height="15" fill="rgb(211,8,23)" fg:x="189747128" fg:w="20066867"/><text x="25.7070%" y="4319.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;css_bitvector_compiler::HtmlNode&gt;&gt; (20,066,867 samples, 2.69%)</title><rect x="25.4570%" y="4293" width="2.6922%" height="15" fill="rgb(235,11,44)" fg:x="189747128" fg:w="20066867"/><text x="25.7070%" y="4303.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;css_bitvector_compiler::HtmlNode&gt;&gt; (3,934,366 samples, 0.53%)</title><rect x="27.6214%" y="4277" width="0.5278%" height="15" fill="rgb(248,18,52)" fg:x="205879629" fg:w="3934366"/><text x="27.8714%" y="4287.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,934,366 samples, 0.53%)</title><rect x="27.6214%" y="4261" width="0.5278%" height="15" fill="rgb(208,4,7)" fg:x="205879629" fg:w="3934366"/><text x="27.8714%" y="4271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (3,934,366 samples, 0.53%)</title><rect x="27.6214%" y="4245" width="0.5278%" height="15" fill="rgb(240,17,39)" fg:x="205879629" fg:w="3934366"/><text x="27.8714%" y="4255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3,934,366 samples, 0.53%)</title><rect x="27.6214%" y="4229" width="0.5278%" height="15" fill="rgb(207,170,3)" fg:x="205879629" fg:w="3934366"/><text x="27.8714%" y="4239.50"></text></g><g><title>alloc::alloc::dealloc (3,934,366 samples, 0.53%)</title><rect x="27.6214%" y="4213" width="0.5278%" height="15" fill="rgb(236,100,52)" fg:x="205879629" fg:w="3934366"/><text x="27.8714%" y="4223.50"></text></g><g><title>cfree (3,934,366 samples, 0.53%)</title><rect x="27.6214%" y="4197" width="0.5278%" height="15" fill="rgb(246,78,51)" fg:x="205879629" fg:w="3934366"/><text x="27.8714%" y="4207.50"></text></g><g><title>[libc.so.6] (3,934,366 samples, 0.53%)</title><rect x="27.6214%" y="4181" width="0.5278%" height="15" fill="rgb(211,17,15)" fg:x="205879629" fg:w="3934366"/><text x="27.8714%" y="4191.50"></text></g><g><title>[libc.so.6] (3,934,366 samples, 0.53%)</title><rect x="27.6214%" y="4165" width="0.5278%" height="15" fill="rgb(209,59,46)" fg:x="205879629" fg:w="3934366"/><text x="27.8714%" y="4175.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;css_bitvector_compiler::HtmlNode&gt;&gt; (21,325,413 samples, 2.86%)</title><rect x="25.4570%" y="4549" width="2.8611%" height="15" fill="rgb(210,92,25)" fg:x="189747128" fg:w="21325413"/><text x="25.7070%" y="4559.50">co..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (21,325,413 samples, 2.86%)</title><rect x="25.4570%" y="4533" width="2.8611%" height="15" fill="rgb(238,174,52)" fg:x="189747128" fg:w="21325413"/><text x="25.7070%" y="4543.50">&lt;a..</text></g><g><title>core::ptr::drop_in_place&lt;[css_bitvector_compiler::HtmlNode]&gt; (21,325,413 samples, 2.86%)</title><rect x="25.4570%" y="4517" width="2.8611%" height="15" fill="rgb(230,73,7)" fg:x="189747128" fg:w="21325413"/><text x="25.7070%" y="4527.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;css_bitvector_compiler::HtmlNode&gt; (21,325,413 samples, 2.86%)</title><rect x="25.4570%" y="4501" width="2.8611%" height="15" fill="rgb(243,124,40)" fg:x="189747128" fg:w="21325413"/><text x="25.7070%" y="4511.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::string::String&gt;&gt; (1,258,546 samples, 0.17%)</title><rect x="28.1493%" y="4485" width="0.1689%" height="15" fill="rgb(244,170,11)" fg:x="209813995" fg:w="1258546"/><text x="28.3993%" y="4495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1,258,546 samples, 0.17%)</title><rect x="28.1493%" y="4469" width="0.1689%" height="15" fill="rgb(207,114,54)" fg:x="209813995" fg:w="1258546"/><text x="28.3993%" y="4479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1,258,546 samples, 0.17%)</title><rect x="28.1493%" y="4453" width="0.1689%" height="15" fill="rgb(205,42,20)" fg:x="209813995" fg:w="1258546"/><text x="28.3993%" y="4463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1,258,546 samples, 0.17%)</title><rect x="28.1493%" y="4437" width="0.1689%" height="15" fill="rgb(230,30,28)" fg:x="209813995" fg:w="1258546"/><text x="28.3993%" y="4447.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,258,546 samples, 0.17%)</title><rect x="28.1493%" y="4421" width="0.1689%" height="15" fill="rgb(205,73,54)" fg:x="209813995" fg:w="1258546"/><text x="28.3993%" y="4431.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (1,258,546 samples, 0.17%)</title><rect x="28.1493%" y="4405" width="0.1689%" height="15" fill="rgb(254,227,23)" fg:x="209813995" fg:w="1258546"/><text x="28.3993%" y="4415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1,258,546 samples, 0.17%)</title><rect x="28.1493%" y="4389" width="0.1689%" height="15" fill="rgb(228,202,34)" fg:x="209813995" fg:w="1258546"/><text x="28.3993%" y="4399.50"></text></g><g><title>alloc::alloc::dealloc (1,258,546 samples, 0.17%)</title><rect x="28.1493%" y="4373" width="0.1689%" height="15" fill="rgb(222,225,37)" fg:x="209813995" fg:w="1258546"/><text x="28.3993%" y="4383.50"></text></g><g><title>cfree (1,258,546 samples, 0.17%)</title><rect x="28.1493%" y="4357" width="0.1689%" height="15" fill="rgb(221,14,54)" fg:x="209813995" fg:w="1258546"/><text x="28.3993%" y="4367.50"></text></g><g><title>core::ptr::drop_in_place&lt;css_bitvector_compiler::HtmlNode&gt; (22,534,369 samples, 3.02%)</title><rect x="25.4570%" y="4821" width="3.0233%" height="15" fill="rgb(254,102,2)" fg:x="189747128" fg:w="22534369"/><text x="25.7070%" y="4831.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;css_bitvector_compiler::HtmlNode&gt;&gt; (22,534,369 samples, 3.02%)</title><rect x="25.4570%" y="4805" width="3.0233%" height="15" fill="rgb(232,104,17)" fg:x="189747128" fg:w="22534369"/><text x="25.7070%" y="4815.50">cor..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (22,534,369 samples, 3.02%)</title><rect x="25.4570%" y="4789" width="3.0233%" height="15" fill="rgb(250,220,14)" fg:x="189747128" fg:w="22534369"/><text x="25.7070%" y="4799.50">&lt;al..</text></g><g><title>core::ptr::drop_in_place&lt;[css_bitvector_compiler::HtmlNode]&gt; (22,534,369 samples, 3.02%)</title><rect x="25.4570%" y="4773" width="3.0233%" height="15" fill="rgb(241,158,9)" fg:x="189747128" fg:w="22534369"/><text x="25.7070%" y="4783.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;css_bitvector_compiler::HtmlNode&gt; (22,534,369 samples, 3.02%)</title><rect x="25.4570%" y="4757" width="3.0233%" height="15" fill="rgb(246,9,43)" fg:x="189747128" fg:w="22534369"/><text x="25.7070%" y="4767.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;css_bitvector_compiler::HtmlNode&gt;&gt; (22,534,369 samples, 3.02%)</title><rect x="25.4570%" y="4741" width="3.0233%" height="15" fill="rgb(206,73,33)" fg:x="189747128" fg:w="22534369"/><text x="25.7070%" y="4751.50">cor..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (22,534,369 samples, 3.02%)</title><rect x="25.4570%" y="4725" width="3.0233%" height="15" fill="rgb(222,79,8)" fg:x="189747128" fg:w="22534369"/><text x="25.7070%" y="4735.50">&lt;al..</text></g><g><title>core::ptr::drop_in_place&lt;[css_bitvector_compiler::HtmlNode]&gt; (22,534,369 samples, 3.02%)</title><rect x="25.4570%" y="4709" width="3.0233%" height="15" fill="rgb(234,8,54)" fg:x="189747128" fg:w="22534369"/><text x="25.7070%" y="4719.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;css_bitvector_compiler::HtmlNode&gt; (22,534,369 samples, 3.02%)</title><rect x="25.4570%" y="4693" width="3.0233%" height="15" fill="rgb(209,134,38)" fg:x="189747128" fg:w="22534369"/><text x="25.7070%" y="4703.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;css_bitvector_compiler::HtmlNode&gt;&gt; (22,534,369 samples, 3.02%)</title><rect x="25.4570%" y="4677" width="3.0233%" height="15" fill="rgb(230,127,29)" fg:x="189747128" fg:w="22534369"/><text x="25.7070%" y="4687.50">cor..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (22,534,369 samples, 3.02%)</title><rect x="25.4570%" y="4661" width="3.0233%" height="15" fill="rgb(242,44,41)" fg:x="189747128" fg:w="22534369"/><text x="25.7070%" y="4671.50">&lt;al..</text></g><g><title>core::ptr::drop_in_place&lt;[css_bitvector_compiler::HtmlNode]&gt; (22,534,369 samples, 3.02%)</title><rect x="25.4570%" y="4645" width="3.0233%" height="15" fill="rgb(222,56,43)" fg:x="189747128" fg:w="22534369"/><text x="25.7070%" y="4655.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;css_bitvector_compiler::HtmlNode&gt; (22,534,369 samples, 3.02%)</title><rect x="25.4570%" y="4629" width="3.0233%" height="15" fill="rgb(238,39,47)" fg:x="189747128" fg:w="22534369"/><text x="25.7070%" y="4639.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;css_bitvector_compiler::HtmlNode&gt;&gt; (22,534,369 samples, 3.02%)</title><rect x="25.4570%" y="4613" width="3.0233%" height="15" fill="rgb(226,79,43)" fg:x="189747128" fg:w="22534369"/><text x="25.7070%" y="4623.50">cor..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (22,534,369 samples, 3.02%)</title><rect x="25.4570%" y="4597" width="3.0233%" height="15" fill="rgb(242,105,53)" fg:x="189747128" fg:w="22534369"/><text x="25.7070%" y="4607.50">&lt;al..</text></g><g><title>core::ptr::drop_in_place&lt;[css_bitvector_compiler::HtmlNode]&gt; (22,534,369 samples, 3.02%)</title><rect x="25.4570%" y="4581" width="3.0233%" height="15" fill="rgb(251,132,46)" fg:x="189747128" fg:w="22534369"/><text x="25.7070%" y="4591.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;css_bitvector_compiler::HtmlNode&gt; (22,534,369 samples, 3.02%)</title><rect x="25.4570%" y="4565" width="3.0233%" height="15" fill="rgb(231,77,14)" fg:x="189747128" fg:w="22534369"/><text x="25.7070%" y="4575.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::string::String&gt;&gt; (1,208,956 samples, 0.16%)</title><rect x="28.3181%" y="4549" width="0.1622%" height="15" fill="rgb(240,135,9)" fg:x="211072541" fg:w="1208956"/><text x="28.5681%" y="4559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1,208,956 samples, 0.16%)</title><rect x="28.3181%" y="4533" width="0.1622%" height="15" fill="rgb(248,109,14)" fg:x="211072541" fg:w="1208956"/><text x="28.5681%" y="4543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1,208,956 samples, 0.16%)</title><rect x="28.3181%" y="4517" width="0.1622%" height="15" fill="rgb(227,146,52)" fg:x="211072541" fg:w="1208956"/><text x="28.5681%" y="4527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1,208,956 samples, 0.16%)</title><rect x="28.3181%" y="4501" width="0.1622%" height="15" fill="rgb(232,54,3)" fg:x="211072541" fg:w="1208956"/><text x="28.5681%" y="4511.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,208,956 samples, 0.16%)</title><rect x="28.3181%" y="4485" width="0.1622%" height="15" fill="rgb(229,201,43)" fg:x="211072541" fg:w="1208956"/><text x="28.5681%" y="4495.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (1,208,956 samples, 0.16%)</title><rect x="28.3181%" y="4469" width="0.1622%" height="15" fill="rgb(252,161,33)" fg:x="211072541" fg:w="1208956"/><text x="28.5681%" y="4479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1,208,956 samples, 0.16%)</title><rect x="28.3181%" y="4453" width="0.1622%" height="15" fill="rgb(226,146,40)" fg:x="211072541" fg:w="1208956"/><text x="28.5681%" y="4463.50"></text></g><g><title>alloc::alloc::dealloc (1,208,956 samples, 0.16%)</title><rect x="28.3181%" y="4437" width="0.1622%" height="15" fill="rgb(219,47,25)" fg:x="211072541" fg:w="1208956"/><text x="28.5681%" y="4447.50"></text></g><g><title>cfree (1,208,956 samples, 0.16%)</title><rect x="28.3181%" y="4421" width="0.1622%" height="15" fill="rgb(250,135,13)" fg:x="211072541" fg:w="1208956"/><text x="28.5681%" y="4431.50"></text></g><g><title>core::cmp::PartialEq::ne (1,301,184 samples, 0.17%)</title><rect x="28.4803%" y="4725" width="0.1746%" height="15" fill="rgb(219,229,18)" fg:x="212281497" fg:w="1301184"/><text x="28.7303%" y="4735.50"></text></g><g><title>&lt;css_bitvector_compiler::BitVector as core::cmp::PartialEq&gt;::eq (1,301,184 samples, 0.17%)</title><rect x="28.4803%" y="4709" width="0.1746%" height="15" fill="rgb(217,152,27)" fg:x="212281497" fg:w="1301184"/><text x="28.7303%" y="4719.50"></text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (1,301,184 samples, 0.17%)</title><rect x="28.4803%" y="4693" width="0.1746%" height="15" fill="rgb(225,71,47)" fg:x="212281497" fg:w="1301184"/><text x="28.7303%" y="4703.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (1,301,184 samples, 0.17%)</title><rect x="28.4803%" y="4677" width="0.1746%" height="15" fill="rgb(220,139,14)" fg:x="212281497" fg:w="1301184"/><text x="28.7303%" y="4687.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1,301,184 samples, 0.17%)</title><rect x="28.4803%" y="4661" width="0.1746%" height="15" fill="rgb(247,54,32)" fg:x="212281497" fg:w="1301184"/><text x="28.7303%" y="4671.50"></text></g><g><title>[libc.so.6] (1,301,184 samples, 0.17%)</title><rect x="28.4803%" y="4645" width="0.1746%" height="15" fill="rgb(252,131,39)" fg:x="212281497" fg:w="1301184"/><text x="28.7303%" y="4655.50"></text></g><g><title>core::cmp::PartialEq::ne (1,141,318 samples, 0.15%)</title><rect x="28.6549%" y="4693" width="0.1531%" height="15" fill="rgb(210,108,39)" fg:x="213582681" fg:w="1141318"/><text x="28.9049%" y="4703.50"></text></g><g><title>&lt;css_bitvector_compiler::BitVector as core::cmp::PartialEq&gt;::eq (1,141,318 samples, 0.15%)</title><rect x="28.6549%" y="4677" width="0.1531%" height="15" fill="rgb(205,23,29)" fg:x="213582681" fg:w="1141318"/><text x="28.9049%" y="4687.50"></text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (1,141,318 samples, 0.15%)</title><rect x="28.6549%" y="4661" width="0.1531%" height="15" fill="rgb(246,139,46)" fg:x="213582681" fg:w="1141318"/><text x="28.9049%" y="4671.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (1,141,318 samples, 0.15%)</title><rect x="28.6549%" y="4645" width="0.1531%" height="15" fill="rgb(250,81,26)" fg:x="213582681" fg:w="1141318"/><text x="28.9049%" y="4655.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1,141,318 samples, 0.15%)</title><rect x="28.6549%" y="4629" width="0.1531%" height="15" fill="rgb(214,104,7)" fg:x="213582681" fg:w="1141318"/><text x="28.9049%" y="4639.50"></text></g><g><title>[libc.so.6] (1,141,318 samples, 0.15%)</title><rect x="28.6549%" y="4613" width="0.1531%" height="15" fill="rgb(233,189,8)" fg:x="213582681" fg:w="1141318"/><text x="28.9049%" y="4623.50"></text></g><g><title>css_bitvector_compiler::HtmlNode::compare_css_matches (3,594,174 samples, 0.48%)</title><rect x="28.4803%" y="4821" width="0.4822%" height="15" fill="rgb(228,141,17)" fg:x="212281497" fg:w="3594174"/><text x="28.7303%" y="4831.50"></text></g><g><title>css_bitvector_compiler::HtmlNode::compare_css_matches (3,594,174 samples, 0.48%)</title><rect x="28.4803%" y="4805" width="0.4822%" height="15" fill="rgb(247,157,1)" fg:x="212281497" fg:w="3594174"/><text x="28.7303%" y="4815.50"></text></g><g><title>css_bitvector_compiler::HtmlNode::compare_css_matches (3,594,174 samples, 0.48%)</title><rect x="28.4803%" y="4789" width="0.4822%" height="15" fill="rgb(249,225,5)" fg:x="212281497" fg:w="3594174"/><text x="28.7303%" y="4799.50"></text></g><g><title>css_bitvector_compiler::HtmlNode::compare_css_matches (3,594,174 samples, 0.48%)</title><rect x="28.4803%" y="4773" width="0.4822%" height="15" fill="rgb(242,55,13)" fg:x="212281497" fg:w="3594174"/><text x="28.7303%" y="4783.50"></text></g><g><title>css_bitvector_compiler::HtmlNode::compare_css_matches (3,594,174 samples, 0.48%)</title><rect x="28.4803%" y="4757" width="0.4822%" height="15" fill="rgb(230,49,50)" fg:x="212281497" fg:w="3594174"/><text x="28.7303%" y="4767.50"></text></g><g><title>css_bitvector_compiler::HtmlNode::compare_css_matches (3,594,174 samples, 0.48%)</title><rect x="28.4803%" y="4741" width="0.4822%" height="15" fill="rgb(241,111,38)" fg:x="212281497" fg:w="3594174"/><text x="28.7303%" y="4751.50"></text></g><g><title>css_bitvector_compiler::HtmlNode::compare_css_matches (2,292,990 samples, 0.31%)</title><rect x="28.6549%" y="4725" width="0.3076%" height="15" fill="rgb(252,155,4)" fg:x="213582681" fg:w="2292990"/><text x="28.9049%" y="4735.50"></text></g><g><title>css_bitvector_compiler::HtmlNode::compare_css_matches (2,292,990 samples, 0.31%)</title><rect x="28.6549%" y="4709" width="0.3076%" height="15" fill="rgb(212,69,32)" fg:x="213582681" fg:w="2292990"/><text x="28.9049%" y="4719.50"></text></g><g><title>css_bitvector_compiler::HtmlNode::compare_css_matches (1,151,672 samples, 0.15%)</title><rect x="28.8080%" y="4693" width="0.1545%" height="15" fill="rgb(243,107,47)" fg:x="214723999" fg:w="1151672"/><text x="29.0580%" y="4703.50"></text></g><g><title>css_bitvector_compiler::HtmlNode::compare_css_matches (1,151,672 samples, 0.15%)</title><rect x="28.8080%" y="4677" width="0.1545%" height="15" fill="rgb(247,130,12)" fg:x="214723999" fg:w="1151672"/><text x="29.0580%" y="4687.50"></text></g><g><title>css_bitvector_compiler::HtmlNode::compare_css_matches (1,151,672 samples, 0.15%)</title><rect x="28.8080%" y="4661" width="0.1545%" height="15" fill="rgb(233,74,16)" fg:x="214723999" fg:w="1151672"/><text x="29.0580%" y="4671.50"></text></g><g><title>css_bitvector_compiler::HtmlNode::compare_css_matches (1,151,672 samples, 0.15%)</title><rect x="28.8080%" y="4645" width="0.1545%" height="15" fill="rgb(208,58,18)" fg:x="214723999" fg:w="1151672"/><text x="29.0580%" y="4655.50"></text></g><g><title>css_bitvector_compiler::HtmlNode::compare_css_matches (1,151,672 samples, 0.15%)</title><rect x="28.8080%" y="4629" width="0.1545%" height="15" fill="rgb(242,225,1)" fg:x="214723999" fg:w="1151672"/><text x="29.0580%" y="4639.50"></text></g><g><title>core::cmp::PartialEq::ne (1,151,672 samples, 0.15%)</title><rect x="28.8080%" y="4613" width="0.1545%" height="15" fill="rgb(249,39,40)" fg:x="214723999" fg:w="1151672"/><text x="29.0580%" y="4623.50"></text></g><g><title>&lt;css_bitvector_compiler::BitVector as core::cmp::PartialEq&gt;::eq (1,151,672 samples, 0.15%)</title><rect x="28.8080%" y="4597" width="0.1545%" height="15" fill="rgb(207,72,44)" fg:x="214723999" fg:w="1151672"/><text x="29.0580%" y="4607.50"></text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (1,151,672 samples, 0.15%)</title><rect x="28.8080%" y="4581" width="0.1545%" height="15" fill="rgb(215,193,12)" fg:x="214723999" fg:w="1151672"/><text x="29.0580%" y="4591.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (1,151,672 samples, 0.15%)</title><rect x="28.8080%" y="4565" width="0.1545%" height="15" fill="rgb(248,41,39)" fg:x="214723999" fg:w="1151672"/><text x="29.0580%" y="4575.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1,151,672 samples, 0.15%)</title><rect x="28.8080%" y="4549" width="0.1545%" height="15" fill="rgb(253,85,4)" fg:x="214723999" fg:w="1151672"/><text x="29.0580%" y="4559.50"></text></g><g><title>[libc.so.6] (1,151,672 samples, 0.15%)</title><rect x="28.8080%" y="4533" width="0.1545%" height="15" fill="rgb(243,70,31)" fg:x="214723999" fg:w="1151672"/><text x="29.0580%" y="4543.50"></text></g><g><title>css_bitvector_compiler::HtmlNode::fix_parent_pointers (1,243,645 samples, 0.17%)</title><rect x="28.9625%" y="4821" width="0.1669%" height="15" fill="rgb(253,195,26)" fg:x="215875671" fg:w="1243645"/><text x="29.2125%" y="4831.50"></text></g><g><title>css_bitvector_compiler::HtmlNode::fix_parent_pointers (1,243,645 samples, 0.17%)</title><rect x="28.9625%" y="4805" width="0.1669%" height="15" fill="rgb(243,42,11)" fg:x="215875671" fg:w="1243645"/><text x="29.2125%" y="4815.50"></text></g><g><title>css_bitvector_compiler::HtmlNode::fix_parent_pointers (1,243,645 samples, 0.17%)</title><rect x="28.9625%" y="4789" width="0.1669%" height="15" fill="rgb(239,66,17)" fg:x="215875671" fg:w="1243645"/><text x="29.2125%" y="4799.50"></text></g><g><title>css_bitvector_compiler::HtmlNode::fix_parent_pointers (1,243,645 samples, 0.17%)</title><rect x="28.9625%" y="4773" width="0.1669%" height="15" fill="rgb(217,132,21)" fg:x="215875671" fg:w="1243645"/><text x="29.2125%" y="4783.50"></text></g><g><title>css_bitvector_compiler::HtmlNode::fix_parent_pointers (1,243,645 samples, 0.17%)</title><rect x="28.9625%" y="4757" width="0.1669%" height="15" fill="rgb(252,202,21)" fg:x="215875671" fg:w="1243645"/><text x="29.2125%" y="4767.50"></text></g><g><title>css_bitvector_compiler::HtmlNode::fix_parent_pointers (1,243,645 samples, 0.17%)</title><rect x="28.9625%" y="4741" width="0.1669%" height="15" fill="rgb(233,98,36)" fg:x="215875671" fg:w="1243645"/><text x="29.2125%" y="4751.50"></text></g><g><title>css_bitvector_compiler::HtmlNode::fix_parent_pointers (1,243,645 samples, 0.17%)</title><rect x="28.9625%" y="4725" width="0.1669%" height="15" fill="rgb(216,153,54)" fg:x="215875671" fg:w="1243645"/><text x="29.2125%" y="4735.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,243,645 samples, 0.17%)</title><rect x="28.9625%" y="4709" width="0.1669%" height="15" fill="rgb(250,99,7)" fg:x="215875671" fg:w="1243645"/><text x="29.2125%" y="4719.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::unchecked_iterator::UncheckedIterator&gt;::next_unchecked (1,243,645 samples, 0.17%)</title><rect x="28.9625%" y="4693" width="0.1669%" height="15" fill="rgb(207,56,50)" fg:x="215875671" fg:w="1243645"/><text x="29.2125%" y="4703.50"></text></g><g><title>core::slice::iter::IterMut&lt;T&gt;::post_inc_start (1,243,645 samples, 0.17%)</title><rect x="28.9625%" y="4677" width="0.1669%" height="15" fill="rgb(244,61,34)" fg:x="215875671" fg:w="1243645"/><text x="29.2125%" y="4687.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (1,243,645 samples, 0.17%)</title><rect x="28.9625%" y="4661" width="0.1669%" height="15" fill="rgb(241,50,38)" fg:x="215875671" fg:w="1243645"/><text x="29.2125%" y="4671.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,328,796 samples, 0.18%)</title><rect x="29.1294%" y="4773" width="0.1783%" height="15" fill="rgb(212,166,30)" fg:x="217119316" fg:w="1328796"/><text x="29.3794%" y="4783.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::unchecked_iterator::UncheckedIterator&gt;::next_unchecked (1,328,796 samples, 0.18%)</title><rect x="29.1294%" y="4757" width="0.1783%" height="15" fill="rgb(249,127,32)" fg:x="217119316" fg:w="1328796"/><text x="29.3794%" y="4767.50"></text></g><g><title>core::slice::iter::IterMut&lt;T&gt;::post_inc_start (1,328,796 samples, 0.18%)</title><rect x="29.1294%" y="4741" width="0.1783%" height="15" fill="rgb(209,103,0)" fg:x="217119316" fg:w="1328796"/><text x="29.3794%" y="4751.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (1,328,796 samples, 0.18%)</title><rect x="29.1294%" y="4725" width="0.1783%" height="15" fill="rgb(238,209,51)" fg:x="217119316" fg:w="1328796"/><text x="29.3794%" y="4735.50"></text></g><g><title>css_bitvector_compiler::HtmlNode::fix_parent_pointers (2,622,781 samples, 0.35%)</title><rect x="29.1294%" y="4805" width="0.3519%" height="15" fill="rgb(237,56,23)" fg:x="217119316" fg:w="2622781"/><text x="29.3794%" y="4815.50"></text></g><g><title>css_bitvector_compiler::HtmlNode::fix_parent_pointers (2,622,781 samples, 0.35%)</title><rect x="29.1294%" y="4789" width="0.3519%" height="15" fill="rgb(215,153,46)" fg:x="217119316" fg:w="2622781"/><text x="29.3794%" y="4799.50"></text></g><g><title>css_bitvector_compiler::HtmlNode::fix_parent_pointers (1,293,985 samples, 0.17%)</title><rect x="29.3076%" y="4773" width="0.1736%" height="15" fill="rgb(224,49,31)" fg:x="218448112" fg:w="1293985"/><text x="29.5576%" y="4783.50"></text></g><g><title>css_bitvector_compiler::HtmlNode::fix_parent_pointers (1,293,985 samples, 0.17%)</title><rect x="29.3076%" y="4757" width="0.1736%" height="15" fill="rgb(250,18,42)" fg:x="218448112" fg:w="1293985"/><text x="29.5576%" y="4767.50"></text></g><g><title>css_bitvector_compiler::HtmlNode::fix_parent_pointers (1,293,985 samples, 0.17%)</title><rect x="29.3076%" y="4741" width="0.1736%" height="15" fill="rgb(215,176,39)" fg:x="218448112" fg:w="1293985"/><text x="29.5576%" y="4751.50"></text></g><g><title>css_bitvector_compiler::HtmlNode::fix_parent_pointers (1,293,985 samples, 0.17%)</title><rect x="29.3076%" y="4725" width="0.1736%" height="15" fill="rgb(223,77,29)" fg:x="218448112" fg:w="1293985"/><text x="29.5576%" y="4735.50"></text></g><g><title>css_bitvector_compiler::HtmlNode::fix_parent_pointers (1,293,985 samples, 0.17%)</title><rect x="29.3076%" y="4709" width="0.1736%" height="15" fill="rgb(234,94,52)" fg:x="218448112" fg:w="1293985"/><text x="29.5576%" y="4719.50"></text></g><g><title>css_bitvector_compiler::HtmlNode::fix_parent_pointers (1,293,985 samples, 0.17%)</title><rect x="29.3076%" y="4693" width="0.1736%" height="15" fill="rgb(220,154,50)" fg:x="218448112" fg:w="1293985"/><text x="29.5576%" y="4703.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,293,985 samples, 0.17%)</title><rect x="29.3076%" y="4677" width="0.1736%" height="15" fill="rgb(212,11,10)" fg:x="218448112" fg:w="1293985"/><text x="29.5576%" y="4687.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1,293,985 samples, 0.17%)</title><rect x="29.3076%" y="4661" width="0.1736%" height="15" fill="rgb(205,166,19)" fg:x="218448112" fg:w="1293985"/><text x="29.5576%" y="4671.50"></text></g><g><title>main::benchmark::json_to_html_node (1,304,175 samples, 0.17%)</title><rect x="29.4812%" y="4757" width="0.1750%" height="15" fill="rgb(244,198,16)" fg:x="219742097" fg:w="1304175"/><text x="29.7312%" y="4767.50"></text></g><g><title>main::benchmark::json_to_html_node (1,304,175 samples, 0.17%)</title><rect x="29.4812%" y="4741" width="0.1750%" height="15" fill="rgb(219,69,12)" fg:x="219742097" fg:w="1304175"/><text x="29.7312%" y="4751.50"></text></g><g><title>main::benchmark::json_to_html_node (1,304,175 samples, 0.17%)</title><rect x="29.4812%" y="4725" width="0.1750%" height="15" fill="rgb(245,30,7)" fg:x="219742097" fg:w="1304175"/><text x="29.7312%" y="4735.50"></text></g><g><title>main::benchmark::json_to_html_node (1,304,175 samples, 0.17%)</title><rect x="29.4812%" y="4709" width="0.1750%" height="15" fill="rgb(218,221,48)" fg:x="219742097" fg:w="1304175"/><text x="29.7312%" y="4719.50"></text></g><g><title>serde_json::value::index::&lt;impl core::ops::index::Index&lt;I&gt; for serde_json::value::Value&gt;::index (1,304,175 samples, 0.17%)</title><rect x="29.4812%" y="4693" width="0.1750%" height="15" fill="rgb(216,66,15)" fg:x="219742097" fg:w="1304175"/><text x="29.7312%" y="4703.50"></text></g><g><title>&lt;&amp;T as serde_json::value::index::Index&gt;::index_into (1,304,175 samples, 0.17%)</title><rect x="29.4812%" y="4677" width="0.1750%" height="15" fill="rgb(226,122,50)" fg:x="219742097" fg:w="1304175"/><text x="29.7312%" y="4687.50"></text></g><g><title>&lt;str as serde_json::value::index::Index&gt;::index_into (1,304,175 samples, 0.17%)</title><rect x="29.4812%" y="4661" width="0.1750%" height="15" fill="rgb(239,156,16)" fg:x="219742097" fg:w="1304175"/><text x="29.7312%" y="4671.50"></text></g><g><title>serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;::get (1,304,175 samples, 0.17%)</title><rect x="29.4812%" y="4645" width="0.1750%" height="15" fill="rgb(224,27,38)" fg:x="219742097" fg:w="1304175"/><text x="29.7312%" y="4655.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::get (1,304,175 samples, 0.17%)</title><rect x="29.4812%" y="4629" width="0.1750%" height="15" fill="rgb(224,39,27)" fg:x="219742097" fg:w="1304175"/><text x="29.7312%" y="4639.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (1,304,175 samples, 0.17%)</title><rect x="29.4812%" y="4613" width="0.1750%" height="15" fill="rgb(215,92,29)" fg:x="219742097" fg:w="1304175"/><text x="29.7312%" y="4623.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (1,304,175 samples, 0.17%)</title><rect x="29.4812%" y="4597" width="0.1750%" height="15" fill="rgb(207,159,16)" fg:x="219742097" fg:w="1304175"/><text x="29.7312%" y="4607.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (1,304,175 samples, 0.17%)</title><rect x="29.4812%" y="4581" width="0.1750%" height="15" fill="rgb(238,163,47)" fg:x="219742097" fg:w="1304175"/><text x="29.7312%" y="4591.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::Ord for str&gt;::cmp (1,304,175 samples, 0.17%)</title><rect x="29.4812%" y="4565" width="0.1750%" height="15" fill="rgb(219,91,49)" fg:x="219742097" fg:w="1304175"/><text x="29.7312%" y="4575.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::Ord for [T]&gt;::cmp (1,304,175 samples, 0.17%)</title><rect x="29.4812%" y="4549" width="0.1750%" height="15" fill="rgb(227,167,31)" fg:x="219742097" fg:w="1304175"/><text x="29.7312%" y="4559.50"></text></g><g><title>&lt;A as core::slice::cmp::SliceOrd&gt;::compare (1,304,175 samples, 0.17%)</title><rect x="29.4812%" y="4533" width="0.1750%" height="15" fill="rgb(234,80,54)" fg:x="219742097" fg:w="1304175"/><text x="29.7312%" y="4543.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for isize&gt;::cmp (1,304,175 samples, 0.17%)</title><rect x="29.4812%" y="4517" width="0.1750%" height="15" fill="rgb(212,114,2)" fg:x="219742097" fg:w="1304175"/><text x="29.7312%" y="4527.50"></text></g><g><title>main::benchmark::json_to_html_node (2,499,819 samples, 0.34%)</title><rect x="29.4812%" y="4805" width="0.3354%" height="15" fill="rgb(234,50,24)" fg:x="219742097" fg:w="2499819"/><text x="29.7312%" y="4815.50"></text></g><g><title>main::benchmark::json_to_html_node (2,499,819 samples, 0.34%)</title><rect x="29.4812%" y="4789" width="0.3354%" height="15" fill="rgb(221,68,8)" fg:x="219742097" fg:w="2499819"/><text x="29.7312%" y="4799.50"></text></g><g><title>main::benchmark::json_to_html_node (2,499,819 samples, 0.34%)</title><rect x="29.4812%" y="4773" width="0.3354%" height="15" fill="rgb(254,180,31)" fg:x="219742097" fg:w="2499819"/><text x="29.7312%" y="4783.50"></text></g><g><title>serde_json::value::Value::get (1,195,644 samples, 0.16%)</title><rect x="29.6562%" y="4757" width="0.1604%" height="15" fill="rgb(247,130,50)" fg:x="221046272" fg:w="1195644"/><text x="29.9062%" y="4767.50"></text></g><g><title>&lt;&amp;T as serde_json::value::index::Index&gt;::index_into (1,195,644 samples, 0.16%)</title><rect x="29.6562%" y="4741" width="0.1604%" height="15" fill="rgb(211,109,4)" fg:x="221046272" fg:w="1195644"/><text x="29.9062%" y="4751.50"></text></g><g><title>&lt;str as serde_json::value::index::Index&gt;::index_into (1,195,644 samples, 0.16%)</title><rect x="29.6562%" y="4725" width="0.1604%" height="15" fill="rgb(238,50,21)" fg:x="221046272" fg:w="1195644"/><text x="29.9062%" y="4735.50"></text></g><g><title>serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;::get (1,195,644 samples, 0.16%)</title><rect x="29.6562%" y="4709" width="0.1604%" height="15" fill="rgb(225,57,45)" fg:x="221046272" fg:w="1195644"/><text x="29.9062%" y="4719.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::get (1,195,644 samples, 0.16%)</title><rect x="29.6562%" y="4693" width="0.1604%" height="15" fill="rgb(209,196,50)" fg:x="221046272" fg:w="1195644"/><text x="29.9062%" y="4703.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (1,195,644 samples, 0.16%)</title><rect x="29.6562%" y="4677" width="0.1604%" height="15" fill="rgb(242,140,13)" fg:x="221046272" fg:w="1195644"/><text x="29.9062%" y="4687.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (1,195,644 samples, 0.16%)</title><rect x="29.6562%" y="4661" width="0.1604%" height="15" fill="rgb(217,111,7)" fg:x="221046272" fg:w="1195644"/><text x="29.9062%" y="4671.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (1,195,644 samples, 0.16%)</title><rect x="29.6562%" y="4645" width="0.1604%" height="15" fill="rgb(253,193,51)" fg:x="221046272" fg:w="1195644"/><text x="29.9062%" y="4655.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::Ord for str&gt;::cmp (1,195,644 samples, 0.16%)</title><rect x="29.6562%" y="4629" width="0.1604%" height="15" fill="rgb(252,70,29)" fg:x="221046272" fg:w="1195644"/><text x="29.9062%" y="4639.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::Ord for [T]&gt;::cmp (1,195,644 samples, 0.16%)</title><rect x="29.6562%" y="4613" width="0.1604%" height="15" fill="rgb(232,127,12)" fg:x="221046272" fg:w="1195644"/><text x="29.9062%" y="4623.50"></text></g><g><title>&lt;A as core::slice::cmp::SliceOrd&gt;::compare (1,195,644 samples, 0.16%)</title><rect x="29.6562%" y="4597" width="0.1604%" height="15" fill="rgb(211,180,21)" fg:x="221046272" fg:w="1195644"/><text x="29.9062%" y="4607.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (501,504 samples, 0.07%)</title><rect x="29.8166%" y="4709" width="0.0673%" height="15" fill="rgb(229,72,13)" fg:x="222241916" fg:w="501504"/><text x="30.0666%" y="4719.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (501,504 samples, 0.07%)</title><rect x="29.8166%" y="4693" width="0.0673%" height="15" fill="rgb(240,211,49)" fg:x="222241916" fg:w="501504"/><text x="30.0666%" y="4703.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (501,504 samples, 0.07%)</title><rect x="29.8166%" y="4677" width="0.0673%" height="15" fill="rgb(219,149,40)" fg:x="222241916" fg:w="501504"/><text x="30.0666%" y="4687.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (501,504 samples, 0.07%)</title><rect x="29.8166%" y="4661" width="0.0673%" height="15" fill="rgb(210,127,46)" fg:x="222241916" fg:w="501504"/><text x="30.0666%" y="4671.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (501,504 samples, 0.07%)</title><rect x="29.8166%" y="4645" width="0.0673%" height="15" fill="rgb(220,106,7)" fg:x="222241916" fg:w="501504"/><text x="30.0666%" y="4655.50"></text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (501,504 samples, 0.07%)</title><rect x="29.8166%" y="4629" width="0.0673%" height="15" fill="rgb(249,31,22)" fg:x="222241916" fg:w="501504"/><text x="30.0666%" y="4639.50"></text></g><g><title>std::io::stdio::handle_ebadf (501,504 samples, 0.07%)</title><rect x="29.8166%" y="4613" width="0.0673%" height="15" fill="rgb(253,1,49)" fg:x="222241916" fg:w="501504"/><text x="30.0666%" y="4623.50"></text></g><g><title>&lt;&amp;T as core::fmt::Debug&gt;::fmt (1,302,243 samples, 0.17%)</title><rect x="29.8839%" y="4693" width="0.1747%" height="15" fill="rgb(227,144,33)" fg:x="222743420" fg:w="1302243"/><text x="30.1339%" y="4703.50"></text></g><g><title>&lt;[T] as core::fmt::Debug&gt;::fmt (1,302,243 samples, 0.17%)</title><rect x="29.8839%" y="4677" width="0.1747%" height="15" fill="rgb(249,163,44)" fg:x="222743420" fg:w="1302243"/><text x="30.1339%" y="4687.50"></text></g><g><title>core::fmt::builders::DebugList::entries (1,302,243 samples, 0.17%)</title><rect x="29.8839%" y="4661" width="0.1747%" height="15" fill="rgb(234,15,39)" fg:x="222743420" fg:w="1302243"/><text x="30.1339%" y="4671.50"></text></g><g><title>core::fmt::builders::DebugSet::entry (1,302,243 samples, 0.17%)</title><rect x="29.8839%" y="4645" width="0.1747%" height="15" fill="rgb(207,66,16)" fg:x="222743420" fg:w="1302243"/><text x="30.1339%" y="4655.50"></text></g><g><title>core::fmt::builders::DebugInner::entry_with (1,302,243 samples, 0.17%)</title><rect x="29.8839%" y="4629" width="0.1747%" height="15" fill="rgb(233,112,24)" fg:x="222743420" fg:w="1302243"/><text x="30.1339%" y="4639.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1,302,243 samples, 0.17%)</title><rect x="29.8839%" y="4613" width="0.1747%" height="15" fill="rgb(230,90,22)" fg:x="222743420" fg:w="1302243"/><text x="30.1339%" y="4623.50"></text></g><g><title>core::fmt::builders::DebugInner::entry_with::_{{closure}} (1,302,243 samples, 0.17%)</title><rect x="29.8839%" y="4597" width="0.1747%" height="15" fill="rgb(229,61,13)" fg:x="222743420" fg:w="1302243"/><text x="30.1339%" y="4607.50"></text></g><g><title>core::fmt::builders::DebugSet::entry::_{{closure}} (1,302,243 samples, 0.17%)</title><rect x="29.8839%" y="4581" width="0.1747%" height="15" fill="rgb(225,57,24)" fg:x="222743420" fg:w="1302243"/><text x="30.1339%" y="4591.50"></text></g><g><title>core::fmt::num::imp::&lt;impl u64&gt;::_fmt (1,302,243 samples, 0.17%)</title><rect x="29.8839%" y="4565" width="0.1747%" height="15" fill="rgb(208,169,48)" fg:x="222743420" fg:w="1302243"/><text x="30.1339%" y="4575.50"></text></g><g><title>main::benchmark::apply_frame_modifications (8,250,502 samples, 1.11%)</title><rect x="29.1294%" y="4821" width="1.1069%" height="15" fill="rgb(244,218,51)" fg:x="217119316" fg:w="8250502"/><text x="29.3794%" y="4831.50"></text></g><g><title>std::io::stdio::_print (3,127,902 samples, 0.42%)</title><rect x="29.8166%" y="4805" width="0.4196%" height="15" fill="rgb(214,148,10)" fg:x="222241916" fg:w="3127902"/><text x="30.0666%" y="4815.50"></text></g><g><title>std::io::stdio::print_to (3,127,902 samples, 0.42%)</title><rect x="29.8166%" y="4789" width="0.4196%" height="15" fill="rgb(225,174,27)" fg:x="222241916" fg:w="3127902"/><text x="30.0666%" y="4799.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (3,127,902 samples, 0.42%)</title><rect x="29.8166%" y="4773" width="0.4196%" height="15" fill="rgb(230,96,26)" fg:x="222241916" fg:w="3127902"/><text x="30.0666%" y="4783.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (3,127,902 samples, 0.42%)</title><rect x="29.8166%" y="4757" width="0.4196%" height="15" fill="rgb(232,10,30)" fg:x="222241916" fg:w="3127902"/><text x="30.0666%" y="4767.50"></text></g><g><title>std::io::Write::write_fmt (3,127,902 samples, 0.42%)</title><rect x="29.8166%" y="4741" width="0.4196%" height="15" fill="rgb(222,8,50)" fg:x="222241916" fg:w="3127902"/><text x="30.0666%" y="4751.50"></text></g><g><title>core::fmt::write (3,127,902 samples, 0.42%)</title><rect x="29.8166%" y="4725" width="0.4196%" height="15" fill="rgb(213,81,27)" fg:x="222241916" fg:w="3127902"/><text x="30.0666%" y="4735.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2,626,398 samples, 0.35%)</title><rect x="29.8839%" y="4709" width="0.3524%" height="15" fill="rgb(245,50,10)" fg:x="222743420" fg:w="2626398"/><text x="30.1339%" y="4719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::fmt::Debug&gt;::fmt (1,324,155 samples, 0.18%)</title><rect x="30.0586%" y="4693" width="0.1777%" height="15" fill="rgb(216,100,18)" fg:x="224045663" fg:w="1324155"/><text x="30.3086%" y="4703.50"></text></g><g><title>&lt;[T] as core::fmt::Debug&gt;::fmt (1,324,155 samples, 0.18%)</title><rect x="30.0586%" y="4677" width="0.1777%" height="15" fill="rgb(236,147,54)" fg:x="224045663" fg:w="1324155"/><text x="30.3086%" y="4687.50"></text></g><g><title>core::fmt::builders::DebugList::entries (1,324,155 samples, 0.18%)</title><rect x="30.0586%" y="4661" width="0.1777%" height="15" fill="rgb(205,143,26)" fg:x="224045663" fg:w="1324155"/><text x="30.3086%" y="4671.50"></text></g><g><title>core::fmt::builders::DebugSet::entry (1,324,155 samples, 0.18%)</title><rect x="30.0586%" y="4645" width="0.1777%" height="15" fill="rgb(236,26,9)" fg:x="224045663" fg:w="1324155"/><text x="30.3086%" y="4655.50"></text></g><g><title>core::fmt::builders::DebugInner::entry_with (1,324,155 samples, 0.18%)</title><rect x="30.0586%" y="4629" width="0.1777%" height="15" fill="rgb(221,165,53)" fg:x="224045663" fg:w="1324155"/><text x="30.3086%" y="4639.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1,324,155 samples, 0.18%)</title><rect x="30.0586%" y="4613" width="0.1777%" height="15" fill="rgb(214,110,17)" fg:x="224045663" fg:w="1324155"/><text x="30.3086%" y="4623.50"></text></g><g><title>core::fmt::builders::DebugInner::entry_with::_{{closure}} (1,324,155 samples, 0.18%)</title><rect x="30.0586%" y="4597" width="0.1777%" height="15" fill="rgb(237,197,12)" fg:x="224045663" fg:w="1324155"/><text x="30.3086%" y="4607.50"></text></g><g><title>core::fmt::builders::DebugSet::entry::_{{closure}} (1,324,155 samples, 0.18%)</title><rect x="30.0586%" y="4581" width="0.1777%" height="15" fill="rgb(205,84,17)" fg:x="224045663" fg:w="1324155"/><text x="30.3086%" y="4591.50"></text></g><g><title>core::fmt::num::imp::&lt;impl u64&gt;::_fmt (1,324,155 samples, 0.18%)</title><rect x="30.0586%" y="4565" width="0.1777%" height="15" fill="rgb(237,18,45)" fg:x="224045663" fg:w="1324155"/><text x="30.3086%" y="4575.50"></text></g><g><title>main::benchmark::clear_all_layout_cache (1,217,906 samples, 0.16%)</title><rect x="30.2363%" y="4821" width="0.1634%" height="15" fill="rgb(221,87,14)" fg:x="225369818" fg:w="1217906"/><text x="30.4863%" y="4831.50"></text></g><g><title>main::benchmark::clear_all_layout_cache (1,217,906 samples, 0.16%)</title><rect x="30.2363%" y="4805" width="0.1634%" height="15" fill="rgb(238,186,15)" fg:x="225369818" fg:w="1217906"/><text x="30.4863%" y="4815.50"></text></g><g><title>main::benchmark::clear_all_layout_cache (1,217,906 samples, 0.16%)</title><rect x="30.2363%" y="4789" width="0.1634%" height="15" fill="rgb(208,115,11)" fg:x="225369818" fg:w="1217906"/><text x="30.4863%" y="4799.50"></text></g><g><title>main::benchmark::clear_all_layout_cache (1,217,906 samples, 0.16%)</title><rect x="30.2363%" y="4773" width="0.1634%" height="15" fill="rgb(254,175,0)" fg:x="225369818" fg:w="1217906"/><text x="30.4863%" y="4783.50"></text></g><g><title>main::benchmark::clear_all_layout_cache (1,217,906 samples, 0.16%)</title><rect x="30.2363%" y="4757" width="0.1634%" height="15" fill="rgb(227,24,42)" fg:x="225369818" fg:w="1217906"/><text x="30.4863%" y="4767.50"></text></g><g><title>main::benchmark::clear_all_layout_cache (1,217,906 samples, 0.16%)</title><rect x="30.2363%" y="4741" width="0.1634%" height="15" fill="rgb(223,211,37)" fg:x="225369818" fg:w="1217906"/><text x="30.4863%" y="4751.50"></text></g><g><title>main::benchmark::clear_all_layout_cache (1,217,906 samples, 0.16%)</title><rect x="30.2363%" y="4725" width="0.1634%" height="15" fill="rgb(235,49,27)" fg:x="225369818" fg:w="1217906"/><text x="30.4863%" y="4735.50"></text></g><g><title>main::benchmark::clear_all_layout_cache (1,217,906 samples, 0.16%)</title><rect x="30.2363%" y="4709" width="0.1634%" height="15" fill="rgb(254,97,51)" fg:x="225369818" fg:w="1217906"/><text x="30.4863%" y="4719.50"></text></g><g><title>main::benchmark::clear_all_layout_cache (1,217,906 samples, 0.16%)</title><rect x="30.2363%" y="4693" width="0.1634%" height="15" fill="rgb(249,51,40)" fg:x="225369818" fg:w="1217906"/><text x="30.4863%" y="4703.50"></text></g><g><title>main::benchmark::clear_all_layout_cache (1,217,906 samples, 0.16%)</title><rect x="30.2363%" y="4677" width="0.1634%" height="15" fill="rgb(210,128,45)" fg:x="225369818" fg:w="1217906"/><text x="30.4863%" y="4687.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::vec::Vec&lt;css_bitvector_compiler::IState&gt;&gt;&gt; (1,217,906 samples, 0.16%)</title><rect x="30.2363%" y="4661" width="0.1634%" height="15" fill="rgb(224,137,50)" fg:x="225369818" fg:w="1217906"/><text x="30.4863%" y="4671.50"></text></g><g><title>main::benchmark::process_node_generated_from_scratch (986,989 samples, 0.13%)</title><rect x="30.3997%" y="4773" width="0.1324%" height="15" fill="rgb(242,15,9)" fg:x="226587724" fg:w="986989"/><text x="30.6497%" y="4783.50"></text></g><g><title>css_bitvector_compiler::BitVector::is_bit_set (986,989 samples, 0.13%)</title><rect x="30.3997%" y="4757" width="0.1324%" height="15" fill="rgb(233,187,41)" fg:x="226587724" fg:w="986989"/><text x="30.6497%" y="4767.50"></text></g><g><title>main::benchmark::matches_id_id (1,122,381 samples, 0.15%)</title><rect x="30.5321%" y="4725" width="0.1506%" height="15" fill="rgb(227,2,29)" fg:x="227574713" fg:w="1122381"/><text x="30.7821%" y="4735.50"></text></g><g><title>main::benchmark::get_node_id_id (1,122,381 samples, 0.15%)</title><rect x="30.5321%" y="4709" width="0.1506%" height="15" fill="rgb(222,70,3)" fg:x="227574713" fg:w="1122381"/><text x="30.7821%" y="4719.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (1,122,381 samples, 0.15%)</title><rect x="30.5321%" y="4693" width="0.1506%" height="15" fill="rgb(213,11,42)" fg:x="227574713" fg:w="1122381"/><text x="30.7821%" y="4703.50"></text></g><g><title>main::benchmark::get_node_id_id::_{{closure}} (1,122,381 samples, 0.15%)</title><rect x="30.5321%" y="4677" width="0.1506%" height="15" fill="rgb(225,150,9)" fg:x="227574713" fg:w="1122381"/><text x="30.7821%" y="4687.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1,122,381 samples, 0.15%)</title><rect x="30.5321%" y="4661" width="0.1506%" height="15" fill="rgb(230,162,45)" fg:x="227574713" fg:w="1122381"/><text x="30.7821%" y="4671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1,122,381 samples, 0.15%)</title><rect x="30.5321%" y="4645" width="0.1506%" height="15" fill="rgb(222,14,52)" fg:x="227574713" fg:w="1122381"/><text x="30.7821%" y="4655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1,122,381 samples, 0.15%)</title><rect x="30.5321%" y="4629" width="0.1506%" height="15" fill="rgb(254,198,14)" fg:x="227574713" fg:w="1122381"/><text x="30.7821%" y="4639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (1,122,381 samples, 0.15%)</title><rect x="30.5321%" y="4613" width="0.1506%" height="15" fill="rgb(220,217,30)" fg:x="227574713" fg:w="1122381"/><text x="30.7821%" y="4623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1,122,381 samples, 0.15%)</title><rect x="30.5321%" y="4597" width="0.1506%" height="15" fill="rgb(215,146,41)" fg:x="227574713" fg:w="1122381"/><text x="30.7821%" y="4607.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1,122,381 samples, 0.15%)</title><rect x="30.5321%" y="4581" width="0.1506%" height="15" fill="rgb(217,27,36)" fg:x="227574713" fg:w="1122381"/><text x="30.7821%" y="4591.50"></text></g><g><title>core::intrinsics::likely (1,122,381 samples, 0.15%)</title><rect x="30.5321%" y="4565" width="0.1506%" height="15" fill="rgb(219,218,39)" fg:x="227574713" fg:w="1122381"/><text x="30.7821%" y="4575.50"></text></g><g><title>main::benchmark::process_node_generated_from_scratch (2,479,802 samples, 0.33%)</title><rect x="30.5321%" y="4741" width="0.3327%" height="15" fill="rgb(219,4,42)" fg:x="227574713" fg:w="2479802"/><text x="30.7821%" y="4751.50"></text></g><g><title>main::benchmark::matches_tag_id (1,357,421 samples, 0.18%)</title><rect x="30.6827%" y="4725" width="0.1821%" height="15" fill="rgb(249,119,36)" fg:x="228697094" fg:w="1357421"/><text x="30.9327%" y="4735.50"></text></g><g><title>main::benchmark::get_node_tag_id (1,357,421 samples, 0.18%)</title><rect x="30.6827%" y="4709" width="0.1821%" height="15" fill="rgb(209,23,33)" fg:x="228697094" fg:w="1357421"/><text x="30.9327%" y="4719.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1,357,421 samples, 0.18%)</title><rect x="30.6827%" y="4693" width="0.1821%" height="15" fill="rgb(211,10,0)" fg:x="228697094" fg:w="1357421"/><text x="30.9327%" y="4703.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1,357,421 samples, 0.18%)</title><rect x="30.6827%" y="4677" width="0.1821%" height="15" fill="rgb(208,99,37)" fg:x="228697094" fg:w="1357421"/><text x="30.9327%" y="4687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1,357,421 samples, 0.18%)</title><rect x="30.6827%" y="4661" width="0.1821%" height="15" fill="rgb(213,132,31)" fg:x="228697094" fg:w="1357421"/><text x="30.9327%" y="4671.50"></text></g><g><title>hashbrown::map::make_hash (1,357,421 samples, 0.18%)</title><rect x="30.6827%" y="4645" width="0.1821%" height="15" fill="rgb(243,129,40)" fg:x="228697094" fg:w="1357421"/><text x="30.9327%" y="4655.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1,357,421 samples, 0.18%)</title><rect x="30.6827%" y="4629" width="0.1821%" height="15" fill="rgb(210,66,33)" fg:x="228697094" fg:w="1357421"/><text x="30.9327%" y="4639.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1,357,421 samples, 0.18%)</title><rect x="30.6827%" y="4613" width="0.1821%" height="15" fill="rgb(209,189,4)" fg:x="228697094" fg:w="1357421"/><text x="30.9327%" y="4623.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1,357,421 samples, 0.18%)</title><rect x="30.6827%" y="4597" width="0.1821%" height="15" fill="rgb(214,107,37)" fg:x="228697094" fg:w="1357421"/><text x="30.9327%" y="4607.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1,357,421 samples, 0.18%)</title><rect x="30.6827%" y="4581" width="0.1821%" height="15" fill="rgb(245,88,54)" fg:x="228697094" fg:w="1357421"/><text x="30.9327%" y="4591.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1,357,421 samples, 0.18%)</title><rect x="30.6827%" y="4565" width="0.1821%" height="15" fill="rgb(205,146,20)" fg:x="228697094" fg:w="1357421"/><text x="30.9327%" y="4575.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1,357,421 samples, 0.18%)</title><rect x="30.6827%" y="4549" width="0.1821%" height="15" fill="rgb(220,161,25)" fg:x="228697094" fg:w="1357421"/><text x="30.9327%" y="4559.50"></text></g><g><title>core::ptr::drop_in_place&lt;css_bitvector_compiler::BitVector&gt; (1,227,206 samples, 0.16%)</title><rect x="30.8648%" y="4709" width="0.1646%" height="15" fill="rgb(215,152,15)" fg:x="230054515" fg:w="1227206"/><text x="31.1148%" y="4719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1,227,206 samples, 0.16%)</title><rect x="30.8648%" y="4693" width="0.1646%" height="15" fill="rgb(233,192,44)" fg:x="230054515" fg:w="1227206"/><text x="31.1148%" y="4703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1,227,206 samples, 0.16%)</title><rect x="30.8648%" y="4677" width="0.1646%" height="15" fill="rgb(240,170,46)" fg:x="230054515" fg:w="1227206"/><text x="31.1148%" y="4687.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,227,206 samples, 0.16%)</title><rect x="30.8648%" y="4661" width="0.1646%" height="15" fill="rgb(207,104,33)" fg:x="230054515" fg:w="1227206"/><text x="31.1148%" y="4671.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (1,227,206 samples, 0.16%)</title><rect x="30.8648%" y="4645" width="0.1646%" height="15" fill="rgb(219,21,39)" fg:x="230054515" fg:w="1227206"/><text x="31.1148%" y="4655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1,227,206 samples, 0.16%)</title><rect x="30.8648%" y="4629" width="0.1646%" height="15" fill="rgb(214,133,29)" fg:x="230054515" fg:w="1227206"/><text x="31.1148%" y="4639.50"></text></g><g><title>alloc::alloc::dealloc (1,227,206 samples, 0.16%)</title><rect x="30.8648%" y="4613" width="0.1646%" height="15" fill="rgb(226,93,6)" fg:x="230054515" fg:w="1227206"/><text x="31.1148%" y="4623.50"></text></g><g><title>cfree (1,227,206 samples, 0.16%)</title><rect x="30.8648%" y="4597" width="0.1646%" height="15" fill="rgb(252,222,34)" fg:x="230054515" fg:w="1227206"/><text x="31.1148%" y="4607.50"></text></g><g><title>css_bitvector_compiler::BitVector::is_bit_set (1,303,625 samples, 0.17%)</title><rect x="31.0294%" y="4709" width="0.1749%" height="15" fill="rgb(252,92,48)" fg:x="231281721" fg:w="1303625"/><text x="31.2794%" y="4719.50"></text></g><g><title>main::benchmark::matches_id_id (2,676,419 samples, 0.36%)</title><rect x="31.2043%" y="4709" width="0.3591%" height="15" fill="rgb(245,223,24)" fg:x="232585346" fg:w="2676419"/><text x="31.4543%" y="4719.50"></text></g><g><title>main::benchmark::get_node_id_id (2,676,419 samples, 0.36%)</title><rect x="31.2043%" y="4693" width="0.3591%" height="15" fill="rgb(205,176,3)" fg:x="232585346" fg:w="2676419"/><text x="31.4543%" y="4703.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (2,676,419 samples, 0.36%)</title><rect x="31.2043%" y="4677" width="0.3591%" height="15" fill="rgb(235,151,15)" fg:x="232585346" fg:w="2676419"/><text x="31.4543%" y="4687.50"></text></g><g><title>main::benchmark::get_node_id_id::_{{closure}} (2,676,419 samples, 0.36%)</title><rect x="31.2043%" y="4661" width="0.3591%" height="15" fill="rgb(237,209,11)" fg:x="232585346" fg:w="2676419"/><text x="31.4543%" y="4671.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (2,676,419 samples, 0.36%)</title><rect x="31.2043%" y="4645" width="0.3591%" height="15" fill="rgb(243,227,24)" fg:x="232585346" fg:w="2676419"/><text x="31.4543%" y="4655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (2,676,419 samples, 0.36%)</title><rect x="31.2043%" y="4629" width="0.3591%" height="15" fill="rgb(239,193,16)" fg:x="232585346" fg:w="2676419"/><text x="31.4543%" y="4639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (2,676,419 samples, 0.36%)</title><rect x="31.2043%" y="4613" width="0.3591%" height="15" fill="rgb(231,27,9)" fg:x="232585346" fg:w="2676419"/><text x="31.4543%" y="4623.50"></text></g><g><title>hashbrown::map::make_hash (2,676,419 samples, 0.36%)</title><rect x="31.2043%" y="4597" width="0.3591%" height="15" fill="rgb(219,169,10)" fg:x="232585346" fg:w="2676419"/><text x="31.4543%" y="4607.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2,676,419 samples, 0.36%)</title><rect x="31.2043%" y="4581" width="0.3591%" height="15" fill="rgb(244,229,43)" fg:x="232585346" fg:w="2676419"/><text x="31.4543%" y="4591.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (2,676,419 samples, 0.36%)</title><rect x="31.2043%" y="4565" width="0.3591%" height="15" fill="rgb(254,38,20)" fg:x="232585346" fg:w="2676419"/><text x="31.4543%" y="4575.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2,676,419 samples, 0.36%)</title><rect x="31.2043%" y="4549" width="0.3591%" height="15" fill="rgb(250,47,30)" fg:x="232585346" fg:w="2676419"/><text x="31.4543%" y="4559.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2,676,419 samples, 0.36%)</title><rect x="31.2043%" y="4533" width="0.3591%" height="15" fill="rgb(224,124,36)" fg:x="232585346" fg:w="2676419"/><text x="31.4543%" y="4543.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1,335,872 samples, 0.18%)</title><rect x="31.3842%" y="4517" width="0.1792%" height="15" fill="rgb(246,68,51)" fg:x="233925893" fg:w="1335872"/><text x="31.6342%" y="4527.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1,335,872 samples, 0.18%)</title><rect x="31.3842%" y="4501" width="0.1792%" height="15" fill="rgb(253,43,49)" fg:x="233925893" fg:w="1335872"/><text x="31.6342%" y="4511.50"></text></g><g><title>main::benchmark::process_node_generated_from_scratch (7,714,976 samples, 1.04%)</title><rect x="30.8648%" y="4725" width="1.0351%" height="15" fill="rgb(219,54,36)" fg:x="230054515" fg:w="7714976"/><text x="31.1148%" y="4735.50"></text></g><g><title>main::benchmark::matches_tag_id (2,507,726 samples, 0.34%)</title><rect x="31.5634%" y="4709" width="0.3364%" height="15" fill="rgb(227,133,34)" fg:x="235261765" fg:w="2507726"/><text x="31.8134%" y="4719.50"></text></g><g><title>main::benchmark::get_node_tag_id (2,507,726 samples, 0.34%)</title><rect x="31.5634%" y="4693" width="0.3364%" height="15" fill="rgb(247,227,15)" fg:x="235261765" fg:w="2507726"/><text x="31.8134%" y="4703.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (2,507,726 samples, 0.34%)</title><rect x="31.5634%" y="4677" width="0.3364%" height="15" fill="rgb(229,96,14)" fg:x="235261765" fg:w="2507726"/><text x="31.8134%" y="4687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (2,507,726 samples, 0.34%)</title><rect x="31.5634%" y="4661" width="0.3364%" height="15" fill="rgb(220,79,17)" fg:x="235261765" fg:w="2507726"/><text x="31.8134%" y="4671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (2,507,726 samples, 0.34%)</title><rect x="31.5634%" y="4645" width="0.3364%" height="15" fill="rgb(205,131,53)" fg:x="235261765" fg:w="2507726"/><text x="31.8134%" y="4655.50"></text></g><g><title>hashbrown::map::make_hash (2,507,726 samples, 0.34%)</title><rect x="31.5634%" y="4629" width="0.3364%" height="15" fill="rgb(209,50,29)" fg:x="235261765" fg:w="2507726"/><text x="31.8134%" y="4639.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2,507,726 samples, 0.34%)</title><rect x="31.5634%" y="4613" width="0.3364%" height="15" fill="rgb(245,86,46)" fg:x="235261765" fg:w="2507726"/><text x="31.8134%" y="4623.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2,507,726 samples, 0.34%)</title><rect x="31.5634%" y="4597" width="0.3364%" height="15" fill="rgb(235,66,46)" fg:x="235261765" fg:w="2507726"/><text x="31.8134%" y="4607.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (2,507,726 samples, 0.34%)</title><rect x="31.5634%" y="4581" width="0.3364%" height="15" fill="rgb(232,148,31)" fg:x="235261765" fg:w="2507726"/><text x="31.8134%" y="4591.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (2,507,726 samples, 0.34%)</title><rect x="31.5634%" y="4565" width="0.3364%" height="15" fill="rgb(217,149,8)" fg:x="235261765" fg:w="2507726"/><text x="31.8134%" y="4575.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (2,507,726 samples, 0.34%)</title><rect x="31.5634%" y="4549" width="0.3364%" height="15" fill="rgb(209,183,11)" fg:x="235261765" fg:w="2507726"/><text x="31.8134%" y="4559.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (2,507,726 samples, 0.34%)</title><rect x="31.5634%" y="4533" width="0.3364%" height="15" fill="rgb(208,55,20)" fg:x="235261765" fg:w="2507726"/><text x="31.8134%" y="4543.50"></text></g><g><title>core::hash::Hasher::write_u8 (2,507,726 samples, 0.34%)</title><rect x="31.5634%" y="4517" width="0.3364%" height="15" fill="rgb(218,39,14)" fg:x="235261765" fg:w="2507726"/><text x="31.8134%" y="4527.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2,507,726 samples, 0.34%)</title><rect x="31.5634%" y="4501" width="0.3364%" height="15" fill="rgb(216,169,33)" fg:x="235261765" fg:w="2507726"/><text x="31.8134%" y="4511.50"></text></g><g><title>core::hash::sip::u8to64_le (1,244,312 samples, 0.17%)</title><rect x="31.7329%" y="4485" width="0.1669%" height="15" fill="rgb(233,80,24)" fg:x="236525179" fg:w="1244312"/><text x="31.9829%" y="4495.50"></text></g><g><title>main::benchmark::process_node_generated_from_scratch (2,516,801 samples, 0.34%)</title><rect x="31.8998%" y="4693" width="0.3377%" height="15" fill="rgb(213,179,31)" fg:x="237769491" fg:w="2516801"/><text x="32.1498%" y="4703.50"></text></g><g><title>main::benchmark::matches_id_id (1,266,731 samples, 0.17%)</title><rect x="32.0676%" y="4677" width="0.1699%" height="15" fill="rgb(209,19,5)" fg:x="239019561" fg:w="1266731"/><text x="32.3176%" y="4687.50"></text></g><g><title>main::benchmark::get_node_id_id (1,266,731 samples, 0.17%)</title><rect x="32.0676%" y="4661" width="0.1699%" height="15" fill="rgb(219,18,35)" fg:x="239019561" fg:w="1266731"/><text x="32.3176%" y="4671.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (1,266,731 samples, 0.17%)</title><rect x="32.0676%" y="4645" width="0.1699%" height="15" fill="rgb(209,169,16)" fg:x="239019561" fg:w="1266731"/><text x="32.3176%" y="4655.50"></text></g><g><title>main::benchmark::get_node_id_id::_{{closure}} (1,266,731 samples, 0.17%)</title><rect x="32.0676%" y="4629" width="0.1699%" height="15" fill="rgb(245,90,51)" fg:x="239019561" fg:w="1266731"/><text x="32.3176%" y="4639.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1,266,731 samples, 0.17%)</title><rect x="32.0676%" y="4613" width="0.1699%" height="15" fill="rgb(220,99,45)" fg:x="239019561" fg:w="1266731"/><text x="32.3176%" y="4623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1,266,731 samples, 0.17%)</title><rect x="32.0676%" y="4597" width="0.1699%" height="15" fill="rgb(249,89,25)" fg:x="239019561" fg:w="1266731"/><text x="32.3176%" y="4607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1,266,731 samples, 0.17%)</title><rect x="32.0676%" y="4581" width="0.1699%" height="15" fill="rgb(239,193,0)" fg:x="239019561" fg:w="1266731"/><text x="32.3176%" y="4591.50"></text></g><g><title>hashbrown::map::make_hash (1,266,731 samples, 0.17%)</title><rect x="32.0676%" y="4565" width="0.1699%" height="15" fill="rgb(231,126,1)" fg:x="239019561" fg:w="1266731"/><text x="32.3176%" y="4575.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1,266,731 samples, 0.17%)</title><rect x="32.0676%" y="4549" width="0.1699%" height="15" fill="rgb(243,166,3)" fg:x="239019561" fg:w="1266731"/><text x="32.3176%" y="4559.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1,266,731 samples, 0.17%)</title><rect x="32.0676%" y="4533" width="0.1699%" height="15" fill="rgb(223,22,34)" fg:x="239019561" fg:w="1266731"/><text x="32.3176%" y="4543.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1,266,731 samples, 0.17%)</title><rect x="32.0676%" y="4517" width="0.1699%" height="15" fill="rgb(251,52,51)" fg:x="239019561" fg:w="1266731"/><text x="32.3176%" y="4527.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1,266,731 samples, 0.17%)</title><rect x="32.0676%" y="4501" width="0.1699%" height="15" fill="rgb(221,165,28)" fg:x="239019561" fg:w="1266731"/><text x="32.3176%" y="4511.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1,266,731 samples, 0.17%)</title><rect x="32.0676%" y="4485" width="0.1699%" height="15" fill="rgb(218,121,47)" fg:x="239019561" fg:w="1266731"/><text x="32.3176%" y="4495.50"></text></g><g><title>main::benchmark::process_node_generated_from_scratch (2,686,622 samples, 0.36%)</title><rect x="32.2375%" y="4677" width="0.3604%" height="15" fill="rgb(209,120,9)" fg:x="240286292" fg:w="2686622"/><text x="32.4875%" y="4687.50"></text></g><g><title>css_bitvector_compiler::BitVector::is_bit_set (1,310,374 samples, 0.18%)</title><rect x="32.4221%" y="4661" width="0.1758%" height="15" fill="rgb(236,68,12)" fg:x="241662540" fg:w="1310374"/><text x="32.6721%" y="4671.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1,362,554 samples, 0.18%)</title><rect x="32.5979%" y="4533" width="0.1828%" height="15" fill="rgb(225,194,26)" fg:x="242972914" fg:w="1362554"/><text x="32.8479%" y="4543.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1,362,554 samples, 0.18%)</title><rect x="32.5979%" y="4517" width="0.1828%" height="15" fill="rgb(231,84,39)" fg:x="242972914" fg:w="1362554"/><text x="32.8479%" y="4527.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1,362,554 samples, 0.18%)</title><rect x="32.5979%" y="4501" width="0.1828%" height="15" fill="rgb(210,11,45)" fg:x="242972914" fg:w="1362554"/><text x="32.8479%" y="4511.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1,362,554 samples, 0.18%)</title><rect x="32.5979%" y="4485" width="0.1828%" height="15" fill="rgb(224,54,52)" fg:x="242972914" fg:w="1362554"/><text x="32.8479%" y="4495.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1,362,554 samples, 0.18%)</title><rect x="32.5979%" y="4469" width="0.1828%" height="15" fill="rgb(238,102,14)" fg:x="242972914" fg:w="1362554"/><text x="32.8479%" y="4479.50"></text></g><g><title>main::benchmark::process_node_generated_from_scratch (3,864,989 samples, 0.52%)</title><rect x="32.5979%" y="4661" width="0.5185%" height="15" fill="rgb(243,160,52)" fg:x="242972914" fg:w="3864989"/><text x="32.8479%" y="4671.50"></text></g><g><title>main::benchmark::matches_class_id (3,864,989 samples, 0.52%)</title><rect x="32.5979%" y="4645" width="0.5185%" height="15" fill="rgb(216,114,19)" fg:x="242972914" fg:w="3864989"/><text x="32.8479%" y="4655.50"></text></g><g><title>main::benchmark::node_has_class_id (3,864,989 samples, 0.52%)</title><rect x="32.5979%" y="4629" width="0.5185%" height="15" fill="rgb(244,166,37)" fg:x="242972914" fg:w="3864989"/><text x="32.8479%" y="4639.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (3,864,989 samples, 0.52%)</title><rect x="32.5979%" y="4613" width="0.5185%" height="15" fill="rgb(246,29,44)" fg:x="242972914" fg:w="3864989"/><text x="32.8479%" y="4623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (3,864,989 samples, 0.52%)</title><rect x="32.5979%" y="4597" width="0.5185%" height="15" fill="rgb(215,56,53)" fg:x="242972914" fg:w="3864989"/><text x="32.8479%" y="4607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (3,864,989 samples, 0.52%)</title><rect x="32.5979%" y="4581" width="0.5185%" height="15" fill="rgb(217,60,2)" fg:x="242972914" fg:w="3864989"/><text x="32.8479%" y="4591.50"></text></g><g><title>hashbrown::map::make_hash (3,864,989 samples, 0.52%)</title><rect x="32.5979%" y="4565" width="0.5185%" height="15" fill="rgb(207,26,24)" fg:x="242972914" fg:w="3864989"/><text x="32.8479%" y="4575.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3,864,989 samples, 0.52%)</title><rect x="32.5979%" y="4549" width="0.5185%" height="15" fill="rgb(252,210,15)" fg:x="242972914" fg:w="3864989"/><text x="32.8479%" y="4559.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2,502,435 samples, 0.34%)</title><rect x="32.7808%" y="4533" width="0.3357%" height="15" fill="rgb(253,209,26)" fg:x="244335468" fg:w="2502435"/><text x="33.0308%" y="4543.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (2,502,435 samples, 0.34%)</title><rect x="32.7808%" y="4517" width="0.3357%" height="15" fill="rgb(238,170,14)" fg:x="244335468" fg:w="2502435"/><text x="33.0308%" y="4527.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (2,502,435 samples, 0.34%)</title><rect x="32.7808%" y="4501" width="0.3357%" height="15" fill="rgb(216,178,15)" fg:x="244335468" fg:w="2502435"/><text x="33.0308%" y="4511.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (2,502,435 samples, 0.34%)</title><rect x="32.7808%" y="4485" width="0.3357%" height="15" fill="rgb(250,197,2)" fg:x="244335468" fg:w="2502435"/><text x="33.0308%" y="4495.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (2,502,435 samples, 0.34%)</title><rect x="32.7808%" y="4469" width="0.3357%" height="15" fill="rgb(212,70,42)" fg:x="244335468" fg:w="2502435"/><text x="33.0308%" y="4479.50"></text></g><g><title>core::hash::Hasher::write_u8 (2,502,435 samples, 0.34%)</title><rect x="32.7808%" y="4453" width="0.3357%" height="15" fill="rgb(227,213,9)" fg:x="244335468" fg:w="2502435"/><text x="33.0308%" y="4463.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2,502,435 samples, 0.34%)</title><rect x="32.7808%" y="4437" width="0.3357%" height="15" fill="rgb(245,99,25)" fg:x="244335468" fg:w="2502435"/><text x="33.0308%" y="4447.50"></text></g><g><title>core::hash::sip::u8to64_le (2,502,435 samples, 0.34%)</title><rect x="32.7808%" y="4421" width="0.3357%" height="15" fill="rgb(250,82,29)" fg:x="244335468" fg:w="2502435"/><text x="33.0308%" y="4431.50"></text></g><g><title>css_bitvector_compiler::BitVector::is_bit_set (1,282,426 samples, 0.17%)</title><rect x="33.3132%" y="4629" width="0.1721%" height="15" fill="rgb(241,226,54)" fg:x="248304346" fg:w="1282426"/><text x="33.5632%" y="4639.50"></text></g><g><title>alloc::string::String::as_str (1,197,153 samples, 0.16%)</title><rect x="33.4853%" y="4597" width="0.1606%" height="15" fill="rgb(221,99,41)" fg:x="249586772" fg:w="1197153"/><text x="33.7353%" y="4607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (1,197,153 samples, 0.16%)</title><rect x="33.4853%" y="4581" width="0.1606%" height="15" fill="rgb(213,90,21)" fg:x="249586772" fg:w="1197153"/><text x="33.7353%" y="4591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (1,197,153 samples, 0.16%)</title><rect x="33.4853%" y="4565" width="0.1606%" height="15" fill="rgb(205,208,24)" fg:x="249586772" fg:w="1197153"/><text x="33.7353%" y="4575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1,197,153 samples, 0.16%)</title><rect x="33.4853%" y="4549" width="0.1606%" height="15" fill="rgb(246,31,12)" fg:x="249586772" fg:w="1197153"/><text x="33.7353%" y="4559.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (1,197,153 samples, 0.16%)</title><rect x="33.4853%" y="4533" width="0.1606%" height="15" fill="rgb(213,154,6)" fg:x="249586772" fg:w="1197153"/><text x="33.7353%" y="4543.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (1,197,153 samples, 0.16%)</title><rect x="33.4853%" y="4517" width="0.1606%" height="15" fill="rgb(222,163,29)" fg:x="249586772" fg:w="1197153"/><text x="33.7353%" y="4527.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,203,140 samples, 0.16%)</title><rect x="33.6459%" y="4437" width="0.1614%" height="15" fill="rgb(227,201,8)" fg:x="250783925" fg:w="1203140"/><text x="33.8959%" y="4447.50"></text></g><g><title>core::hash::sip::u8to64_le (1,203,140 samples, 0.16%)</title><rect x="33.6459%" y="4421" width="0.1614%" height="15" fill="rgb(233,9,32)" fg:x="250783925" fg:w="1203140"/><text x="33.8959%" y="4431.50"></text></g><g><title>main::benchmark::matches_class_id (3,527,031 samples, 0.47%)</title><rect x="33.4853%" y="4629" width="0.4732%" height="15" fill="rgb(217,54,24)" fg:x="249586772" fg:w="3527031"/><text x="33.7353%" y="4639.50"></text></g><g><title>main::benchmark::node_has_class_id (3,527,031 samples, 0.47%)</title><rect x="33.4853%" y="4613" width="0.4732%" height="15" fill="rgb(235,192,0)" fg:x="249586772" fg:w="3527031"/><text x="33.7353%" y="4623.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (2,329,878 samples, 0.31%)</title><rect x="33.6459%" y="4597" width="0.3126%" height="15" fill="rgb(235,45,9)" fg:x="250783925" fg:w="2329878"/><text x="33.8959%" y="4607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (2,329,878 samples, 0.31%)</title><rect x="33.6459%" y="4581" width="0.3126%" height="15" fill="rgb(246,42,40)" fg:x="250783925" fg:w="2329878"/><text x="33.8959%" y="4591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (2,329,878 samples, 0.31%)</title><rect x="33.6459%" y="4565" width="0.3126%" height="15" fill="rgb(248,111,24)" fg:x="250783925" fg:w="2329878"/><text x="33.8959%" y="4575.50"></text></g><g><title>hashbrown::map::make_hash (2,329,878 samples, 0.31%)</title><rect x="33.6459%" y="4549" width="0.3126%" height="15" fill="rgb(249,65,22)" fg:x="250783925" fg:w="2329878"/><text x="33.8959%" y="4559.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2,329,878 samples, 0.31%)</title><rect x="33.6459%" y="4533" width="0.3126%" height="15" fill="rgb(238,111,51)" fg:x="250783925" fg:w="2329878"/><text x="33.8959%" y="4543.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2,329,878 samples, 0.31%)</title><rect x="33.6459%" y="4517" width="0.3126%" height="15" fill="rgb(250,118,22)" fg:x="250783925" fg:w="2329878"/><text x="33.8959%" y="4527.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (2,329,878 samples, 0.31%)</title><rect x="33.6459%" y="4501" width="0.3126%" height="15" fill="rgb(234,84,26)" fg:x="250783925" fg:w="2329878"/><text x="33.8959%" y="4511.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (2,329,878 samples, 0.31%)</title><rect x="33.6459%" y="4485" width="0.3126%" height="15" fill="rgb(243,172,12)" fg:x="250783925" fg:w="2329878"/><text x="33.8959%" y="4495.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (2,329,878 samples, 0.31%)</title><rect x="33.6459%" y="4469" width="0.3126%" height="15" fill="rgb(236,150,49)" fg:x="250783925" fg:w="2329878"/><text x="33.8959%" y="4479.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (2,329,878 samples, 0.31%)</title><rect x="33.6459%" y="4453" width="0.3126%" height="15" fill="rgb(225,197,26)" fg:x="250783925" fg:w="2329878"/><text x="33.8959%" y="4463.50"></text></g><g><title>core::hash::Hasher::write_u8 (1,126,738 samples, 0.15%)</title><rect x="33.8073%" y="4437" width="0.1512%" height="15" fill="rgb(214,17,42)" fg:x="251987065" fg:w="1126738"/><text x="34.0573%" y="4447.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,126,738 samples, 0.15%)</title><rect x="33.8073%" y="4421" width="0.1512%" height="15" fill="rgb(224,165,40)" fg:x="251987065" fg:w="1126738"/><text x="34.0573%" y="4431.50"></text></g><g><title>hashbrown::map::make_hash (1,198,111 samples, 0.16%)</title><rect x="33.9585%" y="4517" width="0.1607%" height="15" fill="rgb(246,100,4)" fg:x="253113803" fg:w="1198111"/><text x="34.2085%" y="4527.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1,198,111 samples, 0.16%)</title><rect x="33.9585%" y="4501" width="0.1607%" height="15" fill="rgb(222,103,0)" fg:x="253113803" fg:w="1198111"/><text x="34.2085%" y="4511.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1,198,111 samples, 0.16%)</title><rect x="33.9585%" y="4485" width="0.1607%" height="15" fill="rgb(227,189,26)" fg:x="253113803" fg:w="1198111"/><text x="34.2085%" y="4495.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1,198,111 samples, 0.16%)</title><rect x="33.9585%" y="4469" width="0.1607%" height="15" fill="rgb(214,202,17)" fg:x="253113803" fg:w="1198111"/><text x="34.2085%" y="4479.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1,198,111 samples, 0.16%)</title><rect x="33.9585%" y="4453" width="0.1607%" height="15" fill="rgb(229,111,3)" fg:x="253113803" fg:w="1198111"/><text x="34.2085%" y="4463.50"></text></g><g><title>main::benchmark::process_node_generated_from_scratch (8,748,241 samples, 1.17%)</title><rect x="33.1165%" y="4645" width="1.1737%" height="15" fill="rgb(229,172,15)" fg:x="246837903" fg:w="8748241"/><text x="33.3665%" y="4655.50"></text></g><g><title>main::benchmark::matches_id_id (2,472,341 samples, 0.33%)</title><rect x="33.9585%" y="4629" width="0.3317%" height="15" fill="rgb(230,224,35)" fg:x="253113803" fg:w="2472341"/><text x="34.2085%" y="4639.50"></text></g><g><title>main::benchmark::get_node_id_id (2,472,341 samples, 0.33%)</title><rect x="33.9585%" y="4613" width="0.3317%" height="15" fill="rgb(251,141,6)" fg:x="253113803" fg:w="2472341"/><text x="34.2085%" y="4623.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (2,472,341 samples, 0.33%)</title><rect x="33.9585%" y="4597" width="0.3317%" height="15" fill="rgb(225,208,6)" fg:x="253113803" fg:w="2472341"/><text x="34.2085%" y="4607.50"></text></g><g><title>main::benchmark::get_node_id_id::_{{closure}} (2,472,341 samples, 0.33%)</title><rect x="33.9585%" y="4581" width="0.3317%" height="15" fill="rgb(246,181,16)" fg:x="253113803" fg:w="2472341"/><text x="34.2085%" y="4591.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (2,472,341 samples, 0.33%)</title><rect x="33.9585%" y="4565" width="0.3317%" height="15" fill="rgb(227,129,36)" fg:x="253113803" fg:w="2472341"/><text x="34.2085%" y="4575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (2,472,341 samples, 0.33%)</title><rect x="33.9585%" y="4549" width="0.3317%" height="15" fill="rgb(248,117,24)" fg:x="253113803" fg:w="2472341"/><text x="34.2085%" y="4559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (2,472,341 samples, 0.33%)</title><rect x="33.9585%" y="4533" width="0.3317%" height="15" fill="rgb(214,185,35)" fg:x="253113803" fg:w="2472341"/><text x="34.2085%" y="4543.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (1,274,230 samples, 0.17%)</title><rect x="34.1192%" y="4517" width="0.1710%" height="15" fill="rgb(236,150,34)" fg:x="254311914" fg:w="1274230"/><text x="34.3692%" y="4527.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1,274,230 samples, 0.17%)</title><rect x="34.1192%" y="4501" width="0.1710%" height="15" fill="rgb(243,228,27)" fg:x="254311914" fg:w="1274230"/><text x="34.3692%" y="4511.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1,274,230 samples, 0.17%)</title><rect x="34.1192%" y="4485" width="0.1710%" height="15" fill="rgb(245,77,44)" fg:x="254311914" fg:w="1274230"/><text x="34.3692%" y="4495.50"></text></g><g><title>hashbrown::raw::ProbeSeq::move_next (1,274,230 samples, 0.17%)</title><rect x="34.1192%" y="4469" width="0.1710%" height="15" fill="rgb(235,214,42)" fg:x="254311914" fg:w="1274230"/><text x="34.3692%" y="4479.50"></text></g><g><title>core::ptr::drop_in_place&lt;css_bitvector_compiler::BitVector&gt; (1,247,559 samples, 0.17%)</title><rect x="34.2902%" y="4613" width="0.1674%" height="15" fill="rgb(221,74,3)" fg:x="255586144" fg:w="1247559"/><text x="34.5402%" y="4623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1,247,559 samples, 0.17%)</title><rect x="34.2902%" y="4597" width="0.1674%" height="15" fill="rgb(206,121,29)" fg:x="255586144" fg:w="1247559"/><text x="34.5402%" y="4607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1,247,559 samples, 0.17%)</title><rect x="34.2902%" y="4581" width="0.1674%" height="15" fill="rgb(249,131,53)" fg:x="255586144" fg:w="1247559"/><text x="34.5402%" y="4591.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,247,559 samples, 0.17%)</title><rect x="34.2902%" y="4565" width="0.1674%" height="15" fill="rgb(236,170,29)" fg:x="255586144" fg:w="1247559"/><text x="34.5402%" y="4575.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (1,247,559 samples, 0.17%)</title><rect x="34.2902%" y="4549" width="0.1674%" height="15" fill="rgb(247,96,15)" fg:x="255586144" fg:w="1247559"/><text x="34.5402%" y="4559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1,247,559 samples, 0.17%)</title><rect x="34.2902%" y="4533" width="0.1674%" height="15" fill="rgb(211,210,7)" fg:x="255586144" fg:w="1247559"/><text x="34.5402%" y="4543.50"></text></g><g><title>alloc::alloc::dealloc (1,247,559 samples, 0.17%)</title><rect x="34.2902%" y="4517" width="0.1674%" height="15" fill="rgb(240,88,50)" fg:x="255586144" fg:w="1247559"/><text x="34.5402%" y="4527.50"></text></g><g><title>cfree (1,247,559 samples, 0.17%)</title><rect x="34.2902%" y="4501" width="0.1674%" height="15" fill="rgb(209,229,26)" fg:x="255586144" fg:w="1247559"/><text x="34.5402%" y="4511.50"></text></g><g><title>css_bitvector_compiler::BitVector::is_bit_set (3,674,534 samples, 0.49%)</title><rect x="34.4575%" y="4613" width="0.4930%" height="15" fill="rgb(210,68,23)" fg:x="256833703" fg:w="3674534"/><text x="34.7075%" y="4623.50"></text></g><g><title>&lt;&amp;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (942,332 samples, 0.13%)</title><rect x="34.9505%" y="4581" width="0.1264%" height="15" fill="rgb(229,180,13)" fg:x="260508237" fg:w="942332"/><text x="35.2005%" y="4591.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::iter (942,332 samples, 0.13%)</title><rect x="34.9505%" y="4565" width="0.1264%" height="15" fill="rgb(236,53,44)" fg:x="260508237" fg:w="942332"/><text x="35.2005%" y="4575.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::iter (942,332 samples, 0.13%)</title><rect x="34.9505%" y="4549" width="0.1264%" height="15" fill="rgb(244,214,29)" fg:x="260508237" fg:w="942332"/><text x="35.2005%" y="4559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::keys (942,332 samples, 0.13%)</title><rect x="34.9505%" y="4533" width="0.1264%" height="15" fill="rgb(220,75,29)" fg:x="260508237" fg:w="942332"/><text x="35.2005%" y="4543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (942,332 samples, 0.13%)</title><rect x="34.9505%" y="4517" width="0.1264%" height="15" fill="rgb(214,183,37)" fg:x="260508237" fg:w="942332"/><text x="35.2005%" y="4527.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter (942,332 samples, 0.13%)</title><rect x="34.9505%" y="4501" width="0.1264%" height="15" fill="rgb(239,117,29)" fg:x="260508237" fg:w="942332"/><text x="35.2005%" y="4511.50"></text></g><g><title>hashbrown::raw::RawTableInner::iter (942,332 samples, 0.13%)</title><rect x="34.9505%" y="4485" width="0.1264%" height="15" fill="rgb(237,171,35)" fg:x="260508237" fg:w="942332"/><text x="35.2005%" y="4495.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (942,332 samples, 0.13%)</title><rect x="34.9505%" y="4469" width="0.1264%" height="15" fill="rgb(229,178,53)" fg:x="260508237" fg:w="942332"/><text x="35.2005%" y="4479.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_full (942,332 samples, 0.13%)</title><rect x="34.9505%" y="4453" width="0.1264%" height="15" fill="rgb(210,102,19)" fg:x="260508237" fg:w="942332"/><text x="35.2005%" y="4463.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1,266,181 samples, 0.17%)</title><rect x="35.0770%" y="4501" width="0.1699%" height="15" fill="rgb(235,127,22)" fg:x="261450569" fg:w="1266181"/><text x="35.3270%" y="4511.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1,266,181 samples, 0.17%)</title><rect x="35.0770%" y="4485" width="0.1699%" height="15" fill="rgb(244,31,31)" fg:x="261450569" fg:w="1266181"/><text x="35.3270%" y="4495.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1,266,181 samples, 0.17%)</title><rect x="35.0770%" y="4469" width="0.1699%" height="15" fill="rgb(231,43,21)" fg:x="261450569" fg:w="1266181"/><text x="35.3270%" y="4479.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1,266,181 samples, 0.17%)</title><rect x="35.0770%" y="4453" width="0.1699%" height="15" fill="rgb(217,131,35)" fg:x="261450569" fg:w="1266181"/><text x="35.3270%" y="4463.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1,266,181 samples, 0.17%)</title><rect x="35.0770%" y="4437" width="0.1699%" height="15" fill="rgb(221,149,4)" fg:x="261450569" fg:w="1266181"/><text x="35.3270%" y="4447.50"></text></g><g><title>hashbrown::map::make_hash (2,398,671 samples, 0.32%)</title><rect x="35.0770%" y="4533" width="0.3218%" height="15" fill="rgb(232,170,28)" fg:x="261450569" fg:w="2398671"/><text x="35.3270%" y="4543.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2,398,671 samples, 0.32%)</title><rect x="35.0770%" y="4517" width="0.3218%" height="15" fill="rgb(238,56,10)" fg:x="261450569" fg:w="2398671"/><text x="35.3270%" y="4527.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1,132,490 samples, 0.15%)</title><rect x="35.2468%" y="4501" width="0.1519%" height="15" fill="rgb(235,196,14)" fg:x="262716750" fg:w="1132490"/><text x="35.4968%" y="4511.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (1,132,490 samples, 0.15%)</title><rect x="35.2468%" y="4485" width="0.1519%" height="15" fill="rgb(216,45,48)" fg:x="262716750" fg:w="1132490"/><text x="35.4968%" y="4495.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (1,132,490 samples, 0.15%)</title><rect x="35.2468%" y="4469" width="0.1519%" height="15" fill="rgb(238,213,17)" fg:x="262716750" fg:w="1132490"/><text x="35.4968%" y="4479.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (1,132,490 samples, 0.15%)</title><rect x="35.2468%" y="4453" width="0.1519%" height="15" fill="rgb(212,13,2)" fg:x="262716750" fg:w="1132490"/><text x="35.4968%" y="4463.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (1,132,490 samples, 0.15%)</title><rect x="35.2468%" y="4437" width="0.1519%" height="15" fill="rgb(240,114,20)" fg:x="262716750" fg:w="1132490"/><text x="35.4968%" y="4447.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,132,490 samples, 0.15%)</title><rect x="35.2468%" y="4421" width="0.1519%" height="15" fill="rgb(228,41,40)" fg:x="262716750" fg:w="1132490"/><text x="35.4968%" y="4431.50"></text></g><g><title>core::hash::sip::u8to64_le (1,132,490 samples, 0.15%)</title><rect x="35.2468%" y="4405" width="0.1519%" height="15" fill="rgb(244,132,35)" fg:x="262716750" fg:w="1132490"/><text x="35.4968%" y="4415.50"></text></g><g><title>main::benchmark::matches_class_id (4,579,716 samples, 0.61%)</title><rect x="34.9505%" y="4613" width="0.6144%" height="15" fill="rgb(253,189,4)" fg:x="260508237" fg:w="4579716"/><text x="35.2005%" y="4623.50"></text></g><g><title>main::benchmark::node_has_class_id (4,579,716 samples, 0.61%)</title><rect x="34.9505%" y="4597" width="0.6144%" height="15" fill="rgb(224,37,19)" fg:x="260508237" fg:w="4579716"/><text x="35.2005%" y="4607.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (3,637,384 samples, 0.49%)</title><rect x="35.0770%" y="4581" width="0.4880%" height="15" fill="rgb(235,223,18)" fg:x="261450569" fg:w="3637384"/><text x="35.3270%" y="4591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (3,637,384 samples, 0.49%)</title><rect x="35.0770%" y="4565" width="0.4880%" height="15" fill="rgb(235,163,25)" fg:x="261450569" fg:w="3637384"/><text x="35.3270%" y="4575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (3,637,384 samples, 0.49%)</title><rect x="35.0770%" y="4549" width="0.4880%" height="15" fill="rgb(217,145,28)" fg:x="261450569" fg:w="3637384"/><text x="35.3270%" y="4559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (1,238,713 samples, 0.17%)</title><rect x="35.3988%" y="4533" width="0.1662%" height="15" fill="rgb(223,223,32)" fg:x="263849240" fg:w="1238713"/><text x="35.6488%" y="4543.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1,238,713 samples, 0.17%)</title><rect x="35.3988%" y="4517" width="0.1662%" height="15" fill="rgb(227,189,39)" fg:x="263849240" fg:w="1238713"/><text x="35.6488%" y="4527.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1,238,713 samples, 0.17%)</title><rect x="35.3988%" y="4501" width="0.1662%" height="15" fill="rgb(248,10,22)" fg:x="263849240" fg:w="1238713"/><text x="35.6488%" y="4511.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_empty (1,238,713 samples, 0.17%)</title><rect x="35.3988%" y="4485" width="0.1662%" height="15" fill="rgb(248,46,39)" fg:x="263849240" fg:w="1238713"/><text x="35.6488%" y="4495.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (1,238,713 samples, 0.17%)</title><rect x="35.3988%" y="4469" width="0.1662%" height="15" fill="rgb(248,113,48)" fg:x="263849240" fg:w="1238713"/><text x="35.6488%" y="4479.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1,238,713 samples, 0.17%)</title><rect x="35.3988%" y="4453" width="0.1662%" height="15" fill="rgb(245,16,25)" fg:x="263849240" fg:w="1238713"/><text x="35.6488%" y="4463.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,096,267 samples, 0.15%)</title><rect x="35.5650%" y="4389" width="0.1471%" height="15" fill="rgb(249,152,16)" fg:x="265087953" fg:w="1096267"/><text x="35.8150%" y="4399.50"></text></g><g><title>hashbrown::map::make_hash (2,424,851 samples, 0.33%)</title><rect x="35.5650%" y="4501" width="0.3253%" height="15" fill="rgb(250,16,1)" fg:x="265087953" fg:w="2424851"/><text x="35.8150%" y="4511.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2,424,851 samples, 0.33%)</title><rect x="35.5650%" y="4485" width="0.3253%" height="15" fill="rgb(249,138,3)" fg:x="265087953" fg:w="2424851"/><text x="35.8150%" y="4495.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2,424,851 samples, 0.33%)</title><rect x="35.5650%" y="4469" width="0.3253%" height="15" fill="rgb(227,71,41)" fg:x="265087953" fg:w="2424851"/><text x="35.8150%" y="4479.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (2,424,851 samples, 0.33%)</title><rect x="35.5650%" y="4453" width="0.3253%" height="15" fill="rgb(209,184,23)" fg:x="265087953" fg:w="2424851"/><text x="35.8150%" y="4463.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (2,424,851 samples, 0.33%)</title><rect x="35.5650%" y="4437" width="0.3253%" height="15" fill="rgb(223,215,31)" fg:x="265087953" fg:w="2424851"/><text x="35.8150%" y="4447.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (2,424,851 samples, 0.33%)</title><rect x="35.5650%" y="4421" width="0.3253%" height="15" fill="rgb(210,146,28)" fg:x="265087953" fg:w="2424851"/><text x="35.8150%" y="4431.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (2,424,851 samples, 0.33%)</title><rect x="35.5650%" y="4405" width="0.3253%" height="15" fill="rgb(209,183,41)" fg:x="265087953" fg:w="2424851"/><text x="35.8150%" y="4415.50"></text></g><g><title>core::hash::Hasher::write_u8 (1,328,584 samples, 0.18%)</title><rect x="35.7120%" y="4389" width="0.1782%" height="15" fill="rgb(209,224,45)" fg:x="266184220" fg:w="1328584"/><text x="35.9620%" y="4399.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,328,584 samples, 0.18%)</title><rect x="35.7120%" y="4373" width="0.1782%" height="15" fill="rgb(224,209,51)" fg:x="266184220" fg:w="1328584"/><text x="35.9620%" y="4383.50"></text></g><g><title>core::hash::sip::u8to64_le (1,328,584 samples, 0.18%)</title><rect x="35.7120%" y="4357" width="0.1782%" height="15" fill="rgb(223,17,39)" fg:x="266184220" fg:w="1328584"/><text x="35.9620%" y="4367.50"></text></g><g><title>core::intrinsics::likely (1,088,652 samples, 0.15%)</title><rect x="35.8903%" y="4453" width="0.1461%" height="15" fill="rgb(234,204,37)" fg:x="267512804" fg:w="1088652"/><text x="36.1403%" y="4463.50"></text></g><g><title>hashbrown::control::tag::Tag::full (1,360,005 samples, 0.18%)</title><rect x="36.0363%" y="4453" width="0.1825%" height="15" fill="rgb(236,120,5)" fg:x="268601456" fg:w="1360005"/><text x="36.2863%" y="4463.50"></text></g><g><title>main::benchmark::process_node_generated_from_scratch (15,696,548 samples, 2.11%)</title><rect x="34.2902%" y="4629" width="2.1059%" height="15" fill="rgb(248,97,27)" fg:x="255586144" fg:w="15696548"/><text x="34.5402%" y="4639.50">m..</text></g><g><title>main::benchmark::matches_id_id (6,194,739 samples, 0.83%)</title><rect x="35.5650%" y="4613" width="0.8311%" height="15" fill="rgb(240,66,17)" fg:x="265087953" fg:w="6194739"/><text x="35.8150%" y="4623.50"></text></g><g><title>main::benchmark::get_node_id_id (6,194,739 samples, 0.83%)</title><rect x="35.5650%" y="4597" width="0.8311%" height="15" fill="rgb(210,79,3)" fg:x="265087953" fg:w="6194739"/><text x="35.8150%" y="4607.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (6,194,739 samples, 0.83%)</title><rect x="35.5650%" y="4581" width="0.8311%" height="15" fill="rgb(214,176,27)" fg:x="265087953" fg:w="6194739"/><text x="35.8150%" y="4591.50"></text></g><g><title>main::benchmark::get_node_id_id::_{{closure}} (6,194,739 samples, 0.83%)</title><rect x="35.5650%" y="4565" width="0.8311%" height="15" fill="rgb(235,185,3)" fg:x="265087953" fg:w="6194739"/><text x="35.8150%" y="4575.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (6,194,739 samples, 0.83%)</title><rect x="35.5650%" y="4549" width="0.8311%" height="15" fill="rgb(227,24,12)" fg:x="265087953" fg:w="6194739"/><text x="35.8150%" y="4559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (6,194,739 samples, 0.83%)</title><rect x="35.5650%" y="4533" width="0.8311%" height="15" fill="rgb(252,169,48)" fg:x="265087953" fg:w="6194739"/><text x="35.8150%" y="4543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (6,194,739 samples, 0.83%)</title><rect x="35.5650%" y="4517" width="0.8311%" height="15" fill="rgb(212,65,1)" fg:x="265087953" fg:w="6194739"/><text x="35.8150%" y="4527.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (3,769,888 samples, 0.51%)</title><rect x="35.8903%" y="4501" width="0.5058%" height="15" fill="rgb(242,39,24)" fg:x="267512804" fg:w="3769888"/><text x="36.1403%" y="4511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (3,769,888 samples, 0.51%)</title><rect x="35.8903%" y="4485" width="0.5058%" height="15" fill="rgb(249,32,23)" fg:x="267512804" fg:w="3769888"/><text x="36.1403%" y="4495.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (3,769,888 samples, 0.51%)</title><rect x="35.8903%" y="4469" width="0.5058%" height="15" fill="rgb(251,195,23)" fg:x="267512804" fg:w="3769888"/><text x="36.1403%" y="4479.50"></text></g><g><title>hashbrown::raw::ProbeSeq::move_next (1,321,231 samples, 0.18%)</title><rect x="36.2188%" y="4453" width="0.1773%" height="15" fill="rgb(236,174,8)" fg:x="269961461" fg:w="1321231"/><text x="36.4688%" y="4463.50"></text></g><g><title>core::ptr::drop_in_place&lt;css_bitvector_compiler::BitVector&gt; (1,272,476 samples, 0.17%)</title><rect x="36.5717%" y="4597" width="0.1707%" height="15" fill="rgb(220,197,8)" fg:x="272591592" fg:w="1272476"/><text x="36.8217%" y="4607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1,272,476 samples, 0.17%)</title><rect x="36.5717%" y="4581" width="0.1707%" height="15" fill="rgb(240,108,37)" fg:x="272591592" fg:w="1272476"/><text x="36.8217%" y="4591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1,272,476 samples, 0.17%)</title><rect x="36.5717%" y="4565" width="0.1707%" height="15" fill="rgb(232,176,24)" fg:x="272591592" fg:w="1272476"/><text x="36.8217%" y="4575.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,272,476 samples, 0.17%)</title><rect x="36.5717%" y="4549" width="0.1707%" height="15" fill="rgb(243,35,29)" fg:x="272591592" fg:w="1272476"/><text x="36.8217%" y="4559.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (1,272,476 samples, 0.17%)</title><rect x="36.5717%" y="4533" width="0.1707%" height="15" fill="rgb(210,37,18)" fg:x="272591592" fg:w="1272476"/><text x="36.8217%" y="4543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1,272,476 samples, 0.17%)</title><rect x="36.5717%" y="4517" width="0.1707%" height="15" fill="rgb(224,184,40)" fg:x="272591592" fg:w="1272476"/><text x="36.8217%" y="4527.50"></text></g><g><title>alloc::alloc::dealloc (1,272,476 samples, 0.17%)</title><rect x="36.5717%" y="4501" width="0.1707%" height="15" fill="rgb(236,39,29)" fg:x="272591592" fg:w="1272476"/><text x="36.8217%" y="4511.50"></text></g><g><title>cfree (1,272,476 samples, 0.17%)</title><rect x="36.5717%" y="4485" width="0.1707%" height="15" fill="rgb(232,48,39)" fg:x="272591592" fg:w="1272476"/><text x="36.8217%" y="4495.50"></text></g><g><title>css_bitvector_compiler::BitVector::is_bit_set (2,775,893 samples, 0.37%)</title><rect x="36.7424%" y="4597" width="0.3724%" height="15" fill="rgb(236,34,42)" fg:x="273864068" fg:w="2775893"/><text x="36.9924%" y="4607.50"></text></g><g><title>hashbrown::control::group::sse2::Group::load_aligned (2,674,606 samples, 0.36%)</title><rect x="37.2651%" y="4437" width="0.3588%" height="15" fill="rgb(243,106,37)" fg:x="277760000" fg:w="2674606"/><text x="37.5151%" y="4447.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (2,674,606 samples, 0.36%)</title><rect x="37.2651%" y="4421" width="0.3588%" height="15" fill="rgb(218,96,6)" fg:x="277760000" fg:w="2674606"/><text x="37.5151%" y="4431.50"></text></g><g><title>&lt;&amp;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (5,019,008 samples, 0.67%)</title><rect x="37.1148%" y="4565" width="0.6734%" height="15" fill="rgb(235,130,12)" fg:x="276639961" fg:w="5019008"/><text x="37.3648%" y="4575.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::iter (5,019,008 samples, 0.67%)</title><rect x="37.1148%" y="4549" width="0.6734%" height="15" fill="rgb(231,95,0)" fg:x="276639961" fg:w="5019008"/><text x="37.3648%" y="4559.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::iter (5,019,008 samples, 0.67%)</title><rect x="37.1148%" y="4533" width="0.6734%" height="15" fill="rgb(228,12,23)" fg:x="276639961" fg:w="5019008"/><text x="37.3648%" y="4543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::keys (5,019,008 samples, 0.67%)</title><rect x="37.1148%" y="4517" width="0.6734%" height="15" fill="rgb(216,12,1)" fg:x="276639961" fg:w="5019008"/><text x="37.3648%" y="4527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (5,019,008 samples, 0.67%)</title><rect x="37.1148%" y="4501" width="0.6734%" height="15" fill="rgb(219,59,3)" fg:x="276639961" fg:w="5019008"/><text x="37.3648%" y="4511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter (5,019,008 samples, 0.67%)</title><rect x="37.1148%" y="4485" width="0.6734%" height="15" fill="rgb(215,208,46)" fg:x="276639961" fg:w="5019008"/><text x="37.3648%" y="4495.50"></text></g><g><title>hashbrown::raw::RawTableInner::iter (5,019,008 samples, 0.67%)</title><rect x="37.1148%" y="4469" width="0.6734%" height="15" fill="rgb(254,224,29)" fg:x="276639961" fg:w="5019008"/><text x="37.3648%" y="4479.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (3,898,969 samples, 0.52%)</title><rect x="37.2651%" y="4453" width="0.5231%" height="15" fill="rgb(232,14,29)" fg:x="277760000" fg:w="3898969"/><text x="37.5151%" y="4463.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_full (1,224,363 samples, 0.16%)</title><rect x="37.6239%" y="4437" width="0.1643%" height="15" fill="rgb(208,45,52)" fg:x="280434606" fg:w="1224363"/><text x="37.8739%" y="4447.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::invert (1,224,363 samples, 0.16%)</title><rect x="37.6239%" y="4421" width="0.1643%" height="15" fill="rgb(234,191,28)" fg:x="280434606" fg:w="1224363"/><text x="37.8739%" y="4431.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2,084,904 samples, 0.28%)</title><rect x="38.6529%" y="4421" width="0.2797%" height="15" fill="rgb(244,67,43)" fg:x="288104107" fg:w="2084904"/><text x="38.9029%" y="4431.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (9,645,581 samples, 1.29%)</title><rect x="38.1346%" y="4485" width="1.2941%" height="15" fill="rgb(236,189,24)" fg:x="284241201" fg:w="9645581"/><text x="38.3846%" y="4495.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (9,645,581 samples, 1.29%)</title><rect x="38.1346%" y="4469" width="1.2941%" height="15" fill="rgb(239,214,33)" fg:x="284241201" fg:w="9645581"/><text x="38.3846%" y="4479.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (9,645,581 samples, 1.29%)</title><rect x="38.1346%" y="4453" width="1.2941%" height="15" fill="rgb(226,176,41)" fg:x="284241201" fg:w="9645581"/><text x="38.3846%" y="4463.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (7,166,615 samples, 0.96%)</title><rect x="38.4672%" y="4437" width="0.9615%" height="15" fill="rgb(248,47,8)" fg:x="286720167" fg:w="7166615"/><text x="38.7172%" y="4447.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3,697,771 samples, 0.50%)</title><rect x="38.9326%" y="4421" width="0.4961%" height="15" fill="rgb(218,81,44)" fg:x="290189011" fg:w="3697771"/><text x="39.1826%" y="4431.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1,291,300 samples, 0.17%)</title><rect x="39.4287%" y="4485" width="0.1732%" height="15" fill="rgb(213,98,6)" fg:x="293886782" fg:w="1291300"/><text x="39.6787%" y="4495.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (1,291,300 samples, 0.17%)</title><rect x="39.4287%" y="4469" width="0.1732%" height="15" fill="rgb(222,85,22)" fg:x="293886782" fg:w="1291300"/><text x="39.6787%" y="4479.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (1,291,300 samples, 0.17%)</title><rect x="39.4287%" y="4453" width="0.1732%" height="15" fill="rgb(239,46,39)" fg:x="293886782" fg:w="1291300"/><text x="39.6787%" y="4463.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (1,291,300 samples, 0.17%)</title><rect x="39.4287%" y="4437" width="0.1732%" height="15" fill="rgb(237,12,29)" fg:x="293886782" fg:w="1291300"/><text x="39.6787%" y="4447.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2,641,457 samples, 0.35%)</title><rect x="39.6019%" y="4405" width="0.3544%" height="15" fill="rgb(214,77,8)" fg:x="295178082" fg:w="2641457"/><text x="39.8519%" y="4415.50"></text></g><g><title>core::hash::sip::u8to64_le (1,329,069 samples, 0.18%)</title><rect x="39.7780%" y="4389" width="0.1783%" height="15" fill="rgb(217,168,37)" fg:x="296490470" fg:w="1329069"/><text x="40.0280%" y="4399.50"></text></g><g><title>hashbrown::map::make_hash (22,143,165 samples, 2.97%)</title><rect x="37.7882%" y="4517" width="2.9708%" height="15" fill="rgb(221,217,23)" fg:x="281658969" fg:w="22143165"/><text x="38.0382%" y="4527.50">has..</text></g><g><title>core::hash::BuildHasher::hash_one (19,560,933 samples, 2.62%)</title><rect x="38.1346%" y="4501" width="2.6244%" height="15" fill="rgb(243,229,36)" fg:x="284241201" fg:w="19560933"/><text x="38.3846%" y="4511.50">co..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (8,624,052 samples, 1.16%)</title><rect x="39.6019%" y="4485" width="1.1570%" height="15" fill="rgb(251,163,40)" fg:x="295178082" fg:w="8624052"/><text x="39.8519%" y="4495.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (8,624,052 samples, 1.16%)</title><rect x="39.6019%" y="4469" width="1.1570%" height="15" fill="rgb(237,222,12)" fg:x="295178082" fg:w="8624052"/><text x="39.8519%" y="4479.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (8,624,052 samples, 1.16%)</title><rect x="39.6019%" y="4453" width="1.1570%" height="15" fill="rgb(248,132,6)" fg:x="295178082" fg:w="8624052"/><text x="39.8519%" y="4463.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (8,624,052 samples, 1.16%)</title><rect x="39.6019%" y="4437" width="1.1570%" height="15" fill="rgb(227,167,50)" fg:x="295178082" fg:w="8624052"/><text x="39.8519%" y="4447.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (8,624,052 samples, 1.16%)</title><rect x="39.6019%" y="4421" width="1.1570%" height="15" fill="rgb(242,84,37)" fg:x="295178082" fg:w="8624052"/><text x="39.8519%" y="4431.50"></text></g><g><title>core::hash::Hasher::write_u8 (5,982,595 samples, 0.80%)</title><rect x="39.9563%" y="4405" width="0.8026%" height="15" fill="rgb(212,4,50)" fg:x="297819539" fg:w="5982595"/><text x="40.2063%" y="4415.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (5,982,595 samples, 0.80%)</title><rect x="39.9563%" y="4389" width="0.8026%" height="15" fill="rgb(230,228,32)" fg:x="297819539" fg:w="5982595"/><text x="40.2063%" y="4399.50"></text></g><g><title>core::hash::sip::u8to64_le (3,728,283 samples, 0.50%)</title><rect x="40.2588%" y="4373" width="0.5002%" height="15" fill="rgb(248,217,23)" fg:x="300073851" fg:w="3728283"/><text x="40.5088%" y="4383.50"></text></g><g><title>&lt;hashbrown::control::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1,142,909 samples, 0.15%)</title><rect x="40.7590%" y="4469" width="0.1533%" height="15" fill="rgb(238,197,32)" fg:x="303802134" fg:w="1142909"/><text x="41.0090%" y="4479.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::lowest_set_bit (1,142,909 samples, 0.15%)</title><rect x="40.7590%" y="4453" width="0.1533%" height="15" fill="rgb(236,106,1)" fg:x="303802134" fg:w="1142909"/><text x="41.0090%" y="4463.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::nonzero_trailing_zeros (1,142,909 samples, 0.15%)</title><rect x="40.7590%" y="4437" width="0.1533%" height="15" fill="rgb(219,228,13)" fg:x="303802134" fg:w="1142909"/><text x="41.0090%" y="4447.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u16&gt;::trailing_zeros (1,142,909 samples, 0.15%)</title><rect x="40.7590%" y="4421" width="0.1533%" height="15" fill="rgb(238,30,35)" fg:x="303802134" fg:w="1142909"/><text x="41.0090%" y="4431.50"></text></g><g><title>hashbrown::control::tag::Tag::full (2,448,656 samples, 0.33%)</title><rect x="40.9123%" y="4469" width="0.3285%" height="15" fill="rgb(236,70,23)" fg:x="304945043" fg:w="2448656"/><text x="41.1623%" y="4479.50"></text></g><g><title>main::benchmark::matches_class_id (37,075,629 samples, 4.97%)</title><rect x="37.1148%" y="4597" width="4.9742%" height="15" fill="rgb(249,104,48)" fg:x="276639961" fg:w="37075629"/><text x="37.3648%" y="4607.50">main::..</text></g><g><title>main::benchmark::node_has_class_id (37,075,629 samples, 4.97%)</title><rect x="37.1148%" y="4581" width="4.9742%" height="15" fill="rgb(254,117,50)" fg:x="276639961" fg:w="37075629"/><text x="37.3648%" y="4591.50">main::..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (32,056,621 samples, 4.30%)</title><rect x="37.7882%" y="4565" width="4.3008%" height="15" fill="rgb(223,152,4)" fg:x="281658969" fg:w="32056621"/><text x="38.0382%" y="4575.50">std::..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (32,056,621 samples, 4.30%)</title><rect x="37.7882%" y="4549" width="4.3008%" height="15" fill="rgb(245,6,2)" fg:x="281658969" fg:w="32056621"/><text x="38.0382%" y="4559.50">hashb..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (32,056,621 samples, 4.30%)</title><rect x="37.7882%" y="4533" width="4.3008%" height="15" fill="rgb(249,150,24)" fg:x="281658969" fg:w="32056621"/><text x="38.0382%" y="4543.50">hashb..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (9,913,456 samples, 1.33%)</title><rect x="40.7590%" y="4517" width="1.3300%" height="15" fill="rgb(228,185,42)" fg:x="303802134" fg:w="9913456"/><text x="41.0090%" y="4527.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (9,913,456 samples, 1.33%)</title><rect x="40.7590%" y="4501" width="1.3300%" height="15" fill="rgb(226,39,33)" fg:x="303802134" fg:w="9913456"/><text x="41.0090%" y="4511.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (9,913,456 samples, 1.33%)</title><rect x="40.7590%" y="4485" width="1.3300%" height="15" fill="rgb(221,166,19)" fg:x="303802134" fg:w="9913456"/><text x="41.0090%" y="4495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (6,321,891 samples, 0.85%)</title><rect x="41.2408%" y="4469" width="0.8482%" height="15" fill="rgb(209,109,2)" fg:x="307393699" fg:w="6321891"/><text x="41.4908%" y="4479.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (6,321,891 samples, 0.85%)</title><rect x="41.2408%" y="4453" width="0.8482%" height="15" fill="rgb(252,216,26)" fg:x="307393699" fg:w="6321891"/><text x="41.4908%" y="4463.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (6,321,891 samples, 0.85%)</title><rect x="41.2408%" y="4437" width="0.8482%" height="15" fill="rgb(227,173,36)" fg:x="307393699" fg:w="6321891"/><text x="41.4908%" y="4447.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (4,965,737 samples, 0.67%)</title><rect x="41.4228%" y="4421" width="0.6662%" height="15" fill="rgb(209,90,7)" fg:x="308749853" fg:w="4965737"/><text x="41.6728%" y="4431.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (4,965,737 samples, 0.67%)</title><rect x="41.4228%" y="4405" width="0.6662%" height="15" fill="rgb(250,194,11)" fg:x="308749853" fg:w="4965737"/><text x="41.6728%" y="4415.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (4,965,737 samples, 0.67%)</title><rect x="41.4228%" y="4389" width="0.6662%" height="15" fill="rgb(220,72,50)" fg:x="308749853" fg:w="4965737"/><text x="41.6728%" y="4399.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (4,965,737 samples, 0.67%)</title><rect x="41.4228%" y="4373" width="0.6662%" height="15" fill="rgb(222,106,48)" fg:x="308749853" fg:w="4965737"/><text x="41.6728%" y="4383.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (4,965,737 samples, 0.67%)</title><rect x="41.4228%" y="4357" width="0.6662%" height="15" fill="rgb(216,220,45)" fg:x="308749853" fg:w="4965737"/><text x="41.6728%" y="4367.50"></text></g><g><title>[libc.so.6] (3,537,443 samples, 0.47%)</title><rect x="41.6144%" y="4341" width="0.4746%" height="15" fill="rgb(234,112,18)" fg:x="310178147" fg:w="3537443"/><text x="41.8644%" y="4351.50"></text></g><g><title>main::benchmark::get_string_to_id_map (1,126,746 samples, 0.15%)</title><rect x="42.0890%" y="4533" width="0.1512%" height="15" fill="rgb(206,179,9)" fg:x="313715590" fg:w="1126746"/><text x="42.3390%" y="4543.50"></text></g><g><title>std::sync::once_lock::OnceLock&lt;T&gt;::get_or_init (1,126,746 samples, 0.15%)</title><rect x="42.0890%" y="4517" width="0.1512%" height="15" fill="rgb(215,115,40)" fg:x="313715590" fg:w="1126746"/><text x="42.3390%" y="4527.50"></text></g><g><title>std::sync::once_lock::OnceLock&lt;T&gt;::get_or_try_init (1,126,746 samples, 0.15%)</title><rect x="42.0890%" y="4501" width="0.1512%" height="15" fill="rgb(222,69,34)" fg:x="313715590" fg:w="1126746"/><text x="42.3390%" y="4511.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (2,511,830 samples, 0.34%)</title><rect x="42.2402%" y="4453" width="0.3370%" height="15" fill="rgb(209,161,10)" fg:x="314842336" fg:w="2511830"/><text x="42.4902%" y="4463.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2,511,830 samples, 0.34%)</title><rect x="42.2402%" y="4437" width="0.3370%" height="15" fill="rgb(217,6,38)" fg:x="314842336" fg:w="2511830"/><text x="42.4902%" y="4447.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2,511,830 samples, 0.34%)</title><rect x="42.2402%" y="4421" width="0.3370%" height="15" fill="rgb(229,229,48)" fg:x="314842336" fg:w="2511830"/><text x="42.4902%" y="4431.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1,202,761 samples, 0.16%)</title><rect x="42.4158%" y="4405" width="0.1614%" height="15" fill="rgb(225,21,28)" fg:x="316151405" fg:w="1202761"/><text x="42.6658%" y="4415.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1,202,761 samples, 0.16%)</title><rect x="42.4158%" y="4389" width="0.1614%" height="15" fill="rgb(206,33,13)" fg:x="316151405" fg:w="1202761"/><text x="42.6658%" y="4399.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1,185,416 samples, 0.16%)</title><rect x="42.5771%" y="4453" width="0.1590%" height="15" fill="rgb(242,178,17)" fg:x="317354166" fg:w="1185416"/><text x="42.8271%" y="4463.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2,531,036 samples, 0.34%)</title><rect x="42.9036%" y="4373" width="0.3396%" height="15" fill="rgb(220,162,5)" fg:x="319787621" fg:w="2531036"/><text x="43.1536%" y="4383.50"></text></g><g><title>core::hash::sip::u8to64_le (1,209,477 samples, 0.16%)</title><rect x="43.0809%" y="4357" width="0.1623%" height="15" fill="rgb(210,33,43)" fg:x="321109180" fg:w="1209477"/><text x="43.3309%" y="4367.50"></text></g><g><title>main::benchmark::matches_id_id (9,886,155 samples, 1.33%)</title><rect x="42.0890%" y="4597" width="1.3264%" height="15" fill="rgb(216,116,54)" fg:x="313715590" fg:w="9886155"/><text x="42.3390%" y="4607.50"></text></g><g><title>main::benchmark::get_node_id_id (9,886,155 samples, 1.33%)</title><rect x="42.0890%" y="4581" width="1.3264%" height="15" fill="rgb(249,92,24)" fg:x="313715590" fg:w="9886155"/><text x="42.3390%" y="4591.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (9,886,155 samples, 1.33%)</title><rect x="42.0890%" y="4565" width="1.3264%" height="15" fill="rgb(231,189,14)" fg:x="313715590" fg:w="9886155"/><text x="42.3390%" y="4575.50"></text></g><g><title>main::benchmark::get_node_id_id::_{{closure}} (9,886,155 samples, 1.33%)</title><rect x="42.0890%" y="4549" width="1.3264%" height="15" fill="rgb(230,8,41)" fg:x="313715590" fg:w="9886155"/><text x="42.3390%" y="4559.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (8,759,409 samples, 1.18%)</title><rect x="42.2402%" y="4533" width="1.1752%" height="15" fill="rgb(249,7,27)" fg:x="314842336" fg:w="8759409"/><text x="42.4902%" y="4543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (8,759,409 samples, 1.18%)</title><rect x="42.2402%" y="4517" width="1.1752%" height="15" fill="rgb(232,86,5)" fg:x="314842336" fg:w="8759409"/><text x="42.4902%" y="4527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (8,759,409 samples, 1.18%)</title><rect x="42.2402%" y="4501" width="1.1752%" height="15" fill="rgb(224,175,18)" fg:x="314842336" fg:w="8759409"/><text x="42.4902%" y="4511.50"></text></g><g><title>hashbrown::map::make_hash (8,759,409 samples, 1.18%)</title><rect x="42.2402%" y="4485" width="1.1752%" height="15" fill="rgb(220,129,12)" fg:x="314842336" fg:w="8759409"/><text x="42.4902%" y="4495.50"></text></g><g><title>core::hash::BuildHasher::hash_one (8,759,409 samples, 1.18%)</title><rect x="42.2402%" y="4469" width="1.1752%" height="15" fill="rgb(210,19,36)" fg:x="314842336" fg:w="8759409"/><text x="42.4902%" y="4479.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (5,062,163 samples, 0.68%)</title><rect x="42.7362%" y="4453" width="0.6792%" height="15" fill="rgb(219,96,14)" fg:x="318539582" fg:w="5062163"/><text x="42.9862%" y="4463.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (5,062,163 samples, 0.68%)</title><rect x="42.7362%" y="4437" width="0.6792%" height="15" fill="rgb(249,106,1)" fg:x="318539582" fg:w="5062163"/><text x="42.9862%" y="4447.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (5,062,163 samples, 0.68%)</title><rect x="42.7362%" y="4421" width="0.6792%" height="15" fill="rgb(249,155,20)" fg:x="318539582" fg:w="5062163"/><text x="42.9862%" y="4431.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (5,062,163 samples, 0.68%)</title><rect x="42.7362%" y="4405" width="0.6792%" height="15" fill="rgb(244,168,9)" fg:x="318539582" fg:w="5062163"/><text x="42.9862%" y="4415.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (5,062,163 samples, 0.68%)</title><rect x="42.7362%" y="4389" width="0.6792%" height="15" fill="rgb(216,23,50)" fg:x="318539582" fg:w="5062163"/><text x="42.9862%" y="4399.50"></text></g><g><title>core::hash::Hasher::write_u8 (1,283,088 samples, 0.17%)</title><rect x="43.2432%" y="4373" width="0.1721%" height="15" fill="rgb(224,219,20)" fg:x="322318657" fg:w="1283088"/><text x="43.4932%" y="4383.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,283,088 samples, 0.17%)</title><rect x="43.2432%" y="4357" width="0.1721%" height="15" fill="rgb(222,156,15)" fg:x="322318657" fg:w="1283088"/><text x="43.4932%" y="4367.50"></text></g><g><title>main::benchmark::process_node_generated_from_scratch (53,630,990 samples, 7.20%)</title><rect x="36.3961%" y="4613" width="7.1953%" height="15" fill="rgb(231,97,17)" fg:x="271282692" fg:w="53630990"/><text x="36.6461%" y="4623.50">main::benc..</text></g><g><title>main::benchmark::matches_tag_id (1,311,937 samples, 0.18%)</title><rect x="43.4153%" y="4597" width="0.1760%" height="15" fill="rgb(218,70,48)" fg:x="323601745" fg:w="1311937"/><text x="43.6653%" y="4607.50"></text></g><g><title>main::benchmark::get_node_tag_id (1,311,937 samples, 0.18%)</title><rect x="43.4153%" y="4581" width="0.1760%" height="15" fill="rgb(212,196,52)" fg:x="323601745" fg:w="1311937"/><text x="43.6653%" y="4591.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1,311,937 samples, 0.18%)</title><rect x="43.4153%" y="4565" width="0.1760%" height="15" fill="rgb(243,203,18)" fg:x="323601745" fg:w="1311937"/><text x="43.6653%" y="4575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1,311,937 samples, 0.18%)</title><rect x="43.4153%" y="4549" width="0.1760%" height="15" fill="rgb(252,125,41)" fg:x="323601745" fg:w="1311937"/><text x="43.6653%" y="4559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1,311,937 samples, 0.18%)</title><rect x="43.4153%" y="4533" width="0.1760%" height="15" fill="rgb(223,180,33)" fg:x="323601745" fg:w="1311937"/><text x="43.6653%" y="4543.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (1,311,937 samples, 0.18%)</title><rect x="43.4153%" y="4517" width="0.1760%" height="15" fill="rgb(254,159,46)" fg:x="323601745" fg:w="1311937"/><text x="43.6653%" y="4527.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1,311,937 samples, 0.18%)</title><rect x="43.4153%" y="4501" width="0.1760%" height="15" fill="rgb(254,38,10)" fg:x="323601745" fg:w="1311937"/><text x="43.6653%" y="4511.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1,311,937 samples, 0.18%)</title><rect x="43.4153%" y="4485" width="0.1760%" height="15" fill="rgb(208,217,32)" fg:x="323601745" fg:w="1311937"/><text x="43.6653%" y="4495.50"></text></g><g><title>cfree (2,557,837 samples, 0.34%)</title><rect x="43.5914%" y="4597" width="0.3432%" height="15" fill="rgb(221,120,13)" fg:x="324913682" fg:w="2557837"/><text x="43.8414%" y="4607.50"></text></g><g><title>css_bitvector_compiler::BitVector::is_bit_set (1,236,854 samples, 0.17%)</title><rect x="44.0987%" y="4581" width="0.1659%" height="15" fill="rgb(246,54,52)" fg:x="328695211" fg:w="1236854"/><text x="44.3487%" y="4591.50"></text></g><g><title>&lt;std::collections::hash::set::Iter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,206,846 samples, 0.16%)</title><rect x="44.2646%" y="4549" width="0.1619%" height="15" fill="rgb(242,34,25)" fg:x="329932065" fg:w="1206846"/><text x="44.5146%" y="4559.50"></text></g><g><title>&lt;hashbrown::set::Iter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,206,846 samples, 0.16%)</title><rect x="44.2646%" y="4533" width="0.1619%" height="15" fill="rgb(247,209,9)" fg:x="329932065" fg:w="1206846"/><text x="44.5146%" y="4543.50"></text></g><g><title>&lt;hashbrown::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,206,846 samples, 0.16%)</title><rect x="44.2646%" y="4517" width="0.1619%" height="15" fill="rgb(228,71,26)" fg:x="329932065" fg:w="1206846"/><text x="44.5146%" y="4527.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,206,846 samples, 0.16%)</title><rect x="44.2646%" y="4501" width="0.1619%" height="15" fill="rgb(222,145,49)" fg:x="329932065" fg:w="1206846"/><text x="44.5146%" y="4511.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,206,846 samples, 0.16%)</title><rect x="44.2646%" y="4485" width="0.1619%" height="15" fill="rgb(218,121,17)" fg:x="329932065" fg:w="1206846"/><text x="44.5146%" y="4495.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1,321,723 samples, 0.18%)</title><rect x="45.1434%" y="4405" width="0.1773%" height="15" fill="rgb(244,50,7)" fg:x="336482098" fg:w="1321723"/><text x="45.3934%" y="4415.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (7,932,691 samples, 1.06%)</title><rect x="44.6026%" y="4469" width="1.0643%" height="15" fill="rgb(246,229,37)" fg:x="332450965" fg:w="7932691"/><text x="44.8526%" y="4479.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (7,932,691 samples, 1.06%)</title><rect x="44.6026%" y="4453" width="1.0643%" height="15" fill="rgb(225,18,5)" fg:x="332450965" fg:w="7932691"/><text x="44.8526%" y="4463.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (7,932,691 samples, 1.06%)</title><rect x="44.6026%" y="4437" width="1.0643%" height="15" fill="rgb(213,204,8)" fg:x="332450965" fg:w="7932691"/><text x="44.8526%" y="4447.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (5,281,073 samples, 0.71%)</title><rect x="44.9583%" y="4421" width="0.7085%" height="15" fill="rgb(238,103,6)" fg:x="335102583" fg:w="5281073"/><text x="45.2083%" y="4431.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2,579,835 samples, 0.35%)</title><rect x="45.3207%" y="4405" width="0.3461%" height="15" fill="rgb(222,25,35)" fg:x="337803821" fg:w="2579835"/><text x="45.5707%" y="4415.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (2,630,790 samples, 0.35%)</title><rect x="45.6669%" y="4469" width="0.3530%" height="15" fill="rgb(213,203,35)" fg:x="340383656" fg:w="2630790"/><text x="45.9169%" y="4479.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (2,630,790 samples, 0.35%)</title><rect x="45.6669%" y="4453" width="0.3530%" height="15" fill="rgb(221,79,53)" fg:x="340383656" fg:w="2630790"/><text x="45.9169%" y="4463.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (2,630,790 samples, 0.35%)</title><rect x="45.6669%" y="4437" width="0.3530%" height="15" fill="rgb(243,200,35)" fg:x="340383656" fg:w="2630790"/><text x="45.9169%" y="4447.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (2,630,790 samples, 0.35%)</title><rect x="45.6669%" y="4421" width="0.3530%" height="15" fill="rgb(248,60,25)" fg:x="340383656" fg:w="2630790"/><text x="45.9169%" y="4431.50"></text></g><g><title>hashbrown::map::make_hash (14,473,792 samples, 1.94%)</title><rect x="44.4266%" y="4501" width="1.9418%" height="15" fill="rgb(227,53,46)" fg:x="331138911" fg:w="14473792"/><text x="44.6766%" y="4511.50">h..</text></g><g><title>core::hash::BuildHasher::hash_one (14,473,792 samples, 1.94%)</title><rect x="44.4266%" y="4485" width="1.9418%" height="15" fill="rgb(216,120,32)" fg:x="331138911" fg:w="14473792"/><text x="44.6766%" y="4495.50">c..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2,598,257 samples, 0.35%)</title><rect x="46.0198%" y="4469" width="0.3486%" height="15" fill="rgb(220,134,1)" fg:x="343014446" fg:w="2598257"/><text x="46.2698%" y="4479.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (2,598,257 samples, 0.35%)</title><rect x="46.0198%" y="4453" width="0.3486%" height="15" fill="rgb(237,168,5)" fg:x="343014446" fg:w="2598257"/><text x="46.2698%" y="4463.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (2,598,257 samples, 0.35%)</title><rect x="46.0198%" y="4437" width="0.3486%" height="15" fill="rgb(231,100,33)" fg:x="343014446" fg:w="2598257"/><text x="46.2698%" y="4447.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (2,598,257 samples, 0.35%)</title><rect x="46.0198%" y="4421" width="0.3486%" height="15" fill="rgb(236,177,47)" fg:x="343014446" fg:w="2598257"/><text x="46.2698%" y="4431.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (2,598,257 samples, 0.35%)</title><rect x="46.0198%" y="4405" width="0.3486%" height="15" fill="rgb(235,7,49)" fg:x="343014446" fg:w="2598257"/><text x="46.2698%" y="4415.50"></text></g><g><title>core::hash::Hasher::write_u8 (2,598,257 samples, 0.35%)</title><rect x="46.0198%" y="4389" width="0.3486%" height="15" fill="rgb(232,119,22)" fg:x="343014446" fg:w="2598257"/><text x="46.2698%" y="4399.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2,598,257 samples, 0.35%)</title><rect x="46.0198%" y="4373" width="0.3486%" height="15" fill="rgb(254,73,53)" fg:x="343014446" fg:w="2598257"/><text x="46.2698%" y="4383.50"></text></g><g><title>core::hash::sip::u8to64_le (2,598,257 samples, 0.35%)</title><rect x="46.0198%" y="4357" width="0.3486%" height="15" fill="rgb(251,35,20)" fg:x="343014446" fg:w="2598257"/><text x="46.2698%" y="4367.50"></text></g><g><title>main::benchmark::matches_class_id (16,829,514 samples, 2.26%)</title><rect x="44.2646%" y="4581" width="2.2579%" height="15" fill="rgb(241,119,20)" fg:x="329932065" fg:w="16829514"/><text x="44.5146%" y="4591.50">m..</text></g><g><title>main::benchmark::node_has_class_id (16,829,514 samples, 2.26%)</title><rect x="44.2646%" y="4565" width="2.2579%" height="15" fill="rgb(207,102,14)" fg:x="329932065" fg:w="16829514"/><text x="44.5146%" y="4575.50">m..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (15,622,668 samples, 2.10%)</title><rect x="44.4266%" y="4549" width="2.0960%" height="15" fill="rgb(248,201,50)" fg:x="331138911" fg:w="15622668"/><text x="44.6766%" y="4559.50">s..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (15,622,668 samples, 2.10%)</title><rect x="44.4266%" y="4533" width="2.0960%" height="15" fill="rgb(222,185,44)" fg:x="331138911" fg:w="15622668"/><text x="44.6766%" y="4543.50">h..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (15,622,668 samples, 2.10%)</title><rect x="44.4266%" y="4517" width="2.0960%" height="15" fill="rgb(218,107,18)" fg:x="331138911" fg:w="15622668"/><text x="44.6766%" y="4527.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (1,148,876 samples, 0.15%)</title><rect x="46.3684%" y="4501" width="0.1541%" height="15" fill="rgb(237,177,39)" fg:x="345612703" fg:w="1148876"/><text x="46.6184%" y="4511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1,148,876 samples, 0.15%)</title><rect x="46.3684%" y="4485" width="0.1541%" height="15" fill="rgb(246,69,6)" fg:x="345612703" fg:w="1148876"/><text x="46.6184%" y="4495.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1,148,876 samples, 0.15%)</title><rect x="46.3684%" y="4469" width="0.1541%" height="15" fill="rgb(234,208,37)" fg:x="345612703" fg:w="1148876"/><text x="46.6184%" y="4479.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (1,148,876 samples, 0.15%)</title><rect x="46.3684%" y="4453" width="0.1541%" height="15" fill="rgb(225,4,6)" fg:x="345612703" fg:w="1148876"/><text x="46.6184%" y="4463.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1,148,876 samples, 0.15%)</title><rect x="46.3684%" y="4437" width="0.1541%" height="15" fill="rgb(233,45,0)" fg:x="345612703" fg:w="1148876"/><text x="46.6184%" y="4447.50"></text></g><g><title>hashbrown::map::make_hash (1,171,199 samples, 0.16%)</title><rect x="46.5225%" y="4469" width="0.1571%" height="15" fill="rgb(226,136,5)" fg:x="346761579" fg:w="1171199"/><text x="46.7725%" y="4479.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1,171,199 samples, 0.16%)</title><rect x="46.5225%" y="4453" width="0.1571%" height="15" fill="rgb(211,91,47)" fg:x="346761579" fg:w="1171199"/><text x="46.7725%" y="4463.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1,171,199 samples, 0.16%)</title><rect x="46.5225%" y="4437" width="0.1571%" height="15" fill="rgb(242,88,51)" fg:x="346761579" fg:w="1171199"/><text x="46.7725%" y="4447.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (1,171,199 samples, 0.16%)</title><rect x="46.5225%" y="4421" width="0.1571%" height="15" fill="rgb(230,91,28)" fg:x="346761579" fg:w="1171199"/><text x="46.7725%" y="4431.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (1,171,199 samples, 0.16%)</title><rect x="46.5225%" y="4405" width="0.1571%" height="15" fill="rgb(254,186,29)" fg:x="346761579" fg:w="1171199"/><text x="46.7725%" y="4415.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (1,171,199 samples, 0.16%)</title><rect x="46.5225%" y="4389" width="0.1571%" height="15" fill="rgb(238,6,4)" fg:x="346761579" fg:w="1171199"/><text x="46.7725%" y="4399.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (1,171,199 samples, 0.16%)</title><rect x="46.5225%" y="4373" width="0.1571%" height="15" fill="rgb(221,151,16)" fg:x="346761579" fg:w="1171199"/><text x="46.7725%" y="4383.50"></text></g><g><title>core::hash::Hasher::write_u8 (1,171,199 samples, 0.16%)</title><rect x="46.5225%" y="4357" width="0.1571%" height="15" fill="rgb(251,143,52)" fg:x="346761579" fg:w="1171199"/><text x="46.7725%" y="4367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,171,199 samples, 0.16%)</title><rect x="46.5225%" y="4341" width="0.1571%" height="15" fill="rgb(206,90,15)" fg:x="346761579" fg:w="1171199"/><text x="46.7725%" y="4351.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (2,360,963 samples, 0.32%)</title><rect x="46.5225%" y="4549" width="0.3168%" height="15" fill="rgb(218,35,8)" fg:x="346761579" fg:w="2360963"/><text x="46.7725%" y="4559.50"></text></g><g><title>main::benchmark::get_node_id_id::_{{closure}} (2,360,963 samples, 0.32%)</title><rect x="46.5225%" y="4533" width="0.3168%" height="15" fill="rgb(239,215,6)" fg:x="346761579" fg:w="2360963"/><text x="46.7725%" y="4543.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (2,360,963 samples, 0.32%)</title><rect x="46.5225%" y="4517" width="0.3168%" height="15" fill="rgb(245,116,39)" fg:x="346761579" fg:w="2360963"/><text x="46.7725%" y="4527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (2,360,963 samples, 0.32%)</title><rect x="46.5225%" y="4501" width="0.3168%" height="15" fill="rgb(242,65,28)" fg:x="346761579" fg:w="2360963"/><text x="46.7725%" y="4511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (2,360,963 samples, 0.32%)</title><rect x="46.5225%" y="4485" width="0.3168%" height="15" fill="rgb(252,132,53)" fg:x="346761579" fg:w="2360963"/><text x="46.7725%" y="4495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (1,189,764 samples, 0.16%)</title><rect x="46.6797%" y="4469" width="0.1596%" height="15" fill="rgb(224,159,50)" fg:x="347932778" fg:w="1189764"/><text x="46.9297%" y="4479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1,189,764 samples, 0.16%)</title><rect x="46.6797%" y="4453" width="0.1596%" height="15" fill="rgb(224,93,4)" fg:x="347932778" fg:w="1189764"/><text x="46.9297%" y="4463.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1,189,764 samples, 0.16%)</title><rect x="46.6797%" y="4437" width="0.1596%" height="15" fill="rgb(208,81,34)" fg:x="347932778" fg:w="1189764"/><text x="46.9297%" y="4447.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (1,189,764 samples, 0.16%)</title><rect x="46.6797%" y="4421" width="0.1596%" height="15" fill="rgb(233,92,54)" fg:x="347932778" fg:w="1189764"/><text x="46.9297%" y="4431.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1,189,764 samples, 0.16%)</title><rect x="46.6797%" y="4405" width="0.1596%" height="15" fill="rgb(237,21,14)" fg:x="347932778" fg:w="1189764"/><text x="46.9297%" y="4415.50"></text></g><g><title>main::benchmark::matches_id_id (3,629,621 samples, 0.49%)</title><rect x="46.5225%" y="4581" width="0.4870%" height="15" fill="rgb(249,128,51)" fg:x="346761579" fg:w="3629621"/><text x="46.7725%" y="4591.50"></text></g><g><title>main::benchmark::get_node_id_id (3,629,621 samples, 0.49%)</title><rect x="46.5225%" y="4565" width="0.4870%" height="15" fill="rgb(223,129,24)" fg:x="346761579" fg:w="3629621"/><text x="46.7725%" y="4575.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (1,268,658 samples, 0.17%)</title><rect x="46.8393%" y="4549" width="0.1702%" height="15" fill="rgb(231,168,25)" fg:x="349122542" fg:w="1268658"/><text x="47.0893%" y="4559.50"></text></g><g><title>main::benchmark::process_node_generated_from_scratch (24,097,682 samples, 3.23%)</title><rect x="43.9345%" y="4597" width="3.2330%" height="15" fill="rgb(224,39,20)" fg:x="327471519" fg:w="24097682"/><text x="44.1845%" y="4607.50">mai..</text></g><g><title>main::benchmark::matches_tag_id (1,178,001 samples, 0.16%)</title><rect x="47.0095%" y="4581" width="0.1580%" height="15" fill="rgb(225,152,53)" fg:x="350391200" fg:w="1178001"/><text x="47.2595%" y="4591.50"></text></g><g><title>main::benchmark::get_node_tag_id (1,178,001 samples, 0.16%)</title><rect x="47.0095%" y="4565" width="0.1580%" height="15" fill="rgb(252,17,24)" fg:x="350391200" fg:w="1178001"/><text x="47.2595%" y="4575.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1,178,001 samples, 0.16%)</title><rect x="47.0095%" y="4549" width="0.1580%" height="15" fill="rgb(250,114,30)" fg:x="350391200" fg:w="1178001"/><text x="47.2595%" y="4559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1,178,001 samples, 0.16%)</title><rect x="47.0095%" y="4533" width="0.1580%" height="15" fill="rgb(229,5,4)" fg:x="350391200" fg:w="1178001"/><text x="47.2595%" y="4543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1,178,001 samples, 0.16%)</title><rect x="47.0095%" y="4517" width="0.1580%" height="15" fill="rgb(225,176,49)" fg:x="350391200" fg:w="1178001"/><text x="47.2595%" y="4527.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (1,178,001 samples, 0.16%)</title><rect x="47.0095%" y="4501" width="0.1580%" height="15" fill="rgb(224,221,49)" fg:x="350391200" fg:w="1178001"/><text x="47.2595%" y="4511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1,178,001 samples, 0.16%)</title><rect x="47.0095%" y="4485" width="0.1580%" height="15" fill="rgb(253,169,27)" fg:x="350391200" fg:w="1178001"/><text x="47.2595%" y="4495.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1,178,001 samples, 0.16%)</title><rect x="47.0095%" y="4469" width="0.1580%" height="15" fill="rgb(211,206,16)" fg:x="350391200" fg:w="1178001"/><text x="47.2595%" y="4479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (1,178,001 samples, 0.16%)</title><rect x="47.0095%" y="4453" width="0.1580%" height="15" fill="rgb(244,87,35)" fg:x="350391200" fg:w="1178001"/><text x="47.2595%" y="4463.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (1,178,001 samples, 0.16%)</title><rect x="47.0095%" y="4437" width="0.1580%" height="15" fill="rgb(246,28,10)" fg:x="350391200" fg:w="1178001"/><text x="47.2595%" y="4447.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (1,178,001 samples, 0.16%)</title><rect x="47.0095%" y="4421" width="0.1580%" height="15" fill="rgb(229,12,44)" fg:x="350391200" fg:w="1178001"/><text x="47.2595%" y="4431.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1,178,001 samples, 0.16%)</title><rect x="47.0095%" y="4405" width="0.1580%" height="15" fill="rgb(210,145,37)" fg:x="350391200" fg:w="1178001"/><text x="47.2595%" y="4415.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (1,178,001 samples, 0.16%)</title><rect x="47.0095%" y="4389" width="0.1580%" height="15" fill="rgb(227,112,52)" fg:x="350391200" fg:w="1178001"/><text x="47.2595%" y="4399.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1,178,001 samples, 0.16%)</title><rect x="47.0095%" y="4373" width="0.1580%" height="15" fill="rgb(238,155,34)" fg:x="350391200" fg:w="1178001"/><text x="47.2595%" y="4383.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (1,178,001 samples, 0.16%)</title><rect x="47.0095%" y="4357" width="0.1580%" height="15" fill="rgb(239,226,36)" fg:x="350391200" fg:w="1178001"/><text x="47.2595%" y="4367.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1,178,001 samples, 0.16%)</title><rect x="47.0095%" y="4341" width="0.1580%" height="15" fill="rgb(230,16,23)" fg:x="350391200" fg:w="1178001"/><text x="47.2595%" y="4351.50"></text></g><g><title>[libc.so.6] (1,178,001 samples, 0.16%)</title><rect x="47.0095%" y="4325" width="0.1580%" height="15" fill="rgb(236,171,36)" fg:x="350391200" fg:w="1178001"/><text x="47.2595%" y="4335.50"></text></g><g><title>css_bitvector_compiler::BitVector::with_capacity (1,252,358 samples, 0.17%)</title><rect x="47.1675%" y="4565" width="0.1680%" height="15" fill="rgb(221,22,14)" fg:x="351569201" fg:w="1252358"/><text x="47.4175%" y="4575.50"></text></g><g><title>alloc::vec::from_elem (1,252,358 samples, 0.17%)</title><rect x="47.1675%" y="4549" width="0.1680%" height="15" fill="rgb(242,43,11)" fg:x="351569201" fg:w="1252358"/><text x="47.4175%" y="4559.50"></text></g><g><title>&lt;u8 as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (1,252,358 samples, 0.17%)</title><rect x="47.1675%" y="4533" width="0.1680%" height="15" fill="rgb(232,69,23)" fg:x="351569201" fg:w="1252358"/><text x="47.4175%" y="4543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (1,252,358 samples, 0.17%)</title><rect x="47.1675%" y="4517" width="0.1680%" height="15" fill="rgb(216,180,54)" fg:x="351569201" fg:w="1252358"/><text x="47.4175%" y="4527.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_zeroed_in (1,252,358 samples, 0.17%)</title><rect x="47.1675%" y="4501" width="0.1680%" height="15" fill="rgb(216,5,24)" fg:x="351569201" fg:w="1252358"/><text x="47.4175%" y="4511.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1,252,358 samples, 0.17%)</title><rect x="47.1675%" y="4485" width="0.1680%" height="15" fill="rgb(225,89,9)" fg:x="351569201" fg:w="1252358"/><text x="47.4175%" y="4495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (1,252,358 samples, 0.17%)</title><rect x="47.1675%" y="4469" width="0.1680%" height="15" fill="rgb(243,75,33)" fg:x="351569201" fg:w="1252358"/><text x="47.4175%" y="4479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,252,358 samples, 0.17%)</title><rect x="47.1675%" y="4453" width="0.1680%" height="15" fill="rgb(247,141,45)" fg:x="351569201" fg:w="1252358"/><text x="47.4175%" y="4463.50"></text></g><g><title>alloc::alloc::alloc_zeroed (1,252,358 samples, 0.17%)</title><rect x="47.1675%" y="4437" width="0.1680%" height="15" fill="rgb(232,177,36)" fg:x="351569201" fg:w="1252358"/><text x="47.4175%" y="4447.50"></text></g><g><title>__libc_calloc (1,252,358 samples, 0.17%)</title><rect x="47.1675%" y="4421" width="0.1680%" height="15" fill="rgb(219,125,36)" fg:x="351569201" fg:w="1252358"/><text x="47.4175%" y="4431.50"></text></g><g><title>&lt;&amp;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (2,578,397 samples, 0.35%)</title><rect x="47.3356%" y="4533" width="0.3459%" height="15" fill="rgb(227,94,9)" fg:x="352821559" fg:w="2578397"/><text x="47.5856%" y="4543.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::iter (2,578,397 samples, 0.35%)</title><rect x="47.3356%" y="4517" width="0.3459%" height="15" fill="rgb(240,34,52)" fg:x="352821559" fg:w="2578397"/><text x="47.5856%" y="4527.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::iter (2,578,397 samples, 0.35%)</title><rect x="47.3356%" y="4501" width="0.3459%" height="15" fill="rgb(216,45,12)" fg:x="352821559" fg:w="2578397"/><text x="47.5856%" y="4511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::keys (2,578,397 samples, 0.35%)</title><rect x="47.3356%" y="4485" width="0.3459%" height="15" fill="rgb(246,21,19)" fg:x="352821559" fg:w="2578397"/><text x="47.5856%" y="4495.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (2,578,397 samples, 0.35%)</title><rect x="47.3356%" y="4469" width="0.3459%" height="15" fill="rgb(213,98,42)" fg:x="352821559" fg:w="2578397"/><text x="47.5856%" y="4479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter (2,578,397 samples, 0.35%)</title><rect x="47.3356%" y="4453" width="0.3459%" height="15" fill="rgb(250,136,47)" fg:x="352821559" fg:w="2578397"/><text x="47.5856%" y="4463.50"></text></g><g><title>hashbrown::raw::RawTableInner::iter (2,578,397 samples, 0.35%)</title><rect x="47.3356%" y="4437" width="0.3459%" height="15" fill="rgb(251,124,27)" fg:x="352821559" fg:w="2578397"/><text x="47.5856%" y="4447.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (2,578,397 samples, 0.35%)</title><rect x="47.3356%" y="4421" width="0.3459%" height="15" fill="rgb(229,180,14)" fg:x="352821559" fg:w="2578397"/><text x="47.5856%" y="4431.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_full (2,578,397 samples, 0.35%)</title><rect x="47.3356%" y="4405" width="0.3459%" height="15" fill="rgb(245,216,25)" fg:x="352821559" fg:w="2578397"/><text x="47.5856%" y="4415.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::invert (2,578,397 samples, 0.35%)</title><rect x="47.3356%" y="4389" width="0.3459%" height="15" fill="rgb(251,43,5)" fg:x="352821559" fg:w="2578397"/><text x="47.5856%" y="4399.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1,285,314 samples, 0.17%)</title><rect x="47.6815%" y="4453" width="0.1724%" height="15" fill="rgb(250,128,24)" fg:x="355399956" fg:w="1285314"/><text x="47.9315%" y="4463.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1,285,314 samples, 0.17%)</title><rect x="47.6815%" y="4437" width="0.1724%" height="15" fill="rgb(217,117,27)" fg:x="355399956" fg:w="1285314"/><text x="47.9315%" y="4447.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1,285,314 samples, 0.17%)</title><rect x="47.6815%" y="4421" width="0.1724%" height="15" fill="rgb(245,147,4)" fg:x="355399956" fg:w="1285314"/><text x="47.9315%" y="4431.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1,285,314 samples, 0.17%)</title><rect x="47.6815%" y="4405" width="0.1724%" height="15" fill="rgb(242,201,35)" fg:x="355399956" fg:w="1285314"/><text x="47.9315%" y="4415.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1,285,314 samples, 0.17%)</title><rect x="47.6815%" y="4389" width="0.1724%" height="15" fill="rgb(218,181,1)" fg:x="355399956" fg:w="1285314"/><text x="47.9315%" y="4399.50"></text></g><g><title>hashbrown::map::make_hash (3,697,491 samples, 0.50%)</title><rect x="47.6815%" y="4485" width="0.4961%" height="15" fill="rgb(222,6,29)" fg:x="355399956" fg:w="3697491"/><text x="47.9315%" y="4495.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3,697,491 samples, 0.50%)</title><rect x="47.6815%" y="4469" width="0.4961%" height="15" fill="rgb(208,186,3)" fg:x="355399956" fg:w="3697491"/><text x="47.9315%" y="4479.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2,412,177 samples, 0.32%)</title><rect x="47.8539%" y="4453" width="0.3236%" height="15" fill="rgb(216,36,26)" fg:x="356685270" fg:w="2412177"/><text x="48.1039%" y="4463.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (2,412,177 samples, 0.32%)</title><rect x="47.8539%" y="4437" width="0.3236%" height="15" fill="rgb(248,201,23)" fg:x="356685270" fg:w="2412177"/><text x="48.1039%" y="4447.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (2,412,177 samples, 0.32%)</title><rect x="47.8539%" y="4421" width="0.3236%" height="15" fill="rgb(251,170,31)" fg:x="356685270" fg:w="2412177"/><text x="48.1039%" y="4431.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (2,412,177 samples, 0.32%)</title><rect x="47.8539%" y="4405" width="0.3236%" height="15" fill="rgb(207,110,25)" fg:x="356685270" fg:w="2412177"/><text x="48.1039%" y="4415.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (2,412,177 samples, 0.32%)</title><rect x="47.8539%" y="4389" width="0.3236%" height="15" fill="rgb(250,54,15)" fg:x="356685270" fg:w="2412177"/><text x="48.1039%" y="4399.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2,412,177 samples, 0.32%)</title><rect x="47.8539%" y="4373" width="0.3236%" height="15" fill="rgb(227,68,33)" fg:x="356685270" fg:w="2412177"/><text x="48.1039%" y="4383.50"></text></g><g><title>core::hash::sip::u8to64_le (2,412,177 samples, 0.32%)</title><rect x="47.8539%" y="4357" width="0.3236%" height="15" fill="rgb(238,34,41)" fg:x="356685270" fg:w="2412177"/><text x="48.1039%" y="4367.50"></text></g><g><title>main::benchmark::matches_class_id (8,784,804 samples, 1.18%)</title><rect x="47.3356%" y="4565" width="1.1786%" height="15" fill="rgb(220,11,15)" fg:x="352821559" fg:w="8784804"/><text x="47.5856%" y="4575.50"></text></g><g><title>main::benchmark::node_has_class_id (8,784,804 samples, 1.18%)</title><rect x="47.3356%" y="4549" width="1.1786%" height="15" fill="rgb(246,111,35)" fg:x="352821559" fg:w="8784804"/><text x="47.5856%" y="4559.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (6,206,407 samples, 0.83%)</title><rect x="47.6815%" y="4533" width="0.8327%" height="15" fill="rgb(209,88,53)" fg:x="355399956" fg:w="6206407"/><text x="47.9315%" y="4543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (6,206,407 samples, 0.83%)</title><rect x="47.6815%" y="4517" width="0.8327%" height="15" fill="rgb(231,185,47)" fg:x="355399956" fg:w="6206407"/><text x="47.9315%" y="4527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (6,206,407 samples, 0.83%)</title><rect x="47.6815%" y="4501" width="0.8327%" height="15" fill="rgb(233,154,1)" fg:x="355399956" fg:w="6206407"/><text x="47.9315%" y="4511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (2,508,916 samples, 0.34%)</title><rect x="48.1775%" y="4485" width="0.3366%" height="15" fill="rgb(225,15,46)" fg:x="359097447" fg:w="2508916"/><text x="48.4275%" y="4495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (2,508,916 samples, 0.34%)</title><rect x="48.1775%" y="4469" width="0.3366%" height="15" fill="rgb(211,135,41)" fg:x="359097447" fg:w="2508916"/><text x="48.4275%" y="4479.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (2,508,916 samples, 0.34%)</title><rect x="48.1775%" y="4453" width="0.3366%" height="15" fill="rgb(208,54,0)" fg:x="359097447" fg:w="2508916"/><text x="48.4275%" y="4463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (2,508,916 samples, 0.34%)</title><rect x="48.1775%" y="4437" width="0.3366%" height="15" fill="rgb(244,136,14)" fg:x="359097447" fg:w="2508916"/><text x="48.4275%" y="4447.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (2,508,916 samples, 0.34%)</title><rect x="48.1775%" y="4421" width="0.3366%" height="15" fill="rgb(241,56,14)" fg:x="359097447" fg:w="2508916"/><text x="48.4275%" y="4431.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (2,508,916 samples, 0.34%)</title><rect x="48.1775%" y="4405" width="0.3366%" height="15" fill="rgb(205,80,24)" fg:x="359097447" fg:w="2508916"/><text x="48.4275%" y="4415.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (2,508,916 samples, 0.34%)</title><rect x="48.1775%" y="4389" width="0.3366%" height="15" fill="rgb(220,57,4)" fg:x="359097447" fg:w="2508916"/><text x="48.4275%" y="4399.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (2,508,916 samples, 0.34%)</title><rect x="48.1775%" y="4373" width="0.3366%" height="15" fill="rgb(226,193,50)" fg:x="359097447" fg:w="2508916"/><text x="48.4275%" y="4383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (2,508,916 samples, 0.34%)</title><rect x="48.1775%" y="4357" width="0.3366%" height="15" fill="rgb(231,168,22)" fg:x="359097447" fg:w="2508916"/><text x="48.4275%" y="4367.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (2,508,916 samples, 0.34%)</title><rect x="48.1775%" y="4341" width="0.3366%" height="15" fill="rgb(254,215,14)" fg:x="359097447" fg:w="2508916"/><text x="48.4275%" y="4351.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (2,508,916 samples, 0.34%)</title><rect x="48.1775%" y="4325" width="0.3366%" height="15" fill="rgb(211,115,16)" fg:x="359097447" fg:w="2508916"/><text x="48.4275%" y="4335.50"></text></g><g><title>[libc.so.6] (2,508,916 samples, 0.34%)</title><rect x="48.1775%" y="4309" width="0.3366%" height="15" fill="rgb(236,210,16)" fg:x="359097447" fg:w="2508916"/><text x="48.4275%" y="4319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2,559,538 samples, 0.34%)</title><rect x="48.6667%" y="4357" width="0.3434%" height="15" fill="rgb(221,94,12)" fg:x="362743759" fg:w="2559538"/><text x="48.9167%" y="4367.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (5,077,333 samples, 0.68%)</title><rect x="48.5142%" y="4421" width="0.6812%" height="15" fill="rgb(235,218,49)" fg:x="361606363" fg:w="5077333"/><text x="48.7642%" y="4431.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (5,077,333 samples, 0.68%)</title><rect x="48.5142%" y="4405" width="0.6812%" height="15" fill="rgb(217,114,14)" fg:x="361606363" fg:w="5077333"/><text x="48.7642%" y="4415.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (5,077,333 samples, 0.68%)</title><rect x="48.5142%" y="4389" width="0.6812%" height="15" fill="rgb(216,145,22)" fg:x="361606363" fg:w="5077333"/><text x="48.7642%" y="4399.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (5,077,333 samples, 0.68%)</title><rect x="48.5142%" y="4373" width="0.6812%" height="15" fill="rgb(217,112,39)" fg:x="361606363" fg:w="5077333"/><text x="48.7642%" y="4383.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1,380,399 samples, 0.19%)</title><rect x="49.0101%" y="4357" width="0.1852%" height="15" fill="rgb(225,85,32)" fg:x="365303297" fg:w="1380399"/><text x="49.2601%" y="4367.50"></text></g><g><title>main::benchmark::matches_id_id (8,393,261 samples, 1.13%)</title><rect x="48.5142%" y="4565" width="1.1261%" height="15" fill="rgb(245,209,47)" fg:x="361606363" fg:w="8393261"/><text x="48.7642%" y="4575.50"></text></g><g><title>main::benchmark::get_node_id_id (8,393,261 samples, 1.13%)</title><rect x="48.5142%" y="4549" width="1.1261%" height="15" fill="rgb(218,220,15)" fg:x="361606363" fg:w="8393261"/><text x="48.7642%" y="4559.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (8,393,261 samples, 1.13%)</title><rect x="48.5142%" y="4533" width="1.1261%" height="15" fill="rgb(222,202,31)" fg:x="361606363" fg:w="8393261"/><text x="48.7642%" y="4543.50"></text></g><g><title>main::benchmark::get_node_id_id::_{{closure}} (8,393,261 samples, 1.13%)</title><rect x="48.5142%" y="4517" width="1.1261%" height="15" fill="rgb(243,203,4)" fg:x="361606363" fg:w="8393261"/><text x="48.7642%" y="4527.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (8,393,261 samples, 1.13%)</title><rect x="48.5142%" y="4501" width="1.1261%" height="15" fill="rgb(237,92,17)" fg:x="361606363" fg:w="8393261"/><text x="48.7642%" y="4511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (8,393,261 samples, 1.13%)</title><rect x="48.5142%" y="4485" width="1.1261%" height="15" fill="rgb(231,119,7)" fg:x="361606363" fg:w="8393261"/><text x="48.7642%" y="4495.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (8,393,261 samples, 1.13%)</title><rect x="48.5142%" y="4469" width="1.1261%" height="15" fill="rgb(237,82,41)" fg:x="361606363" fg:w="8393261"/><text x="48.7642%" y="4479.50"></text></g><g><title>hashbrown::map::make_hash (8,393,261 samples, 1.13%)</title><rect x="48.5142%" y="4453" width="1.1261%" height="15" fill="rgb(226,81,48)" fg:x="361606363" fg:w="8393261"/><text x="48.7642%" y="4463.50"></text></g><g><title>core::hash::BuildHasher::hash_one (8,393,261 samples, 1.13%)</title><rect x="48.5142%" y="4437" width="1.1261%" height="15" fill="rgb(234,70,51)" fg:x="361606363" fg:w="8393261"/><text x="48.7642%" y="4447.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3,315,928 samples, 0.44%)</title><rect x="49.1953%" y="4421" width="0.4449%" height="15" fill="rgb(251,86,4)" fg:x="366683696" fg:w="3315928"/><text x="49.4453%" y="4431.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (3,315,928 samples, 0.44%)</title><rect x="49.1953%" y="4405" width="0.4449%" height="15" fill="rgb(244,144,28)" fg:x="366683696" fg:w="3315928"/><text x="49.4453%" y="4415.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (3,315,928 samples, 0.44%)</title><rect x="49.1953%" y="4389" width="0.4449%" height="15" fill="rgb(232,161,39)" fg:x="366683696" fg:w="3315928"/><text x="49.4453%" y="4399.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (3,315,928 samples, 0.44%)</title><rect x="49.1953%" y="4373" width="0.4449%" height="15" fill="rgb(247,34,51)" fg:x="366683696" fg:w="3315928"/><text x="49.4453%" y="4383.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (3,315,928 samples, 0.44%)</title><rect x="49.1953%" y="4357" width="0.4449%" height="15" fill="rgb(225,132,2)" fg:x="366683696" fg:w="3315928"/><text x="49.4453%" y="4367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3,315,928 samples, 0.44%)</title><rect x="49.1953%" y="4341" width="0.4449%" height="15" fill="rgb(209,159,44)" fg:x="366683696" fg:w="3315928"/><text x="49.4453%" y="4351.50"></text></g><g><title>core::hash::sip::u8to64_le (1,296,920 samples, 0.17%)</title><rect x="49.4662%" y="4325" width="0.1740%" height="15" fill="rgb(251,214,1)" fg:x="368702704" fg:w="1296920"/><text x="49.7162%" y="4335.50"></text></g><g><title>main::benchmark::get_string_to_id_map (1,308,900 samples, 0.18%)</title><rect x="49.6402%" y="4533" width="0.1756%" height="15" fill="rgb(247,84,47)" fg:x="369999624" fg:w="1308900"/><text x="49.8902%" y="4543.50"></text></g><g><title>std::sync::once_lock::OnceLock&lt;T&gt;::get_or_init (1,308,900 samples, 0.18%)</title><rect x="49.6402%" y="4517" width="0.1756%" height="15" fill="rgb(240,111,43)" fg:x="369999624" fg:w="1308900"/><text x="49.8902%" y="4527.50"></text></g><g><title>std::sync::once_lock::OnceLock&lt;T&gt;::get_or_try_init (1,308,900 samples, 0.18%)</title><rect x="49.6402%" y="4501" width="0.1756%" height="15" fill="rgb(215,214,35)" fg:x="369999624" fg:w="1308900"/><text x="49.8902%" y="4511.50"></text></g><g><title>main::benchmark::process_node_generated_from_scratch (21,055,823 samples, 2.82%)</title><rect x="47.1675%" y="4581" width="2.8249%" height="15" fill="rgb(248,207,23)" fg:x="351569201" fg:w="21055823"/><text x="47.4175%" y="4591.50">ma..</text></g><g><title>main::benchmark::matches_tag_id (2,625,400 samples, 0.35%)</title><rect x="49.6402%" y="4565" width="0.3522%" height="15" fill="rgb(214,186,4)" fg:x="369999624" fg:w="2625400"/><text x="49.8902%" y="4575.50"></text></g><g><title>main::benchmark::get_node_tag_id (2,625,400 samples, 0.35%)</title><rect x="49.6402%" y="4549" width="0.3522%" height="15" fill="rgb(220,133,22)" fg:x="369999624" fg:w="2625400"/><text x="49.8902%" y="4559.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1,316,500 samples, 0.18%)</title><rect x="49.8158%" y="4533" width="0.1766%" height="15" fill="rgb(239,134,19)" fg:x="371308524" fg:w="1316500"/><text x="50.0658%" y="4543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1,316,500 samples, 0.18%)</title><rect x="49.8158%" y="4517" width="0.1766%" height="15" fill="rgb(250,140,9)" fg:x="371308524" fg:w="1316500"/><text x="50.0658%" y="4527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1,316,500 samples, 0.18%)</title><rect x="49.8158%" y="4501" width="0.1766%" height="15" fill="rgb(225,59,14)" fg:x="371308524" fg:w="1316500"/><text x="50.0658%" y="4511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (1,316,500 samples, 0.18%)</title><rect x="49.8158%" y="4485" width="0.1766%" height="15" fill="rgb(214,152,51)" fg:x="371308524" fg:w="1316500"/><text x="50.0658%" y="4495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1,316,500 samples, 0.18%)</title><rect x="49.8158%" y="4469" width="0.1766%" height="15" fill="rgb(251,227,43)" fg:x="371308524" fg:w="1316500"/><text x="50.0658%" y="4479.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1,316,500 samples, 0.18%)</title><rect x="49.8158%" y="4453" width="0.1766%" height="15" fill="rgb(241,96,17)" fg:x="371308524" fg:w="1316500"/><text x="50.0658%" y="4463.50"></text></g><g><title>hashbrown::raw::ProbeSeq::move_next (1,316,500 samples, 0.18%)</title><rect x="49.8158%" y="4437" width="0.1766%" height="15" fill="rgb(234,198,43)" fg:x="371308524" fg:w="1316500"/><text x="50.0658%" y="4447.50"></text></g><g><title>css_bitvector_compiler::BitVector::is_bit_set (3,744,394 samples, 0.50%)</title><rect x="50.6746%" y="4549" width="0.5024%" height="15" fill="rgb(220,108,29)" fg:x="377709353" fg:w="3744394"/><text x="50.9246%" y="4559.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1,138,034 samples, 0.15%)</title><rect x="51.1769%" y="4437" width="0.1527%" height="15" fill="rgb(226,163,33)" fg:x="381453747" fg:w="1138034"/><text x="51.4269%" y="4447.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1,138,034 samples, 0.15%)</title><rect x="51.1769%" y="4421" width="0.1527%" height="15" fill="rgb(205,194,45)" fg:x="381453747" fg:w="1138034"/><text x="51.4269%" y="4431.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1,138,034 samples, 0.15%)</title><rect x="51.1769%" y="4405" width="0.1527%" height="15" fill="rgb(206,143,44)" fg:x="381453747" fg:w="1138034"/><text x="51.4269%" y="4415.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1,138,034 samples, 0.15%)</title><rect x="51.1769%" y="4389" width="0.1527%" height="15" fill="rgb(236,136,36)" fg:x="381453747" fg:w="1138034"/><text x="51.4269%" y="4399.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1,249,222 samples, 0.17%)</title><rect x="51.3296%" y="4437" width="0.1676%" height="15" fill="rgb(249,172,42)" fg:x="382591781" fg:w="1249222"/><text x="51.5796%" y="4447.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3,639,010 samples, 0.49%)</title><rect x="51.4972%" y="4357" width="0.4882%" height="15" fill="rgb(216,139,23)" fg:x="383841003" fg:w="3639010"/><text x="51.7472%" y="4367.50"></text></g><g><title>core::hash::sip::u8to64_le (3,639,010 samples, 0.49%)</title><rect x="51.4972%" y="4341" width="0.4882%" height="15" fill="rgb(207,166,20)" fg:x="383841003" fg:w="3639010"/><text x="51.7472%" y="4351.50"></text></g><g><title>hashbrown::map::make_hash (7,278,423 samples, 0.98%)</title><rect x="51.1769%" y="4469" width="0.9765%" height="15" fill="rgb(210,209,22)" fg:x="381453747" fg:w="7278423"/><text x="51.4269%" y="4479.50"></text></g><g><title>core::hash::BuildHasher::hash_one (7,278,423 samples, 0.98%)</title><rect x="51.1769%" y="4453" width="0.9765%" height="15" fill="rgb(232,118,20)" fg:x="381453747" fg:w="7278423"/><text x="51.4269%" y="4463.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (4,891,167 samples, 0.66%)</title><rect x="51.4972%" y="4437" width="0.6562%" height="15" fill="rgb(238,113,42)" fg:x="383841003" fg:w="4891167"/><text x="51.7472%" y="4447.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (4,891,167 samples, 0.66%)</title><rect x="51.4972%" y="4421" width="0.6562%" height="15" fill="rgb(231,42,5)" fg:x="383841003" fg:w="4891167"/><text x="51.7472%" y="4431.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (4,891,167 samples, 0.66%)</title><rect x="51.4972%" y="4405" width="0.6562%" height="15" fill="rgb(243,166,24)" fg:x="383841003" fg:w="4891167"/><text x="51.7472%" y="4415.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (4,891,167 samples, 0.66%)</title><rect x="51.4972%" y="4389" width="0.6562%" height="15" fill="rgb(237,226,12)" fg:x="383841003" fg:w="4891167"/><text x="51.7472%" y="4399.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (4,891,167 samples, 0.66%)</title><rect x="51.4972%" y="4373" width="0.6562%" height="15" fill="rgb(229,133,24)" fg:x="383841003" fg:w="4891167"/><text x="51.7472%" y="4383.50"></text></g><g><title>core::hash::Hasher::write_u8 (1,252,157 samples, 0.17%)</title><rect x="51.9854%" y="4357" width="0.1680%" height="15" fill="rgb(238,33,43)" fg:x="387480013" fg:w="1252157"/><text x="52.2354%" y="4367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,252,157 samples, 0.17%)</title><rect x="51.9854%" y="4341" width="0.1680%" height="15" fill="rgb(227,59,38)" fg:x="387480013" fg:w="1252157"/><text x="52.2354%" y="4351.50"></text></g><g><title>core::hash::sip::u8to64_le (1,252,157 samples, 0.17%)</title><rect x="51.9854%" y="4325" width="0.1680%" height="15" fill="rgb(230,97,0)" fg:x="387480013" fg:w="1252157"/><text x="52.2354%" y="4335.50"></text></g><g><title>main::benchmark::matches_class_id (8,527,993 samples, 1.14%)</title><rect x="51.1769%" y="4549" width="1.1441%" height="15" fill="rgb(250,173,50)" fg:x="381453747" fg:w="8527993"/><text x="51.4269%" y="4559.50"></text></g><g><title>main::benchmark::node_has_class_id (8,527,993 samples, 1.14%)</title><rect x="51.1769%" y="4533" width="1.1441%" height="15" fill="rgb(240,15,50)" fg:x="381453747" fg:w="8527993"/><text x="51.4269%" y="4543.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (8,527,993 samples, 1.14%)</title><rect x="51.1769%" y="4517" width="1.1441%" height="15" fill="rgb(221,93,22)" fg:x="381453747" fg:w="8527993"/><text x="51.4269%" y="4527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (8,527,993 samples, 1.14%)</title><rect x="51.1769%" y="4501" width="1.1441%" height="15" fill="rgb(245,180,53)" fg:x="381453747" fg:w="8527993"/><text x="51.4269%" y="4511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (8,527,993 samples, 1.14%)</title><rect x="51.1769%" y="4485" width="1.1441%" height="15" fill="rgb(231,88,51)" fg:x="381453747" fg:w="8527993"/><text x="51.4269%" y="4495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (1,249,570 samples, 0.17%)</title><rect x="52.1534%" y="4469" width="0.1676%" height="15" fill="rgb(240,58,21)" fg:x="388732170" fg:w="1249570"/><text x="52.4034%" y="4479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1,249,570 samples, 0.17%)</title><rect x="52.1534%" y="4453" width="0.1676%" height="15" fill="rgb(237,21,10)" fg:x="388732170" fg:w="1249570"/><text x="52.4034%" y="4463.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1,249,570 samples, 0.17%)</title><rect x="52.1534%" y="4437" width="0.1676%" height="15" fill="rgb(218,43,11)" fg:x="388732170" fg:w="1249570"/><text x="52.4034%" y="4447.50"></text></g><g><title>hashbrown::control::tag::Tag::full (1,249,570 samples, 0.17%)</title><rect x="52.1534%" y="4421" width="0.1676%" height="15" fill="rgb(218,221,29)" fg:x="388732170" fg:w="1249570"/><text x="52.4034%" y="4431.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (2,554,813 samples, 0.34%)</title><rect x="52.4854%" y="4405" width="0.3428%" height="15" fill="rgb(214,118,42)" fg:x="391206622" fg:w="2554813"/><text x="52.7354%" y="4415.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2,554,813 samples, 0.34%)</title><rect x="52.4854%" y="4389" width="0.3428%" height="15" fill="rgb(251,200,26)" fg:x="391206622" fg:w="2554813"/><text x="52.7354%" y="4399.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2,554,813 samples, 0.34%)</title><rect x="52.4854%" y="4373" width="0.3428%" height="15" fill="rgb(237,101,39)" fg:x="391206622" fg:w="2554813"/><text x="52.7354%" y="4383.50"></text></g><g><title>main::benchmark::matches_id_id (7,574,326 samples, 1.02%)</title><rect x="52.3211%" y="4549" width="1.0162%" height="15" fill="rgb(251,117,11)" fg:x="389981740" fg:w="7574326"/><text x="52.5711%" y="4559.50"></text></g><g><title>main::benchmark::get_node_id_id (7,574,326 samples, 1.02%)</title><rect x="52.3211%" y="4533" width="1.0162%" height="15" fill="rgb(216,223,23)" fg:x="389981740" fg:w="7574326"/><text x="52.5711%" y="4543.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (7,574,326 samples, 1.02%)</title><rect x="52.3211%" y="4517" width="1.0162%" height="15" fill="rgb(251,54,12)" fg:x="389981740" fg:w="7574326"/><text x="52.5711%" y="4527.50"></text></g><g><title>main::benchmark::get_node_id_id::_{{closure}} (7,574,326 samples, 1.02%)</title><rect x="52.3211%" y="4501" width="1.0162%" height="15" fill="rgb(254,176,54)" fg:x="389981740" fg:w="7574326"/><text x="52.5711%" y="4511.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (7,574,326 samples, 1.02%)</title><rect x="52.3211%" y="4485" width="1.0162%" height="15" fill="rgb(210,32,8)" fg:x="389981740" fg:w="7574326"/><text x="52.5711%" y="4495.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (7,574,326 samples, 1.02%)</title><rect x="52.3211%" y="4469" width="1.0162%" height="15" fill="rgb(235,52,38)" fg:x="389981740" fg:w="7574326"/><text x="52.5711%" y="4479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (7,574,326 samples, 1.02%)</title><rect x="52.3211%" y="4453" width="1.0162%" height="15" fill="rgb(231,4,44)" fg:x="389981740" fg:w="7574326"/><text x="52.5711%" y="4463.50"></text></g><g><title>hashbrown::map::make_hash (7,574,326 samples, 1.02%)</title><rect x="52.3211%" y="4437" width="1.0162%" height="15" fill="rgb(249,2,32)" fg:x="389981740" fg:w="7574326"/><text x="52.5711%" y="4447.50"></text></g><g><title>core::hash::BuildHasher::hash_one (7,574,326 samples, 1.02%)</title><rect x="52.3211%" y="4421" width="1.0162%" height="15" fill="rgb(224,65,26)" fg:x="389981740" fg:w="7574326"/><text x="52.5711%" y="4431.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3,794,631 samples, 0.51%)</title><rect x="52.8282%" y="4405" width="0.5091%" height="15" fill="rgb(250,73,40)" fg:x="393761435" fg:w="3794631"/><text x="53.0782%" y="4415.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (3,794,631 samples, 0.51%)</title><rect x="52.8282%" y="4389" width="0.5091%" height="15" fill="rgb(253,177,16)" fg:x="393761435" fg:w="3794631"/><text x="53.0782%" y="4399.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (3,794,631 samples, 0.51%)</title><rect x="52.8282%" y="4373" width="0.5091%" height="15" fill="rgb(217,32,34)" fg:x="393761435" fg:w="3794631"/><text x="53.0782%" y="4383.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (3,794,631 samples, 0.51%)</title><rect x="52.8282%" y="4357" width="0.5091%" height="15" fill="rgb(212,7,10)" fg:x="393761435" fg:w="3794631"/><text x="53.0782%" y="4367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (3,794,631 samples, 0.51%)</title><rect x="52.8282%" y="4341" width="0.5091%" height="15" fill="rgb(245,89,8)" fg:x="393761435" fg:w="3794631"/><text x="53.0782%" y="4351.50"></text></g><g><title>core::hash::Hasher::write_u8 (3,794,631 samples, 0.51%)</title><rect x="52.8282%" y="4325" width="0.5091%" height="15" fill="rgb(237,16,53)" fg:x="393761435" fg:w="3794631"/><text x="53.0782%" y="4335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2,603,818 samples, 0.35%)</title><rect x="52.9879%" y="4309" width="0.3493%" height="15" fill="rgb(250,204,30)" fg:x="394952248" fg:w="2603818"/><text x="53.2379%" y="4319.50"></text></g><g><title>core::hash::sip::u8to64_le (2,603,818 samples, 0.35%)</title><rect x="52.9879%" y="4293" width="0.3493%" height="15" fill="rgb(208,77,27)" fg:x="394952248" fg:w="2603818"/><text x="53.2379%" y="4303.50"></text></g><g><title>main::benchmark::process_node_generated_from_scratch (27,635,161 samples, 3.71%)</title><rect x="49.9924%" y="4565" width="3.7076%" height="15" fill="rgb(250,204,28)" fg:x="372625024" fg:w="27635161"/><text x="50.2424%" y="4575.50">main..</text></g><g><title>main::benchmark::matches_tag_id (2,704,119 samples, 0.36%)</title><rect x="53.3373%" y="4549" width="0.3628%" height="15" fill="rgb(244,63,21)" fg:x="397556066" fg:w="2704119"/><text x="53.5873%" y="4559.50"></text></g><g><title>main::benchmark::get_node_tag_id (2,704,119 samples, 0.36%)</title><rect x="53.3373%" y="4533" width="0.3628%" height="15" fill="rgb(236,85,44)" fg:x="397556066" fg:w="2704119"/><text x="53.5873%" y="4543.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (2,704,119 samples, 0.36%)</title><rect x="53.3373%" y="4517" width="0.3628%" height="15" fill="rgb(215,98,4)" fg:x="397556066" fg:w="2704119"/><text x="53.5873%" y="4527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (2,704,119 samples, 0.36%)</title><rect x="53.3373%" y="4501" width="0.3628%" height="15" fill="rgb(235,38,11)" fg:x="397556066" fg:w="2704119"/><text x="53.5873%" y="4511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (2,704,119 samples, 0.36%)</title><rect x="53.3373%" y="4485" width="0.3628%" height="15" fill="rgb(254,186,25)" fg:x="397556066" fg:w="2704119"/><text x="53.5873%" y="4495.50"></text></g><g><title>hashbrown::map::make_hash (2,704,119 samples, 0.36%)</title><rect x="53.3373%" y="4469" width="0.3628%" height="15" fill="rgb(225,55,31)" fg:x="397556066" fg:w="2704119"/><text x="53.5873%" y="4479.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2,704,119 samples, 0.36%)</title><rect x="53.3373%" y="4453" width="0.3628%" height="15" fill="rgb(211,15,21)" fg:x="397556066" fg:w="2704119"/><text x="53.5873%" y="4463.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2,704,119 samples, 0.36%)</title><rect x="53.3373%" y="4437" width="0.3628%" height="15" fill="rgb(215,187,41)" fg:x="397556066" fg:w="2704119"/><text x="53.5873%" y="4447.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (2,704,119 samples, 0.36%)</title><rect x="53.3373%" y="4421" width="0.3628%" height="15" fill="rgb(248,69,32)" fg:x="397556066" fg:w="2704119"/><text x="53.5873%" y="4431.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (2,704,119 samples, 0.36%)</title><rect x="53.3373%" y="4405" width="0.3628%" height="15" fill="rgb(252,102,52)" fg:x="397556066" fg:w="2704119"/><text x="53.5873%" y="4415.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (2,704,119 samples, 0.36%)</title><rect x="53.3373%" y="4389" width="0.3628%" height="15" fill="rgb(253,140,32)" fg:x="397556066" fg:w="2704119"/><text x="53.5873%" y="4399.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (2,704,119 samples, 0.36%)</title><rect x="53.3373%" y="4373" width="0.3628%" height="15" fill="rgb(216,56,42)" fg:x="397556066" fg:w="2704119"/><text x="53.5873%" y="4383.50"></text></g><g><title>core::hash::Hasher::write_u8 (2,704,119 samples, 0.36%)</title><rect x="53.3373%" y="4357" width="0.3628%" height="15" fill="rgb(216,184,14)" fg:x="397556066" fg:w="2704119"/><text x="53.5873%" y="4367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2,704,119 samples, 0.36%)</title><rect x="53.3373%" y="4341" width="0.3628%" height="15" fill="rgb(237,187,27)" fg:x="397556066" fg:w="2704119"/><text x="53.5873%" y="4351.50"></text></g><g><title>core::hash::sip::u8to64_le (1,229,973 samples, 0.17%)</title><rect x="53.5350%" y="4325" width="0.1650%" height="15" fill="rgb(219,65,3)" fg:x="399030212" fg:w="1229973"/><text x="53.7850%" y="4335.50"></text></g><g><title>css_bitvector_compiler::BitVector::is_bit_set (2,612,288 samples, 0.35%)</title><rect x="53.7001%" y="4533" width="0.3505%" height="15" fill="rgb(245,83,25)" fg:x="400260185" fg:w="2612288"/><text x="53.9501%" y="4543.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (2,655,788 samples, 0.36%)</title><rect x="54.2290%" y="4389" width="0.3563%" height="15" fill="rgb(214,205,45)" fg:x="404202672" fg:w="2655788"/><text x="54.4790%" y="4399.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2,655,788 samples, 0.36%)</title><rect x="54.2290%" y="4373" width="0.3563%" height="15" fill="rgb(241,20,18)" fg:x="404202672" fg:w="2655788"/><text x="54.4790%" y="4383.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2,655,788 samples, 0.36%)</title><rect x="54.2290%" y="4357" width="0.3563%" height="15" fill="rgb(232,163,23)" fg:x="404202672" fg:w="2655788"/><text x="54.4790%" y="4367.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1,314,313 samples, 0.18%)</title><rect x="54.4090%" y="4341" width="0.1763%" height="15" fill="rgb(214,5,46)" fg:x="405544147" fg:w="1314313"/><text x="54.6590%" y="4351.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1,314,313 samples, 0.18%)</title><rect x="54.4090%" y="4325" width="0.1763%" height="15" fill="rgb(229,78,17)" fg:x="405544147" fg:w="1314313"/><text x="54.6590%" y="4335.50"></text></g><g><title>main::benchmark::process_node_generated_from_scratch (7,926,501 samples, 1.06%)</title><rect x="53.7001%" y="4549" width="1.0634%" height="15" fill="rgb(248,89,10)" fg:x="400260185" fg:w="7926501"/><text x="53.9501%" y="4559.50"></text></g><g><title>main::benchmark::matches_id_id (5,314,213 samples, 0.71%)</title><rect x="54.0505%" y="4533" width="0.7130%" height="15" fill="rgb(248,54,15)" fg:x="402872473" fg:w="5314213"/><text x="54.3005%" y="4543.50"></text></g><g><title>main::benchmark::get_node_id_id (5,314,213 samples, 0.71%)</title><rect x="54.0505%" y="4517" width="0.7130%" height="15" fill="rgb(223,116,6)" fg:x="402872473" fg:w="5314213"/><text x="54.3005%" y="4527.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (5,314,213 samples, 0.71%)</title><rect x="54.0505%" y="4501" width="0.7130%" height="15" fill="rgb(205,125,38)" fg:x="402872473" fg:w="5314213"/><text x="54.3005%" y="4511.50"></text></g><g><title>main::benchmark::get_node_id_id::_{{closure}} (5,314,213 samples, 0.71%)</title><rect x="54.0505%" y="4485" width="0.7130%" height="15" fill="rgb(251,78,38)" fg:x="402872473" fg:w="5314213"/><text x="54.3005%" y="4495.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (3,984,014 samples, 0.53%)</title><rect x="54.2290%" y="4469" width="0.5345%" height="15" fill="rgb(253,78,28)" fg:x="404202672" fg:w="3984014"/><text x="54.4790%" y="4479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (3,984,014 samples, 0.53%)</title><rect x="54.2290%" y="4453" width="0.5345%" height="15" fill="rgb(209,120,3)" fg:x="404202672" fg:w="3984014"/><text x="54.4790%" y="4463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (3,984,014 samples, 0.53%)</title><rect x="54.2290%" y="4437" width="0.5345%" height="15" fill="rgb(238,229,9)" fg:x="404202672" fg:w="3984014"/><text x="54.4790%" y="4447.50"></text></g><g><title>hashbrown::map::make_hash (3,984,014 samples, 0.53%)</title><rect x="54.2290%" y="4421" width="0.5345%" height="15" fill="rgb(253,159,18)" fg:x="404202672" fg:w="3984014"/><text x="54.4790%" y="4431.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3,984,014 samples, 0.53%)</title><rect x="54.2290%" y="4405" width="0.5345%" height="15" fill="rgb(244,42,34)" fg:x="404202672" fg:w="3984014"/><text x="54.4790%" y="4415.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1,328,226 samples, 0.18%)</title><rect x="54.5853%" y="4389" width="0.1782%" height="15" fill="rgb(224,8,7)" fg:x="406858460" fg:w="1328226"/><text x="54.8353%" y="4399.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (1,328,226 samples, 0.18%)</title><rect x="54.5853%" y="4373" width="0.1782%" height="15" fill="rgb(210,201,45)" fg:x="406858460" fg:w="1328226"/><text x="54.8353%" y="4383.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (1,328,226 samples, 0.18%)</title><rect x="54.5853%" y="4357" width="0.1782%" height="15" fill="rgb(252,185,21)" fg:x="406858460" fg:w="1328226"/><text x="54.8353%" y="4367.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (1,328,226 samples, 0.18%)</title><rect x="54.5853%" y="4341" width="0.1782%" height="15" fill="rgb(223,131,1)" fg:x="406858460" fg:w="1328226"/><text x="54.8353%" y="4351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (1,328,226 samples, 0.18%)</title><rect x="54.5853%" y="4325" width="0.1782%" height="15" fill="rgb(245,141,16)" fg:x="406858460" fg:w="1328226"/><text x="54.8353%" y="4335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,328,226 samples, 0.18%)</title><rect x="54.5853%" y="4309" width="0.1782%" height="15" fill="rgb(229,55,45)" fg:x="406858460" fg:w="1328226"/><text x="54.8353%" y="4319.50"></text></g><g><title>core::hash::sip::u8to64_le (1,328,226 samples, 0.18%)</title><rect x="54.5853%" y="4293" width="0.1782%" height="15" fill="rgb(208,92,15)" fg:x="406858460" fg:w="1328226"/><text x="54.8353%" y="4303.50"></text></g><g><title>css_bitvector_compiler::BitVector::is_bit_set (1,316,324 samples, 0.18%)</title><rect x="54.7635%" y="4517" width="0.1766%" height="15" fill="rgb(234,185,47)" fg:x="408186686" fg:w="1316324"/><text x="55.0135%" y="4527.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (501,504 samples, 0.07%)</title><rect x="54.9401%" y="4405" width="0.0673%" height="15" fill="rgb(253,104,50)" fg:x="409503010" fg:w="501504"/><text x="55.1901%" y="4415.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (501,504 samples, 0.07%)</title><rect x="54.9401%" y="4389" width="0.0673%" height="15" fill="rgb(205,70,7)" fg:x="409503010" fg:w="501504"/><text x="55.1901%" y="4399.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (501,504 samples, 0.07%)</title><rect x="54.9401%" y="4373" width="0.0673%" height="15" fill="rgb(240,178,43)" fg:x="409503010" fg:w="501504"/><text x="55.1901%" y="4383.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (501,504 samples, 0.07%)</title><rect x="54.9401%" y="4357" width="0.0673%" height="15" fill="rgb(214,112,2)" fg:x="409503010" fg:w="501504"/><text x="55.1901%" y="4367.50"></text></g><g><title>hashbrown::map::make_hash (2,868,161 samples, 0.38%)</title><rect x="54.9401%" y="4437" width="0.3848%" height="15" fill="rgb(206,46,17)" fg:x="409503010" fg:w="2868161"/><text x="55.1901%" y="4447.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2,868,161 samples, 0.38%)</title><rect x="54.9401%" y="4421" width="0.3848%" height="15" fill="rgb(225,220,16)" fg:x="409503010" fg:w="2868161"/><text x="55.1901%" y="4431.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2,366,657 samples, 0.32%)</title><rect x="55.0074%" y="4405" width="0.3175%" height="15" fill="rgb(238,65,40)" fg:x="410004514" fg:w="2366657"/><text x="55.2574%" y="4415.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (2,366,657 samples, 0.32%)</title><rect x="55.0074%" y="4389" width="0.3175%" height="15" fill="rgb(230,151,21)" fg:x="410004514" fg:w="2366657"/><text x="55.2574%" y="4399.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (2,366,657 samples, 0.32%)</title><rect x="55.0074%" y="4373" width="0.3175%" height="15" fill="rgb(218,58,49)" fg:x="410004514" fg:w="2366657"/><text x="55.2574%" y="4383.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (2,366,657 samples, 0.32%)</title><rect x="55.0074%" y="4357" width="0.3175%" height="15" fill="rgb(219,179,14)" fg:x="410004514" fg:w="2366657"/><text x="55.2574%" y="4367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (2,366,657 samples, 0.32%)</title><rect x="55.0074%" y="4341" width="0.3175%" height="15" fill="rgb(223,72,1)" fg:x="410004514" fg:w="2366657"/><text x="55.2574%" y="4351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2,366,657 samples, 0.32%)</title><rect x="55.0074%" y="4325" width="0.3175%" height="15" fill="rgb(238,126,10)" fg:x="410004514" fg:w="2366657"/><text x="55.2574%" y="4335.50"></text></g><g><title>core::hash::sip::u8to64_le (1,143,484 samples, 0.15%)</title><rect x="55.1715%" y="4309" width="0.1534%" height="15" fill="rgb(224,206,38)" fg:x="411227687" fg:w="1143484"/><text x="55.4215%" y="4319.50"></text></g><g><title>hashbrown::control::tag::Tag::full (1,245,430 samples, 0.17%)</title><rect x="55.3249%" y="4389" width="0.1671%" height="15" fill="rgb(212,201,54)" fg:x="412371171" fg:w="1245430"/><text x="55.5749%" y="4399.50"></text></g><g><title>main::benchmark::matches_class_id (5,281,751 samples, 0.71%)</title><rect x="54.9401%" y="4517" width="0.7086%" height="15" fill="rgb(218,154,48)" fg:x="409503010" fg:w="5281751"/><text x="55.1901%" y="4527.50"></text></g><g><title>main::benchmark::node_has_class_id (5,281,751 samples, 0.71%)</title><rect x="54.9401%" y="4501" width="0.7086%" height="15" fill="rgb(232,93,24)" fg:x="409503010" fg:w="5281751"/><text x="55.1901%" y="4511.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (5,281,751 samples, 0.71%)</title><rect x="54.9401%" y="4485" width="0.7086%" height="15" fill="rgb(245,30,21)" fg:x="409503010" fg:w="5281751"/><text x="55.1901%" y="4495.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (5,281,751 samples, 0.71%)</title><rect x="54.9401%" y="4469" width="0.7086%" height="15" fill="rgb(242,148,29)" fg:x="409503010" fg:w="5281751"/><text x="55.1901%" y="4479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (5,281,751 samples, 0.71%)</title><rect x="54.9401%" y="4453" width="0.7086%" height="15" fill="rgb(244,153,54)" fg:x="409503010" fg:w="5281751"/><text x="55.1901%" y="4463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (2,413,590 samples, 0.32%)</title><rect x="55.3249%" y="4437" width="0.3238%" height="15" fill="rgb(252,87,22)" fg:x="412371171" fg:w="2413590"/><text x="55.5749%" y="4447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (2,413,590 samples, 0.32%)</title><rect x="55.3249%" y="4421" width="0.3238%" height="15" fill="rgb(210,51,29)" fg:x="412371171" fg:w="2413590"/><text x="55.5749%" y="4431.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (2,413,590 samples, 0.32%)</title><rect x="55.3249%" y="4405" width="0.3238%" height="15" fill="rgb(242,136,47)" fg:x="412371171" fg:w="2413590"/><text x="55.5749%" y="4415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (1,168,160 samples, 0.16%)</title><rect x="55.4920%" y="4389" width="0.1567%" height="15" fill="rgb(238,68,4)" fg:x="413616601" fg:w="1168160"/><text x="55.7420%" y="4399.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (1,168,160 samples, 0.16%)</title><rect x="55.4920%" y="4373" width="0.1567%" height="15" fill="rgb(242,161,30)" fg:x="413616601" fg:w="1168160"/><text x="55.7420%" y="4383.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (1,168,160 samples, 0.16%)</title><rect x="55.4920%" y="4357" width="0.1567%" height="15" fill="rgb(218,58,44)" fg:x="413616601" fg:w="1168160"/><text x="55.7420%" y="4367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1,168,160 samples, 0.16%)</title><rect x="55.4920%" y="4341" width="0.1567%" height="15" fill="rgb(252,125,32)" fg:x="413616601" fg:w="1168160"/><text x="55.7420%" y="4351.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (1,168,160 samples, 0.16%)</title><rect x="55.4920%" y="4325" width="0.1567%" height="15" fill="rgb(219,178,0)" fg:x="413616601" fg:w="1168160"/><text x="55.7420%" y="4335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1,168,160 samples, 0.16%)</title><rect x="55.4920%" y="4309" width="0.1567%" height="15" fill="rgb(213,152,7)" fg:x="413616601" fg:w="1168160"/><text x="55.7420%" y="4319.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (1,168,160 samples, 0.16%)</title><rect x="55.4920%" y="4293" width="0.1567%" height="15" fill="rgb(249,109,34)" fg:x="413616601" fg:w="1168160"/><text x="55.7420%" y="4303.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1,168,160 samples, 0.16%)</title><rect x="55.4920%" y="4277" width="0.1567%" height="15" fill="rgb(232,96,21)" fg:x="413616601" fg:w="1168160"/><text x="55.7420%" y="4287.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (2,318,324 samples, 0.31%)</title><rect x="55.6487%" y="4373" width="0.3110%" height="15" fill="rgb(228,27,39)" fg:x="414784761" fg:w="2318324"/><text x="55.8987%" y="4383.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2,318,324 samples, 0.31%)</title><rect x="55.6487%" y="4357" width="0.3110%" height="15" fill="rgb(211,182,52)" fg:x="414784761" fg:w="2318324"/><text x="55.8987%" y="4367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2,318,324 samples, 0.31%)</title><rect x="55.6487%" y="4341" width="0.3110%" height="15" fill="rgb(234,178,38)" fg:x="414784761" fg:w="2318324"/><text x="55.8987%" y="4351.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2,318,324 samples, 0.31%)</title><rect x="55.6487%" y="4325" width="0.3110%" height="15" fill="rgb(221,111,3)" fg:x="414784761" fg:w="2318324"/><text x="55.8987%" y="4335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1,217,461 samples, 0.16%)</title><rect x="55.7964%" y="4309" width="0.1633%" height="15" fill="rgb(228,175,21)" fg:x="415885624" fg:w="1217461"/><text x="56.0464%" y="4319.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1,256,451 samples, 0.17%)</title><rect x="55.9598%" y="4373" width="0.1686%" height="15" fill="rgb(228,174,43)" fg:x="417103085" fg:w="1256451"/><text x="56.2098%" y="4383.50"></text></g><g><title>hashbrown::map::make_hash (4,803,904 samples, 0.64%)</title><rect x="55.6487%" y="4405" width="0.6445%" height="15" fill="rgb(211,191,0)" fg:x="414784761" fg:w="4803904"/><text x="55.8987%" y="4415.50"></text></g><g><title>core::hash::BuildHasher::hash_one (4,803,904 samples, 0.64%)</title><rect x="55.6487%" y="4389" width="0.6445%" height="15" fill="rgb(253,117,3)" fg:x="414784761" fg:w="4803904"/><text x="55.8987%" y="4399.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1,229,129 samples, 0.16%)</title><rect x="56.1283%" y="4373" width="0.1649%" height="15" fill="rgb(241,127,19)" fg:x="418359536" fg:w="1229129"/><text x="56.3783%" y="4383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (1,229,129 samples, 0.16%)</title><rect x="56.1283%" y="4357" width="0.1649%" height="15" fill="rgb(218,103,12)" fg:x="418359536" fg:w="1229129"/><text x="56.3783%" y="4367.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (1,229,129 samples, 0.16%)</title><rect x="56.1283%" y="4341" width="0.1649%" height="15" fill="rgb(236,214,43)" fg:x="418359536" fg:w="1229129"/><text x="56.3783%" y="4351.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (1,229,129 samples, 0.16%)</title><rect x="56.1283%" y="4325" width="0.1649%" height="15" fill="rgb(244,144,19)" fg:x="418359536" fg:w="1229129"/><text x="56.3783%" y="4335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (1,229,129 samples, 0.16%)</title><rect x="56.1283%" y="4309" width="0.1649%" height="15" fill="rgb(246,188,10)" fg:x="418359536" fg:w="1229129"/><text x="56.3783%" y="4319.50"></text></g><g><title>core::hash::Hasher::write_u8 (1,229,129 samples, 0.16%)</title><rect x="56.1283%" y="4293" width="0.1649%" height="15" fill="rgb(212,193,33)" fg:x="418359536" fg:w="1229129"/><text x="56.3783%" y="4303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,229,129 samples, 0.16%)</title><rect x="56.1283%" y="4277" width="0.1649%" height="15" fill="rgb(241,51,29)" fg:x="418359536" fg:w="1229129"/><text x="56.3783%" y="4287.50"></text></g><g><title>&lt;hashbrown::control::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1,462,657 samples, 0.20%)</title><rect x="56.2932%" y="4357" width="0.1962%" height="15" fill="rgb(211,58,19)" fg:x="419588665" fg:w="1462657"/><text x="56.5432%" y="4367.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::lowest_set_bit (1,462,657 samples, 0.20%)</title><rect x="56.2932%" y="4341" width="0.1962%" height="15" fill="rgb(229,111,26)" fg:x="419588665" fg:w="1462657"/><text x="56.5432%" y="4351.50"></text></g><g><title>hashbrown::control::tag::Tag::full (1,351,776 samples, 0.18%)</title><rect x="56.4895%" y="4357" width="0.1814%" height="15" fill="rgb(213,115,40)" fg:x="421051322" fg:w="1351776"/><text x="56.7395%" y="4367.50"></text></g><g><title>main::benchmark::matches_id_id (8,908,580 samples, 1.20%)</title><rect x="55.6487%" y="4517" width="1.1952%" height="15" fill="rgb(209,56,44)" fg:x="414784761" fg:w="8908580"/><text x="55.8987%" y="4527.50"></text></g><g><title>main::benchmark::get_node_id_id (8,908,580 samples, 1.20%)</title><rect x="55.6487%" y="4501" width="1.1952%" height="15" fill="rgb(230,108,32)" fg:x="414784761" fg:w="8908580"/><text x="55.8987%" y="4511.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (8,908,580 samples, 1.20%)</title><rect x="55.6487%" y="4485" width="1.1952%" height="15" fill="rgb(216,165,31)" fg:x="414784761" fg:w="8908580"/><text x="55.8987%" y="4495.50"></text></g><g><title>main::benchmark::get_node_id_id::_{{closure}} (8,908,580 samples, 1.20%)</title><rect x="55.6487%" y="4469" width="1.1952%" height="15" fill="rgb(218,122,21)" fg:x="414784761" fg:w="8908580"/><text x="55.8987%" y="4479.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (8,908,580 samples, 1.20%)</title><rect x="55.6487%" y="4453" width="1.1952%" height="15" fill="rgb(223,224,47)" fg:x="414784761" fg:w="8908580"/><text x="55.8987%" y="4463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (8,908,580 samples, 1.20%)</title><rect x="55.6487%" y="4437" width="1.1952%" height="15" fill="rgb(238,102,44)" fg:x="414784761" fg:w="8908580"/><text x="55.8987%" y="4447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (8,908,580 samples, 1.20%)</title><rect x="55.6487%" y="4421" width="1.1952%" height="15" fill="rgb(236,46,40)" fg:x="414784761" fg:w="8908580"/><text x="55.8987%" y="4431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (4,104,676 samples, 0.55%)</title><rect x="56.2932%" y="4405" width="0.5507%" height="15" fill="rgb(247,202,50)" fg:x="419588665" fg:w="4104676"/><text x="56.5432%" y="4415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (4,104,676 samples, 0.55%)</title><rect x="56.2932%" y="4389" width="0.5507%" height="15" fill="rgb(209,99,20)" fg:x="419588665" fg:w="4104676"/><text x="56.5432%" y="4399.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (4,104,676 samples, 0.55%)</title><rect x="56.2932%" y="4373" width="0.5507%" height="15" fill="rgb(252,27,34)" fg:x="419588665" fg:w="4104676"/><text x="56.5432%" y="4383.50"></text></g><g><title>hashbrown::raw::ProbeSeq::move_next (1,290,243 samples, 0.17%)</title><rect x="56.6708%" y="4357" width="0.1731%" height="15" fill="rgb(215,206,23)" fg:x="422403098" fg:w="1290243"/><text x="56.9208%" y="4367.50"></text></g><g><title>main::benchmark::process_node_generated_from_scratch (16,784,143 samples, 2.25%)</title><rect x="54.7635%" y="4533" width="2.2518%" height="15" fill="rgb(212,135,36)" fg:x="408186686" fg:w="16784143"/><text x="55.0135%" y="4543.50">m..</text></g><g><title>main::benchmark::matches_tag_id (1,277,488 samples, 0.17%)</title><rect x="56.8439%" y="4517" width="0.1714%" height="15" fill="rgb(240,189,1)" fg:x="423693341" fg:w="1277488"/><text x="57.0939%" y="4527.50"></text></g><g><title>main::benchmark::get_node_tag_id (1,277,488 samples, 0.17%)</title><rect x="56.8439%" y="4501" width="0.1714%" height="15" fill="rgb(242,56,20)" fg:x="423693341" fg:w="1277488"/><text x="57.0939%" y="4511.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1,277,488 samples, 0.17%)</title><rect x="56.8439%" y="4485" width="0.1714%" height="15" fill="rgb(247,132,33)" fg:x="423693341" fg:w="1277488"/><text x="57.0939%" y="4495.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1,277,488 samples, 0.17%)</title><rect x="56.8439%" y="4469" width="0.1714%" height="15" fill="rgb(208,149,11)" fg:x="423693341" fg:w="1277488"/><text x="57.0939%" y="4479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1,277,488 samples, 0.17%)</title><rect x="56.8439%" y="4453" width="0.1714%" height="15" fill="rgb(211,33,11)" fg:x="423693341" fg:w="1277488"/><text x="57.0939%" y="4463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (1,277,488 samples, 0.17%)</title><rect x="56.8439%" y="4437" width="0.1714%" height="15" fill="rgb(221,29,38)" fg:x="423693341" fg:w="1277488"/><text x="57.0939%" y="4447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1,277,488 samples, 0.17%)</title><rect x="56.8439%" y="4421" width="0.1714%" height="15" fill="rgb(206,182,49)" fg:x="423693341" fg:w="1277488"/><text x="57.0939%" y="4431.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1,277,488 samples, 0.17%)</title><rect x="56.8439%" y="4405" width="0.1714%" height="15" fill="rgb(216,140,1)" fg:x="423693341" fg:w="1277488"/><text x="57.0939%" y="4415.50"></text></g><g><title>hashbrown::control::tag::Tag::full (1,277,488 samples, 0.17%)</title><rect x="56.8439%" y="4389" width="0.1714%" height="15" fill="rgb(232,57,40)" fg:x="423693341" fg:w="1277488"/><text x="57.0939%" y="4399.50"></text></g><g><title>css_bitvector_compiler::BitVector::is_bit_set (2,449,312 samples, 0.33%)</title><rect x="57.0153%" y="4501" width="0.3286%" height="15" fill="rgb(224,186,18)" fg:x="424970829" fg:w="2449312"/><text x="57.2653%" y="4511.50"></text></g><g><title>main::benchmark::matches_class_id (1,353,038 samples, 0.18%)</title><rect x="57.3439%" y="4501" width="0.1815%" height="15" fill="rgb(215,121,11)" fg:x="427420141" fg:w="1353038"/><text x="57.5939%" y="4511.50"></text></g><g><title>main::benchmark::node_has_class_id (1,353,038 samples, 0.18%)</title><rect x="57.3439%" y="4485" width="0.1815%" height="15" fill="rgb(245,147,10)" fg:x="427420141" fg:w="1353038"/><text x="57.5939%" y="4495.50"></text></g><g><title>&lt;&amp;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (1,353,038 samples, 0.18%)</title><rect x="57.3439%" y="4469" width="0.1815%" height="15" fill="rgb(238,153,13)" fg:x="427420141" fg:w="1353038"/><text x="57.5939%" y="4479.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::iter (1,353,038 samples, 0.18%)</title><rect x="57.3439%" y="4453" width="0.1815%" height="15" fill="rgb(233,108,0)" fg:x="427420141" fg:w="1353038"/><text x="57.5939%" y="4463.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::iter (1,353,038 samples, 0.18%)</title><rect x="57.3439%" y="4437" width="0.1815%" height="15" fill="rgb(212,157,17)" fg:x="427420141" fg:w="1353038"/><text x="57.5939%" y="4447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::keys (1,353,038 samples, 0.18%)</title><rect x="57.3439%" y="4421" width="0.1815%" height="15" fill="rgb(225,213,38)" fg:x="427420141" fg:w="1353038"/><text x="57.5939%" y="4431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (1,353,038 samples, 0.18%)</title><rect x="57.3439%" y="4405" width="0.1815%" height="15" fill="rgb(248,16,11)" fg:x="427420141" fg:w="1353038"/><text x="57.5939%" y="4415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter (1,353,038 samples, 0.18%)</title><rect x="57.3439%" y="4389" width="0.1815%" height="15" fill="rgb(241,33,4)" fg:x="427420141" fg:w="1353038"/><text x="57.5939%" y="4399.50"></text></g><g><title>hashbrown::raw::RawTableInner::iter (1,353,038 samples, 0.18%)</title><rect x="57.3439%" y="4373" width="0.1815%" height="15" fill="rgb(222,26,43)" fg:x="427420141" fg:w="1353038"/><text x="57.5939%" y="4383.50"></text></g><g><title>main::benchmark::get_string_to_id_map (1,308,447 samples, 0.18%)</title><rect x="57.5254%" y="4437" width="0.1755%" height="15" fill="rgb(243,29,36)" fg:x="428773179" fg:w="1308447"/><text x="57.7754%" y="4447.50"></text></g><g><title>std::sync::once_lock::OnceLock&lt;T&gt;::get_or_init (1,308,447 samples, 0.18%)</title><rect x="57.5254%" y="4421" width="0.1755%" height="15" fill="rgb(241,9,27)" fg:x="428773179" fg:w="1308447"/><text x="57.7754%" y="4431.50"></text></g><g><title>std::sync::once_lock::OnceLock&lt;T&gt;::get_or_try_init (1,308,447 samples, 0.18%)</title><rect x="57.5254%" y="4405" width="0.1755%" height="15" fill="rgb(205,117,26)" fg:x="428773179" fg:w="1308447"/><text x="57.7754%" y="4415.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1,398,575 samples, 0.19%)</title><rect x="57.7010%" y="4293" width="0.1876%" height="15" fill="rgb(209,80,39)" fg:x="430081626" fg:w="1398575"/><text x="57.9510%" y="4303.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (2,557,412 samples, 0.34%)</title><rect x="57.7010%" y="4357" width="0.3431%" height="15" fill="rgb(239,155,6)" fg:x="430081626" fg:w="2557412"/><text x="57.9510%" y="4367.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2,557,412 samples, 0.34%)</title><rect x="57.7010%" y="4341" width="0.3431%" height="15" fill="rgb(212,104,12)" fg:x="430081626" fg:w="2557412"/><text x="57.9510%" y="4351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2,557,412 samples, 0.34%)</title><rect x="57.7010%" y="4325" width="0.3431%" height="15" fill="rgb(234,204,3)" fg:x="430081626" fg:w="2557412"/><text x="57.9510%" y="4335.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2,557,412 samples, 0.34%)</title><rect x="57.7010%" y="4309" width="0.3431%" height="15" fill="rgb(251,218,7)" fg:x="430081626" fg:w="2557412"/><text x="57.9510%" y="4319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1,158,837 samples, 0.16%)</title><rect x="57.8886%" y="4293" width="0.1555%" height="15" fill="rgb(221,81,32)" fg:x="431480201" fg:w="1158837"/><text x="58.1386%" y="4303.50"></text></g><g><title>hashbrown::map::make_hash (3,740,178 samples, 0.50%)</title><rect x="57.7010%" y="4389" width="0.5018%" height="15" fill="rgb(214,152,26)" fg:x="430081626" fg:w="3740178"/><text x="57.9510%" y="4399.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3,740,178 samples, 0.50%)</title><rect x="57.7010%" y="4373" width="0.5018%" height="15" fill="rgb(223,22,3)" fg:x="430081626" fg:w="3740178"/><text x="57.9510%" y="4383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1,182,766 samples, 0.16%)</title><rect x="58.0441%" y="4357" width="0.1587%" height="15" fill="rgb(207,174,7)" fg:x="432639038" fg:w="1182766"/><text x="58.2941%" y="4367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (1,182,766 samples, 0.16%)</title><rect x="58.0441%" y="4341" width="0.1587%" height="15" fill="rgb(224,19,52)" fg:x="432639038" fg:w="1182766"/><text x="58.2941%" y="4351.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (1,182,766 samples, 0.16%)</title><rect x="58.0441%" y="4325" width="0.1587%" height="15" fill="rgb(228,24,14)" fg:x="432639038" fg:w="1182766"/><text x="58.2941%" y="4335.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (1,182,766 samples, 0.16%)</title><rect x="58.0441%" y="4309" width="0.1587%" height="15" fill="rgb(230,153,43)" fg:x="432639038" fg:w="1182766"/><text x="58.2941%" y="4319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (1,182,766 samples, 0.16%)</title><rect x="58.0441%" y="4293" width="0.1587%" height="15" fill="rgb(231,106,12)" fg:x="432639038" fg:w="1182766"/><text x="58.2941%" y="4303.50"></text></g><g><title>core::hash::Hasher::write_u8 (1,182,766 samples, 0.16%)</title><rect x="58.0441%" y="4277" width="0.1587%" height="15" fill="rgb(215,92,2)" fg:x="432639038" fg:w="1182766"/><text x="58.2941%" y="4287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,182,766 samples, 0.16%)</title><rect x="58.0441%" y="4261" width="0.1587%" height="15" fill="rgb(249,143,25)" fg:x="432639038" fg:w="1182766"/><text x="58.2941%" y="4271.50"></text></g><g><title>core::hash::sip::u8to64_le (1,182,766 samples, 0.16%)</title><rect x="58.0441%" y="4245" width="0.1587%" height="15" fill="rgb(252,7,35)" fg:x="432639038" fg:w="1182766"/><text x="58.2941%" y="4255.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (1,288,414 samples, 0.17%)</title><rect x="58.2028%" y="4341" width="0.1729%" height="15" fill="rgb(216,69,40)" fg:x="433821804" fg:w="1288414"/><text x="58.4528%" y="4351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1,288,414 samples, 0.17%)</title><rect x="58.2028%" y="4325" width="0.1729%" height="15" fill="rgb(240,36,33)" fg:x="433821804" fg:w="1288414"/><text x="58.4528%" y="4335.50"></text></g><g><title>main::benchmark::invoke_full_layout (209,795,152 samples, 28.15%)</title><rect x="30.3997%" y="4821" width="28.1467%" height="15" fill="rgb(231,128,14)" fg:x="226587724" fg:w="209795152"/><text x="30.6497%" y="4831.50">main::benchmark::invoke_full_layout</text></g><g><title>main::benchmark::process_tree_full_recompute (209,795,152 samples, 28.15%)</title><rect x="30.3997%" y="4805" width="28.1467%" height="15" fill="rgb(245,143,14)" fg:x="226587724" fg:w="209795152"/><text x="30.6497%" y="4815.50">main::benchmark::process_tree_full_recompute</text></g><g><title>main::benchmark::process_tree_recursive_from_scratch (209,795,152 samples, 28.15%)</title><rect x="30.3997%" y="4789" width="28.1467%" height="15" fill="rgb(222,130,28)" fg:x="226587724" fg:w="209795152"/><text x="30.6497%" y="4799.50">main::benchmark::process_tree_recursive_from_..</text></g><g><title>main::benchmark::process_tree_recursive_from_scratch (208,808,163 samples, 28.01%)</title><rect x="30.5321%" y="4773" width="28.0143%" height="15" fill="rgb(212,10,48)" fg:x="227574713" fg:w="208808163"/><text x="30.7821%" y="4783.50">main::benchmark::process_tree_recursive_from_..</text></g><g><title>main::benchmark::process_tree_recursive_from_scratch (208,808,163 samples, 28.01%)</title><rect x="30.5321%" y="4757" width="28.0143%" height="15" fill="rgb(254,118,45)" fg:x="227574713" fg:w="208808163"/><text x="30.7821%" y="4767.50">main::benchmark::process_tree_recursive_from_..</text></g><g><title>main::benchmark::process_tree_recursive_from_scratch (206,328,361 samples, 27.68%)</title><rect x="30.8648%" y="4741" width="27.6816%" height="15" fill="rgb(228,6,45)" fg:x="230054515" fg:w="206328361"/><text x="31.1148%" y="4751.50">main::benchmark::process_tree_recursive_from..</text></g><g><title>main::benchmark::process_tree_recursive_from_scratch (198,613,385 samples, 26.65%)</title><rect x="31.8998%" y="4725" width="26.6465%" height="15" fill="rgb(241,18,35)" fg:x="237769491" fg:w="198613385"/><text x="32.1498%" y="4735.50">main::benchmark::process_tree_recursive_fro..</text></g><g><title>main::benchmark::process_tree_recursive_from_scratch (198,613,385 samples, 26.65%)</title><rect x="31.8998%" y="4709" width="26.6465%" height="15" fill="rgb(227,214,53)" fg:x="237769491" fg:w="198613385"/><text x="32.1498%" y="4719.50">main::benchmark::process_tree_recursive_fro..</text></g><g><title>main::benchmark::process_tree_recursive_from_scratch (196,096,584 samples, 26.31%)</title><rect x="32.2375%" y="4693" width="26.3089%" height="15" fill="rgb(224,107,51)" fg:x="240286292" fg:w="196096584"/><text x="32.4875%" y="4703.50">main::benchmark::process_tree_recursive_fr..</text></g><g><title>main::benchmark::process_tree_recursive_from_scratch (193,409,962 samples, 25.95%)</title><rect x="32.5979%" y="4677" width="25.9484%" height="15" fill="rgb(248,60,28)" fg:x="242972914" fg:w="193409962"/><text x="32.8479%" y="4687.50">main::benchmark::process_tree_recursive_f..</text></g><g><title>main::benchmark::process_tree_recursive_from_scratch (189,544,973 samples, 25.43%)</title><rect x="33.1165%" y="4661" width="25.4299%" height="15" fill="rgb(249,101,23)" fg:x="246837903" fg:w="189544973"/><text x="33.3665%" y="4671.50">main::benchmark::process_tree_recursive_f..</text></g><g><title>main::benchmark::process_tree_recursive_from_scratch (180,796,732 samples, 24.26%)</title><rect x="34.2902%" y="4645" width="24.2562%" height="15" fill="rgb(228,51,19)" fg:x="255586144" fg:w="180796732"/><text x="34.5402%" y="4655.50">main::benchmark::process_tree_recursive..</text></g><g><title>main::benchmark::process_tree_recursive_from_scratch (165,100,184 samples, 22.15%)</title><rect x="36.3961%" y="4629" width="22.1503%" height="15" fill="rgb(213,20,6)" fg:x="271282692" fg:w="165100184"/><text x="36.6461%" y="4639.50">main::benchmark::process_tree_recur..</text></g><g><title>main::benchmark::process_tree_recursive_from_scratch (111,469,194 samples, 14.96%)</title><rect x="43.5914%" y="4613" width="14.9550%" height="15" fill="rgb(212,124,10)" fg:x="324913682" fg:w="111469194"/><text x="43.8414%" y="4623.50">main::benchmark::proces..</text></g><g><title>main::benchmark::process_tree_recursive_from_scratch (84,813,675 samples, 11.38%)</title><rect x="47.1675%" y="4597" width="11.3788%" height="15" fill="rgb(248,3,40)" fg:x="351569201" fg:w="84813675"/><text x="47.4175%" y="4607.50">main::benchmark::..</text></g><g><title>main::benchmark::process_tree_recursive_from_scratch (63,757,852 samples, 8.55%)</title><rect x="49.9924%" y="4581" width="8.5539%" height="15" fill="rgb(223,178,23)" fg:x="372625024" fg:w="63757852"/><text x="50.2424%" y="4591.50">main::benchm..</text></g><g><title>main::benchmark::process_tree_recursive_from_scratch (36,122,691 samples, 4.85%)</title><rect x="53.7001%" y="4565" width="4.8463%" height="15" fill="rgb(240,132,45)" fg:x="400260185" fg:w="36122691"/><text x="53.9501%" y="4575.50">main::..</text></g><g><title>main::benchmark::process_tree_recursive_from_scratch (28,196,190 samples, 3.78%)</title><rect x="54.7635%" y="4549" width="3.7829%" height="15" fill="rgb(245,164,36)" fg:x="408186686" fg:w="28196190"/><text x="55.0135%" y="4559.50">main..</text></g><g><title>main::benchmark::process_tree_recursive_from_scratch (11,412,047 samples, 1.53%)</title><rect x="57.0153%" y="4533" width="1.5311%" height="15" fill="rgb(231,188,53)" fg:x="424970829" fg:w="11412047"/><text x="57.2653%" y="4543.50"></text></g><g><title>main::benchmark::process_node_generated_from_scratch (11,412,047 samples, 1.53%)</title><rect x="57.0153%" y="4517" width="1.5311%" height="15" fill="rgb(237,198,39)" fg:x="424970829" fg:w="11412047"/><text x="57.2653%" y="4527.50"></text></g><g><title>main::benchmark::matches_id_id (7,609,697 samples, 1.02%)</title><rect x="57.5254%" y="4501" width="1.0209%" height="15" fill="rgb(223,120,35)" fg:x="428773179" fg:w="7609697"/><text x="57.7754%" y="4511.50"></text></g><g><title>main::benchmark::get_node_id_id (7,609,697 samples, 1.02%)</title><rect x="57.5254%" y="4485" width="1.0209%" height="15" fill="rgb(253,107,49)" fg:x="428773179" fg:w="7609697"/><text x="57.7754%" y="4495.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (7,609,697 samples, 1.02%)</title><rect x="57.5254%" y="4469" width="1.0209%" height="15" fill="rgb(216,44,31)" fg:x="428773179" fg:w="7609697"/><text x="57.7754%" y="4479.50"></text></g><g><title>main::benchmark::get_node_id_id::_{{closure}} (7,609,697 samples, 1.02%)</title><rect x="57.5254%" y="4453" width="1.0209%" height="15" fill="rgb(253,87,21)" fg:x="428773179" fg:w="7609697"/><text x="57.7754%" y="4463.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (6,301,250 samples, 0.85%)</title><rect x="57.7010%" y="4437" width="0.8454%" height="15" fill="rgb(226,18,2)" fg:x="430081626" fg:w="6301250"/><text x="57.9510%" y="4447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (6,301,250 samples, 0.85%)</title><rect x="57.7010%" y="4421" width="0.8454%" height="15" fill="rgb(216,8,46)" fg:x="430081626" fg:w="6301250"/><text x="57.9510%" y="4431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (6,301,250 samples, 0.85%)</title><rect x="57.7010%" y="4405" width="0.8454%" height="15" fill="rgb(226,140,39)" fg:x="430081626" fg:w="6301250"/><text x="57.9510%" y="4415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (2,561,072 samples, 0.34%)</title><rect x="58.2028%" y="4389" width="0.3436%" height="15" fill="rgb(221,194,54)" fg:x="433821804" fg:w="2561072"/><text x="58.4528%" y="4399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (2,561,072 samples, 0.34%)</title><rect x="58.2028%" y="4373" width="0.3436%" height="15" fill="rgb(213,92,11)" fg:x="433821804" fg:w="2561072"/><text x="58.4528%" y="4383.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (2,561,072 samples, 0.34%)</title><rect x="58.2028%" y="4357" width="0.3436%" height="15" fill="rgb(229,162,46)" fg:x="433821804" fg:w="2561072"/><text x="58.4528%" y="4367.50"></text></g><g><title>hashbrown::control::tag::Tag::full (1,272,658 samples, 0.17%)</title><rect x="58.3756%" y="4341" width="0.1707%" height="15" fill="rgb(214,111,36)" fg:x="435110218" fg:w="1272658"/><text x="58.6256%" y="4351.50"></text></g><g><title>main::benchmark::process_node_generated_incremental (1,291,267 samples, 0.17%)</title><rect x="58.5464%" y="4773" width="0.1732%" height="15" fill="rgb(207,6,21)" fg:x="436382876" fg:w="1291267"/><text x="58.7964%" y="4783.50"></text></g><g><title>css_bitvector_compiler::BitVector::is_bit_set (1,291,267 samples, 0.17%)</title><rect x="58.5464%" y="4757" width="0.1732%" height="15" fill="rgb(213,127,38)" fg:x="436382876" fg:w="1291267"/><text x="58.7964%" y="4767.50"></text></g><g><title>css_bitvector_compiler::HtmlNode::needs_any_recomputation (1,238,277 samples, 0.17%)</title><rect x="58.7196%" y="4725" width="0.1661%" height="15" fill="rgb(238,118,32)" fg:x="437674143" fg:w="1238277"/><text x="58.9696%" y="4735.50"></text></g><g><title>css_bitvector_compiler::HtmlNode::has_relevant_parent_state_changed (1,238,277 samples, 0.17%)</title><rect x="58.7196%" y="4709" width="0.1661%" height="15" fill="rgb(240,139,39)" fg:x="437674143" fg:w="1238277"/><text x="58.9696%" y="4719.50"></text></g><g><title>css_bitvector_compiler::BitVector::is_bit_set (993,939 samples, 0.13%)</title><rect x="59.0188%" y="4709" width="0.1333%" height="15" fill="rgb(235,10,37)" fg:x="439904421" fg:w="993939"/><text x="59.2688%" y="4719.50"></text></g><g><title>css_bitvector_compiler::BitVector::with_capacity (1,140,624 samples, 0.15%)</title><rect x="59.1522%" y="4709" width="0.1530%" height="15" fill="rgb(249,171,38)" fg:x="440898360" fg:w="1140624"/><text x="59.4022%" y="4719.50"></text></g><g><title>alloc::vec::from_elem (1,140,624 samples, 0.15%)</title><rect x="59.1522%" y="4693" width="0.1530%" height="15" fill="rgb(242,144,32)" fg:x="440898360" fg:w="1140624"/><text x="59.4022%" y="4703.50"></text></g><g><title>&lt;u8 as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (1,140,624 samples, 0.15%)</title><rect x="59.1522%" y="4677" width="0.1530%" height="15" fill="rgb(217,117,21)" fg:x="440898360" fg:w="1140624"/><text x="59.4022%" y="4687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (1,140,624 samples, 0.15%)</title><rect x="59.1522%" y="4661" width="0.1530%" height="15" fill="rgb(249,87,1)" fg:x="440898360" fg:w="1140624"/><text x="59.4022%" y="4671.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_zeroed_in (1,140,624 samples, 0.15%)</title><rect x="59.1522%" y="4645" width="0.1530%" height="15" fill="rgb(248,196,48)" fg:x="440898360" fg:w="1140624"/><text x="59.4022%" y="4655.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1,140,624 samples, 0.15%)</title><rect x="59.1522%" y="4629" width="0.1530%" height="15" fill="rgb(251,206,33)" fg:x="440898360" fg:w="1140624"/><text x="59.4022%" y="4639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (1,140,624 samples, 0.15%)</title><rect x="59.1522%" y="4613" width="0.1530%" height="15" fill="rgb(232,141,28)" fg:x="440898360" fg:w="1140624"/><text x="59.4022%" y="4623.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,140,624 samples, 0.15%)</title><rect x="59.1522%" y="4597" width="0.1530%" height="15" fill="rgb(209,167,14)" fg:x="440898360" fg:w="1140624"/><text x="59.4022%" y="4607.50"></text></g><g><title>alloc::alloc::alloc_zeroed (1,140,624 samples, 0.15%)</title><rect x="59.1522%" y="4581" width="0.1530%" height="15" fill="rgb(225,11,50)" fg:x="440898360" fg:w="1140624"/><text x="59.4022%" y="4591.50"></text></g><g><title>__libc_calloc (1,140,624 samples, 0.15%)</title><rect x="59.1522%" y="4565" width="0.1530%" height="15" fill="rgb(209,50,20)" fg:x="440898360" fg:w="1140624"/><text x="59.4022%" y="4575.50"></text></g><g><title>[libc.so.6] (1,140,624 samples, 0.15%)</title><rect x="59.1522%" y="4549" width="0.1530%" height="15" fill="rgb(212,17,46)" fg:x="440898360" fg:w="1140624"/><text x="59.4022%" y="4559.50"></text></g><g><title>main::benchmark::process_node_generated_incremental (4,414,019 samples, 0.59%)</title><rect x="58.8858%" y="4725" width="0.5922%" height="15" fill="rgb(216,101,39)" fg:x="438912420" fg:w="4414019"/><text x="59.1358%" y="4735.50"></text></g><g><title>main::benchmark::matches_class_id (1,287,455 samples, 0.17%)</title><rect x="59.3052%" y="4709" width="0.1727%" height="15" fill="rgb(212,228,48)" fg:x="442038984" fg:w="1287455"/><text x="59.5552%" y="4719.50"></text></g><g><title>main::benchmark::node_has_class_id (1,287,455 samples, 0.17%)</title><rect x="59.3052%" y="4693" width="0.1727%" height="15" fill="rgb(250,6,50)" fg:x="442038984" fg:w="1287455"/><text x="59.5552%" y="4703.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1,287,455 samples, 0.17%)</title><rect x="59.3052%" y="4677" width="0.1727%" height="15" fill="rgb(250,160,48)" fg:x="442038984" fg:w="1287455"/><text x="59.5552%" y="4687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1,287,455 samples, 0.17%)</title><rect x="59.3052%" y="4661" width="0.1727%" height="15" fill="rgb(244,216,33)" fg:x="442038984" fg:w="1287455"/><text x="59.5552%" y="4671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1,287,455 samples, 0.17%)</title><rect x="59.3052%" y="4645" width="0.1727%" height="15" fill="rgb(207,157,5)" fg:x="442038984" fg:w="1287455"/><text x="59.5552%" y="4655.50"></text></g><g><title>hashbrown::map::make_hash (1,287,455 samples, 0.17%)</title><rect x="59.3052%" y="4629" width="0.1727%" height="15" fill="rgb(228,199,8)" fg:x="442038984" fg:w="1287455"/><text x="59.5552%" y="4639.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1,287,455 samples, 0.17%)</title><rect x="59.3052%" y="4613" width="0.1727%" height="15" fill="rgb(227,80,20)" fg:x="442038984" fg:w="1287455"/><text x="59.5552%" y="4623.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1,287,455 samples, 0.17%)</title><rect x="59.3052%" y="4597" width="0.1727%" height="15" fill="rgb(222,9,33)" fg:x="442038984" fg:w="1287455"/><text x="59.5552%" y="4607.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (1,287,455 samples, 0.17%)</title><rect x="59.3052%" y="4581" width="0.1727%" height="15" fill="rgb(239,44,28)" fg:x="442038984" fg:w="1287455"/><text x="59.5552%" y="4591.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (1,287,455 samples, 0.17%)</title><rect x="59.3052%" y="4565" width="0.1727%" height="15" fill="rgb(249,187,43)" fg:x="442038984" fg:w="1287455"/><text x="59.5552%" y="4575.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (1,287,455 samples, 0.17%)</title><rect x="59.3052%" y="4549" width="0.1727%" height="15" fill="rgb(216,141,28)" fg:x="442038984" fg:w="1287455"/><text x="59.5552%" y="4559.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (1,287,455 samples, 0.17%)</title><rect x="59.3052%" y="4533" width="0.1727%" height="15" fill="rgb(230,154,53)" fg:x="442038984" fg:w="1287455"/><text x="59.5552%" y="4543.50"></text></g><g><title>main::benchmark::process_node_generated_incremental (1,272,873 samples, 0.17%)</title><rect x="59.4780%" y="4709" width="0.1708%" height="15" fill="rgb(227,82,4)" fg:x="443326439" fg:w="1272873"/><text x="59.7280%" y="4719.50"></text></g><g><title>main::benchmark::matches_id_id (1,272,873 samples, 0.17%)</title><rect x="59.4780%" y="4693" width="0.1708%" height="15" fill="rgb(220,107,16)" fg:x="443326439" fg:w="1272873"/><text x="59.7280%" y="4703.50"></text></g><g><title>main::benchmark::get_node_id_id (1,272,873 samples, 0.17%)</title><rect x="59.4780%" y="4677" width="0.1708%" height="15" fill="rgb(207,187,2)" fg:x="443326439" fg:w="1272873"/><text x="59.7280%" y="4687.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (1,272,873 samples, 0.17%)</title><rect x="59.4780%" y="4661" width="0.1708%" height="15" fill="rgb(210,162,52)" fg:x="443326439" fg:w="1272873"/><text x="59.7280%" y="4671.50"></text></g><g><title>main::benchmark::get_node_id_id::_{{closure}} (1,272,873 samples, 0.17%)</title><rect x="59.4780%" y="4645" width="0.1708%" height="15" fill="rgb(217,216,49)" fg:x="443326439" fg:w="1272873"/><text x="59.7280%" y="4655.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1,272,873 samples, 0.17%)</title><rect x="59.4780%" y="4629" width="0.1708%" height="15" fill="rgb(218,146,49)" fg:x="443326439" fg:w="1272873"/><text x="59.7280%" y="4639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1,272,873 samples, 0.17%)</title><rect x="59.4780%" y="4613" width="0.1708%" height="15" fill="rgb(216,55,40)" fg:x="443326439" fg:w="1272873"/><text x="59.7280%" y="4623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1,272,873 samples, 0.17%)</title><rect x="59.4780%" y="4597" width="0.1708%" height="15" fill="rgb(208,196,21)" fg:x="443326439" fg:w="1272873"/><text x="59.7280%" y="4607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (1,272,873 samples, 0.17%)</title><rect x="59.4780%" y="4581" width="0.1708%" height="15" fill="rgb(242,117,42)" fg:x="443326439" fg:w="1272873"/><text x="59.7280%" y="4591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1,272,873 samples, 0.17%)</title><rect x="59.4780%" y="4565" width="0.1708%" height="15" fill="rgb(210,11,23)" fg:x="443326439" fg:w="1272873"/><text x="59.7280%" y="4575.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1,272,873 samples, 0.17%)</title><rect x="59.4780%" y="4549" width="0.1708%" height="15" fill="rgb(217,110,2)" fg:x="443326439" fg:w="1272873"/><text x="59.7280%" y="4559.50"></text></g><g><title>hashbrown::control::tag::Tag::full (1,272,873 samples, 0.17%)</title><rect x="59.4780%" y="4533" width="0.1708%" height="15" fill="rgb(229,77,54)" fg:x="443326439" fg:w="1272873"/><text x="59.7280%" y="4543.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1,243,322 samples, 0.17%)</title><rect x="59.6487%" y="4533" width="0.1668%" height="15" fill="rgb(218,53,16)" fg:x="444599312" fg:w="1243322"/><text x="59.8987%" y="4543.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1,243,322 samples, 0.17%)</title><rect x="59.6487%" y="4517" width="0.1668%" height="15" fill="rgb(215,38,13)" fg:x="444599312" fg:w="1243322"/><text x="59.8987%" y="4527.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1,243,322 samples, 0.17%)</title><rect x="59.6487%" y="4501" width="0.1668%" height="15" fill="rgb(235,42,18)" fg:x="444599312" fg:w="1243322"/><text x="59.8987%" y="4511.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1,243,322 samples, 0.17%)</title><rect x="59.6487%" y="4485" width="0.1668%" height="15" fill="rgb(219,66,54)" fg:x="444599312" fg:w="1243322"/><text x="59.8987%" y="4495.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1,243,322 samples, 0.17%)</title><rect x="59.6487%" y="4469" width="0.1668%" height="15" fill="rgb(222,205,4)" fg:x="444599312" fg:w="1243322"/><text x="59.8987%" y="4479.50"></text></g><g><title>main::benchmark::matches_id_id (2,548,756 samples, 0.34%)</title><rect x="59.6487%" y="4677" width="0.3419%" height="15" fill="rgb(227,213,46)" fg:x="444599312" fg:w="2548756"/><text x="59.8987%" y="4687.50"></text></g><g><title>main::benchmark::get_node_id_id (2,548,756 samples, 0.34%)</title><rect x="59.6487%" y="4661" width="0.3419%" height="15" fill="rgb(250,145,42)" fg:x="444599312" fg:w="2548756"/><text x="59.8987%" y="4671.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (2,548,756 samples, 0.34%)</title><rect x="59.6487%" y="4645" width="0.3419%" height="15" fill="rgb(219,15,2)" fg:x="444599312" fg:w="2548756"/><text x="59.8987%" y="4655.50"></text></g><g><title>main::benchmark::get_node_id_id::_{{closure}} (2,548,756 samples, 0.34%)</title><rect x="59.6487%" y="4629" width="0.3419%" height="15" fill="rgb(231,181,52)" fg:x="444599312" fg:w="2548756"/><text x="59.8987%" y="4639.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (2,548,756 samples, 0.34%)</title><rect x="59.6487%" y="4613" width="0.3419%" height="15" fill="rgb(235,1,42)" fg:x="444599312" fg:w="2548756"/><text x="59.8987%" y="4623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (2,548,756 samples, 0.34%)</title><rect x="59.6487%" y="4597" width="0.3419%" height="15" fill="rgb(249,88,27)" fg:x="444599312" fg:w="2548756"/><text x="59.8987%" y="4607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (2,548,756 samples, 0.34%)</title><rect x="59.6487%" y="4581" width="0.3419%" height="15" fill="rgb(235,145,16)" fg:x="444599312" fg:w="2548756"/><text x="59.8987%" y="4591.50"></text></g><g><title>hashbrown::map::make_hash (2,548,756 samples, 0.34%)</title><rect x="59.6487%" y="4565" width="0.3419%" height="15" fill="rgb(237,114,19)" fg:x="444599312" fg:w="2548756"/><text x="59.8987%" y="4575.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2,548,756 samples, 0.34%)</title><rect x="59.6487%" y="4549" width="0.3419%" height="15" fill="rgb(238,51,50)" fg:x="444599312" fg:w="2548756"/><text x="59.8987%" y="4559.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1,305,434 samples, 0.18%)</title><rect x="59.8155%" y="4533" width="0.1751%" height="15" fill="rgb(205,194,25)" fg:x="445842634" fg:w="1305434"/><text x="60.0655%" y="4543.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (1,305,434 samples, 0.18%)</title><rect x="59.8155%" y="4517" width="0.1751%" height="15" fill="rgb(215,203,17)" fg:x="445842634" fg:w="1305434"/><text x="60.0655%" y="4527.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (1,305,434 samples, 0.18%)</title><rect x="59.8155%" y="4501" width="0.1751%" height="15" fill="rgb(233,112,49)" fg:x="445842634" fg:w="1305434"/><text x="60.0655%" y="4511.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (1,305,434 samples, 0.18%)</title><rect x="59.8155%" y="4485" width="0.1751%" height="15" fill="rgb(241,130,26)" fg:x="445842634" fg:w="1305434"/><text x="60.0655%" y="4495.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (1,305,434 samples, 0.18%)</title><rect x="59.8155%" y="4469" width="0.1751%" height="15" fill="rgb(252,223,19)" fg:x="445842634" fg:w="1305434"/><text x="60.0655%" y="4479.50"></text></g><g><title>core::hash::Hasher::write_u8 (1,305,434 samples, 0.18%)</title><rect x="59.8155%" y="4453" width="0.1751%" height="15" fill="rgb(211,95,25)" fg:x="445842634" fg:w="1305434"/><text x="60.0655%" y="4463.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,305,434 samples, 0.18%)</title><rect x="59.8155%" y="4437" width="0.1751%" height="15" fill="rgb(251,182,27)" fg:x="445842634" fg:w="1305434"/><text x="60.0655%" y="4447.50"></text></g><g><title>main::benchmark::process_node_generated_incremental (3,696,480 samples, 0.50%)</title><rect x="59.6487%" y="4693" width="0.4959%" height="15" fill="rgb(238,24,4)" fg:x="444599312" fg:w="3696480"/><text x="59.8987%" y="4703.50"></text></g><g><title>main::benchmark::matches_tag_id (1,147,724 samples, 0.15%)</title><rect x="59.9907%" y="4677" width="0.1540%" height="15" fill="rgb(224,220,25)" fg:x="447148068" fg:w="1147724"/><text x="60.2407%" y="4687.50"></text></g><g><title>main::benchmark::get_node_tag_id (1,147,724 samples, 0.15%)</title><rect x="59.9907%" y="4661" width="0.1540%" height="15" fill="rgb(239,133,26)" fg:x="447148068" fg:w="1147724"/><text x="60.2407%" y="4671.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1,147,724 samples, 0.15%)</title><rect x="59.9907%" y="4645" width="0.1540%" height="15" fill="rgb(211,94,48)" fg:x="447148068" fg:w="1147724"/><text x="60.2407%" y="4655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1,147,724 samples, 0.15%)</title><rect x="59.9907%" y="4629" width="0.1540%" height="15" fill="rgb(239,87,6)" fg:x="447148068" fg:w="1147724"/><text x="60.2407%" y="4639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1,147,724 samples, 0.15%)</title><rect x="59.9907%" y="4613" width="0.1540%" height="15" fill="rgb(227,62,0)" fg:x="447148068" fg:w="1147724"/><text x="60.2407%" y="4623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (1,147,724 samples, 0.15%)</title><rect x="59.9907%" y="4597" width="0.1540%" height="15" fill="rgb(211,226,4)" fg:x="447148068" fg:w="1147724"/><text x="60.2407%" y="4607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1,147,724 samples, 0.15%)</title><rect x="59.9907%" y="4581" width="0.1540%" height="15" fill="rgb(253,38,52)" fg:x="447148068" fg:w="1147724"/><text x="60.2407%" y="4591.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1,147,724 samples, 0.15%)</title><rect x="59.9907%" y="4565" width="0.1540%" height="15" fill="rgb(229,126,40)" fg:x="447148068" fg:w="1147724"/><text x="60.2407%" y="4575.50"></text></g><g><title>&lt;hashbrown::control::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1,147,724 samples, 0.15%)</title><rect x="59.9907%" y="4549" width="0.1540%" height="15" fill="rgb(229,165,44)" fg:x="447148068" fg:w="1147724"/><text x="60.2407%" y="4559.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::lowest_set_bit (1,147,724 samples, 0.15%)</title><rect x="59.9907%" y="4533" width="0.1540%" height="15" fill="rgb(247,95,47)" fg:x="447148068" fg:w="1147724"/><text x="60.2407%" y="4543.50"></text></g><g><title>main::benchmark::matches_class_id (1,193,603 samples, 0.16%)</title><rect x="60.1447%" y="4661" width="0.1601%" height="15" fill="rgb(216,140,30)" fg:x="448295792" fg:w="1193603"/><text x="60.3947%" y="4671.50"></text></g><g><title>main::benchmark::node_has_class_id (1,193,603 samples, 0.16%)</title><rect x="60.1447%" y="4645" width="0.1601%" height="15" fill="rgb(246,214,8)" fg:x="448295792" fg:w="1193603"/><text x="60.3947%" y="4655.50"></text></g><g><title>&lt;&amp;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (1,193,603 samples, 0.16%)</title><rect x="60.1447%" y="4629" width="0.1601%" height="15" fill="rgb(227,224,15)" fg:x="448295792" fg:w="1193603"/><text x="60.3947%" y="4639.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::iter (1,193,603 samples, 0.16%)</title><rect x="60.1447%" y="4613" width="0.1601%" height="15" fill="rgb(233,175,4)" fg:x="448295792" fg:w="1193603"/><text x="60.3947%" y="4623.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::iter (1,193,603 samples, 0.16%)</title><rect x="60.1447%" y="4597" width="0.1601%" height="15" fill="rgb(221,66,45)" fg:x="448295792" fg:w="1193603"/><text x="60.3947%" y="4607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::keys (1,193,603 samples, 0.16%)</title><rect x="60.1447%" y="4581" width="0.1601%" height="15" fill="rgb(221,178,18)" fg:x="448295792" fg:w="1193603"/><text x="60.3947%" y="4591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (1,193,603 samples, 0.16%)</title><rect x="60.1447%" y="4565" width="0.1601%" height="15" fill="rgb(213,81,29)" fg:x="448295792" fg:w="1193603"/><text x="60.3947%" y="4575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter (1,193,603 samples, 0.16%)</title><rect x="60.1447%" y="4549" width="0.1601%" height="15" fill="rgb(220,89,49)" fg:x="448295792" fg:w="1193603"/><text x="60.3947%" y="4559.50"></text></g><g><title>hashbrown::raw::RawTableInner::iter (1,193,603 samples, 0.16%)</title><rect x="60.1447%" y="4533" width="0.1601%" height="15" fill="rgb(227,60,33)" fg:x="448295792" fg:w="1193603"/><text x="60.3947%" y="4543.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (1,193,603 samples, 0.16%)</title><rect x="60.1447%" y="4517" width="0.1601%" height="15" fill="rgb(205,113,12)" fg:x="448295792" fg:w="1193603"/><text x="60.3947%" y="4527.50"></text></g><g><title>hashbrown::control::group::sse2::Group::load_aligned (1,193,603 samples, 0.16%)</title><rect x="60.1447%" y="4501" width="0.1601%" height="15" fill="rgb(211,32,1)" fg:x="448295792" fg:w="1193603"/><text x="60.3947%" y="4511.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (1,193,603 samples, 0.16%)</title><rect x="60.1447%" y="4485" width="0.1601%" height="15" fill="rgb(246,2,12)" fg:x="448295792" fg:w="1193603"/><text x="60.3947%" y="4495.50"></text></g><g><title>hashbrown::map::make_hash (1,200,996 samples, 0.16%)</title><rect x="60.3048%" y="4549" width="0.1611%" height="15" fill="rgb(243,37,27)" fg:x="449489395" fg:w="1200996"/><text x="60.5548%" y="4559.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1,200,996 samples, 0.16%)</title><rect x="60.3048%" y="4533" width="0.1611%" height="15" fill="rgb(248,211,31)" fg:x="449489395" fg:w="1200996"/><text x="60.5548%" y="4543.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1,200,996 samples, 0.16%)</title><rect x="60.3048%" y="4517" width="0.1611%" height="15" fill="rgb(242,146,47)" fg:x="449489395" fg:w="1200996"/><text x="60.5548%" y="4527.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (1,200,996 samples, 0.16%)</title><rect x="60.3048%" y="4501" width="0.1611%" height="15" fill="rgb(206,70,20)" fg:x="449489395" fg:w="1200996"/><text x="60.5548%" y="4511.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (1,200,996 samples, 0.16%)</title><rect x="60.3048%" y="4485" width="0.1611%" height="15" fill="rgb(215,10,51)" fg:x="449489395" fg:w="1200996"/><text x="60.5548%" y="4495.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (1,200,996 samples, 0.16%)</title><rect x="60.3048%" y="4469" width="0.1611%" height="15" fill="rgb(243,178,53)" fg:x="449489395" fg:w="1200996"/><text x="60.5548%" y="4479.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (1,200,996 samples, 0.16%)</title><rect x="60.3048%" y="4453" width="0.1611%" height="15" fill="rgb(233,221,20)" fg:x="449489395" fg:w="1200996"/><text x="60.5548%" y="4463.50"></text></g><g><title>core::hash::Hasher::write_u8 (1,200,996 samples, 0.16%)</title><rect x="60.3048%" y="4437" width="0.1611%" height="15" fill="rgb(218,95,35)" fg:x="449489395" fg:w="1200996"/><text x="60.5548%" y="4447.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,200,996 samples, 0.16%)</title><rect x="60.3048%" y="4421" width="0.1611%" height="15" fill="rgb(229,13,5)" fg:x="449489395" fg:w="1200996"/><text x="60.5548%" y="4431.50"></text></g><g><title>main::benchmark::process_node_generated_incremental (3,699,199 samples, 0.50%)</title><rect x="60.1447%" y="4677" width="0.4963%" height="15" fill="rgb(252,164,30)" fg:x="448295792" fg:w="3699199"/><text x="60.3947%" y="4687.50"></text></g><g><title>main::benchmark::matches_id_id (2,505,596 samples, 0.34%)</title><rect x="60.3048%" y="4661" width="0.3362%" height="15" fill="rgb(232,68,36)" fg:x="449489395" fg:w="2505596"/><text x="60.5548%" y="4671.50"></text></g><g><title>main::benchmark::get_node_id_id (2,505,596 samples, 0.34%)</title><rect x="60.3048%" y="4645" width="0.3362%" height="15" fill="rgb(219,59,54)" fg:x="449489395" fg:w="2505596"/><text x="60.5548%" y="4655.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (2,505,596 samples, 0.34%)</title><rect x="60.3048%" y="4629" width="0.3362%" height="15" fill="rgb(250,92,33)" fg:x="449489395" fg:w="2505596"/><text x="60.5548%" y="4639.50"></text></g><g><title>main::benchmark::get_node_id_id::_{{closure}} (2,505,596 samples, 0.34%)</title><rect x="60.3048%" y="4613" width="0.3362%" height="15" fill="rgb(229,162,54)" fg:x="449489395" fg:w="2505596"/><text x="60.5548%" y="4623.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (2,505,596 samples, 0.34%)</title><rect x="60.3048%" y="4597" width="0.3362%" height="15" fill="rgb(244,114,52)" fg:x="449489395" fg:w="2505596"/><text x="60.5548%" y="4607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (2,505,596 samples, 0.34%)</title><rect x="60.3048%" y="4581" width="0.3362%" height="15" fill="rgb(212,211,43)" fg:x="449489395" fg:w="2505596"/><text x="60.5548%" y="4591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (2,505,596 samples, 0.34%)</title><rect x="60.3048%" y="4565" width="0.3362%" height="15" fill="rgb(226,147,8)" fg:x="449489395" fg:w="2505596"/><text x="60.5548%" y="4575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (1,304,600 samples, 0.18%)</title><rect x="60.4659%" y="4549" width="0.1750%" height="15" fill="rgb(226,23,13)" fg:x="450690391" fg:w="1304600"/><text x="60.7159%" y="4559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1,304,600 samples, 0.18%)</title><rect x="60.4659%" y="4533" width="0.1750%" height="15" fill="rgb(240,63,4)" fg:x="450690391" fg:w="1304600"/><text x="60.7159%" y="4543.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1,304,600 samples, 0.18%)</title><rect x="60.4659%" y="4517" width="0.1750%" height="15" fill="rgb(221,1,32)" fg:x="450690391" fg:w="1304600"/><text x="60.7159%" y="4527.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_empty (1,304,600 samples, 0.18%)</title><rect x="60.4659%" y="4501" width="0.1750%" height="15" fill="rgb(242,117,10)" fg:x="450690391" fg:w="1304600"/><text x="60.7159%" y="4511.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (1,304,600 samples, 0.18%)</title><rect x="60.4659%" y="4485" width="0.1750%" height="15" fill="rgb(249,172,44)" fg:x="450690391" fg:w="1304600"/><text x="60.7159%" y="4495.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1,304,600 samples, 0.18%)</title><rect x="60.4659%" y="4469" width="0.1750%" height="15" fill="rgb(244,46,45)" fg:x="450690391" fg:w="1304600"/><text x="60.7159%" y="4479.50"></text></g><g><title>main::benchmark::matches_class_id (1,132,229 samples, 0.15%)</title><rect x="60.6410%" y="4645" width="0.1519%" height="15" fill="rgb(206,43,17)" fg:x="451994991" fg:w="1132229"/><text x="60.8910%" y="4655.50"></text></g><g><title>main::benchmark::node_has_class_id (1,132,229 samples, 0.15%)</title><rect x="60.6410%" y="4629" width="0.1519%" height="15" fill="rgb(239,218,39)" fg:x="451994991" fg:w="1132229"/><text x="60.8910%" y="4639.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1,132,229 samples, 0.15%)</title><rect x="60.6410%" y="4613" width="0.1519%" height="15" fill="rgb(208,169,54)" fg:x="451994991" fg:w="1132229"/><text x="60.8910%" y="4623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1,132,229 samples, 0.15%)</title><rect x="60.6410%" y="4597" width="0.1519%" height="15" fill="rgb(247,25,42)" fg:x="451994991" fg:w="1132229"/><text x="60.8910%" y="4607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1,132,229 samples, 0.15%)</title><rect x="60.6410%" y="4581" width="0.1519%" height="15" fill="rgb(226,23,31)" fg:x="451994991" fg:w="1132229"/><text x="60.8910%" y="4591.50"></text></g><g><title>hashbrown::map::make_hash (1,132,229 samples, 0.15%)</title><rect x="60.6410%" y="4565" width="0.1519%" height="15" fill="rgb(247,16,28)" fg:x="451994991" fg:w="1132229"/><text x="60.8910%" y="4575.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1,132,229 samples, 0.15%)</title><rect x="60.6410%" y="4549" width="0.1519%" height="15" fill="rgb(231,147,38)" fg:x="451994991" fg:w="1132229"/><text x="60.8910%" y="4559.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1,132,229 samples, 0.15%)</title><rect x="60.6410%" y="4533" width="0.1519%" height="15" fill="rgb(253,81,48)" fg:x="451994991" fg:w="1132229"/><text x="60.8910%" y="4543.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1,132,229 samples, 0.15%)</title><rect x="60.6410%" y="4517" width="0.1519%" height="15" fill="rgb(249,222,43)" fg:x="451994991" fg:w="1132229"/><text x="60.8910%" y="4527.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1,132,229 samples, 0.15%)</title><rect x="60.6410%" y="4501" width="0.1519%" height="15" fill="rgb(221,3,27)" fg:x="451994991" fg:w="1132229"/><text x="60.8910%" y="4511.50"></text></g><g><title>main::benchmark::process_node_generated_incremental (2,367,589 samples, 0.32%)</title><rect x="60.6410%" y="4661" width="0.3176%" height="15" fill="rgb(228,180,5)" fg:x="451994991" fg:w="2367589"/><text x="60.8910%" y="4671.50"></text></g><g><title>main::benchmark::matches_tag_id (1,235,360 samples, 0.17%)</title><rect x="60.7929%" y="4645" width="0.1657%" height="15" fill="rgb(227,131,42)" fg:x="453127220" fg:w="1235360"/><text x="61.0429%" y="4655.50"></text></g><g><title>main::benchmark::get_node_tag_id (1,235,360 samples, 0.17%)</title><rect x="60.7929%" y="4629" width="0.1657%" height="15" fill="rgb(212,3,39)" fg:x="453127220" fg:w="1235360"/><text x="61.0429%" y="4639.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1,235,360 samples, 0.17%)</title><rect x="60.7929%" y="4613" width="0.1657%" height="15" fill="rgb(226,45,5)" fg:x="453127220" fg:w="1235360"/><text x="61.0429%" y="4623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1,235,360 samples, 0.17%)</title><rect x="60.7929%" y="4597" width="0.1657%" height="15" fill="rgb(215,167,45)" fg:x="453127220" fg:w="1235360"/><text x="61.0429%" y="4607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1,235,360 samples, 0.17%)</title><rect x="60.7929%" y="4581" width="0.1657%" height="15" fill="rgb(250,218,53)" fg:x="453127220" fg:w="1235360"/><text x="61.0429%" y="4591.50"></text></g><g><title>hashbrown::map::make_hash (1,235,360 samples, 0.17%)</title><rect x="60.7929%" y="4565" width="0.1657%" height="15" fill="rgb(207,140,0)" fg:x="453127220" fg:w="1235360"/><text x="61.0429%" y="4575.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1,235,360 samples, 0.17%)</title><rect x="60.7929%" y="4549" width="0.1657%" height="15" fill="rgb(238,133,51)" fg:x="453127220" fg:w="1235360"/><text x="61.0429%" y="4559.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1,235,360 samples, 0.17%)</title><rect x="60.7929%" y="4533" width="0.1657%" height="15" fill="rgb(218,203,53)" fg:x="453127220" fg:w="1235360"/><text x="61.0429%" y="4543.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1,235,360 samples, 0.17%)</title><rect x="60.7929%" y="4517" width="0.1657%" height="15" fill="rgb(226,184,25)" fg:x="453127220" fg:w="1235360"/><text x="61.0429%" y="4527.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1,235,360 samples, 0.17%)</title><rect x="60.7929%" y="4501" width="0.1657%" height="15" fill="rgb(231,121,21)" fg:x="453127220" fg:w="1235360"/><text x="61.0429%" y="4511.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1,235,360 samples, 0.17%)</title><rect x="60.7929%" y="4485" width="0.1657%" height="15" fill="rgb(251,14,34)" fg:x="453127220" fg:w="1235360"/><text x="61.0429%" y="4495.50"></text></g><g><title>css_bitvector_compiler::BitVector::is_bit_set (1,118,687 samples, 0.15%)</title><rect x="61.1218%" y="4629" width="0.1501%" height="15" fill="rgb(249,193,11)" fg:x="455579257" fg:w="1118687"/><text x="61.3718%" y="4639.50"></text></g><g><title>&lt;&amp;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (1,147,327 samples, 0.15%)</title><rect x="61.2719%" y="4597" width="0.1539%" height="15" fill="rgb(220,172,37)" fg:x="456697944" fg:w="1147327"/><text x="61.5219%" y="4607.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::iter (1,147,327 samples, 0.15%)</title><rect x="61.2719%" y="4581" width="0.1539%" height="15" fill="rgb(231,229,43)" fg:x="456697944" fg:w="1147327"/><text x="61.5219%" y="4591.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::iter (1,147,327 samples, 0.15%)</title><rect x="61.2719%" y="4565" width="0.1539%" height="15" fill="rgb(250,161,5)" fg:x="456697944" fg:w="1147327"/><text x="61.5219%" y="4575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::keys (1,147,327 samples, 0.15%)</title><rect x="61.2719%" y="4549" width="0.1539%" height="15" fill="rgb(218,225,18)" fg:x="456697944" fg:w="1147327"/><text x="61.5219%" y="4559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (1,147,327 samples, 0.15%)</title><rect x="61.2719%" y="4533" width="0.1539%" height="15" fill="rgb(245,45,42)" fg:x="456697944" fg:w="1147327"/><text x="61.5219%" y="4543.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter (1,147,327 samples, 0.15%)</title><rect x="61.2719%" y="4517" width="0.1539%" height="15" fill="rgb(211,115,1)" fg:x="456697944" fg:w="1147327"/><text x="61.5219%" y="4527.50"></text></g><g><title>hashbrown::raw::RawTableInner::iter (1,147,327 samples, 0.15%)</title><rect x="61.2719%" y="4501" width="0.1539%" height="15" fill="rgb(248,133,52)" fg:x="456697944" fg:w="1147327"/><text x="61.5219%" y="4511.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (1,147,327 samples, 0.15%)</title><rect x="61.2719%" y="4485" width="0.1539%" height="15" fill="rgb(238,100,21)" fg:x="456697944" fg:w="1147327"/><text x="61.5219%" y="4495.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_full (1,147,327 samples, 0.15%)</title><rect x="61.2719%" y="4469" width="0.1539%" height="15" fill="rgb(247,144,11)" fg:x="456697944" fg:w="1147327"/><text x="61.5219%" y="4479.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::invert (1,147,327 samples, 0.15%)</title><rect x="61.2719%" y="4453" width="0.1539%" height="15" fill="rgb(206,164,16)" fg:x="456697944" fg:w="1147327"/><text x="61.5219%" y="4463.50"></text></g><g><title>main::benchmark::matches_class_id (2,457,237 samples, 0.33%)</title><rect x="61.2719%" y="4629" width="0.3297%" height="15" fill="rgb(222,34,3)" fg:x="456697944" fg:w="2457237"/><text x="61.5219%" y="4639.50"></text></g><g><title>main::benchmark::node_has_class_id (2,457,237 samples, 0.33%)</title><rect x="61.2719%" y="4613" width="0.3297%" height="15" fill="rgb(248,82,4)" fg:x="456697944" fg:w="2457237"/><text x="61.5219%" y="4623.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1,309,910 samples, 0.18%)</title><rect x="61.4258%" y="4597" width="0.1757%" height="15" fill="rgb(228,81,46)" fg:x="457845271" fg:w="1309910"/><text x="61.6758%" y="4607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1,309,910 samples, 0.18%)</title><rect x="61.4258%" y="4581" width="0.1757%" height="15" fill="rgb(227,67,47)" fg:x="457845271" fg:w="1309910"/><text x="61.6758%" y="4591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1,309,910 samples, 0.18%)</title><rect x="61.4258%" y="4565" width="0.1757%" height="15" fill="rgb(215,93,53)" fg:x="457845271" fg:w="1309910"/><text x="61.6758%" y="4575.50"></text></g><g><title>hashbrown::map::make_hash (1,309,910 samples, 0.18%)</title><rect x="61.4258%" y="4549" width="0.1757%" height="15" fill="rgb(248,194,39)" fg:x="457845271" fg:w="1309910"/><text x="61.6758%" y="4559.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1,309,910 samples, 0.18%)</title><rect x="61.4258%" y="4533" width="0.1757%" height="15" fill="rgb(215,5,19)" fg:x="457845271" fg:w="1309910"/><text x="61.6758%" y="4543.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1,309,910 samples, 0.18%)</title><rect x="61.4258%" y="4517" width="0.1757%" height="15" fill="rgb(226,215,51)" fg:x="457845271" fg:w="1309910"/><text x="61.6758%" y="4527.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1,309,910 samples, 0.18%)</title><rect x="61.4258%" y="4501" width="0.1757%" height="15" fill="rgb(225,56,26)" fg:x="457845271" fg:w="1309910"/><text x="61.6758%" y="4511.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1,309,910 samples, 0.18%)</title><rect x="61.4258%" y="4485" width="0.1757%" height="15" fill="rgb(222,75,29)" fg:x="457845271" fg:w="1309910"/><text x="61.6758%" y="4495.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1,309,910 samples, 0.18%)</title><rect x="61.4258%" y="4469" width="0.1757%" height="15" fill="rgb(236,139,6)" fg:x="457845271" fg:w="1309910"/><text x="61.6758%" y="4479.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1,309,910 samples, 0.18%)</title><rect x="61.4258%" y="4453" width="0.1757%" height="15" fill="rgb(223,137,36)" fg:x="457845271" fg:w="1309910"/><text x="61.6758%" y="4463.50"></text></g><g><title>main::benchmark::process_node_generated_incremental (5,922,766 samples, 0.79%)</title><rect x="60.9586%" y="4645" width="0.7946%" height="15" fill="rgb(226,99,2)" fg:x="454362580" fg:w="5922766"/><text x="61.2086%" y="4655.50"></text></g><g><title>main::benchmark::matches_id_id (1,130,165 samples, 0.15%)</title><rect x="61.6016%" y="4629" width="0.1516%" height="15" fill="rgb(206,133,23)" fg:x="459155181" fg:w="1130165"/><text x="61.8516%" y="4639.50"></text></g><g><title>main::benchmark::get_node_id_id (1,130,165 samples, 0.15%)</title><rect x="61.6016%" y="4613" width="0.1516%" height="15" fill="rgb(243,173,15)" fg:x="459155181" fg:w="1130165"/><text x="61.8516%" y="4623.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (1,130,165 samples, 0.15%)</title><rect x="61.6016%" y="4597" width="0.1516%" height="15" fill="rgb(228,69,28)" fg:x="459155181" fg:w="1130165"/><text x="61.8516%" y="4607.50"></text></g><g><title>main::benchmark::get_node_id_id::_{{closure}} (1,130,165 samples, 0.15%)</title><rect x="61.6016%" y="4581" width="0.1516%" height="15" fill="rgb(212,51,22)" fg:x="459155181" fg:w="1130165"/><text x="61.8516%" y="4591.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1,130,165 samples, 0.15%)</title><rect x="61.6016%" y="4565" width="0.1516%" height="15" fill="rgb(227,113,0)" fg:x="459155181" fg:w="1130165"/><text x="61.8516%" y="4575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1,130,165 samples, 0.15%)</title><rect x="61.6016%" y="4549" width="0.1516%" height="15" fill="rgb(252,84,27)" fg:x="459155181" fg:w="1130165"/><text x="61.8516%" y="4559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1,130,165 samples, 0.15%)</title><rect x="61.6016%" y="4533" width="0.1516%" height="15" fill="rgb(223,145,39)" fg:x="459155181" fg:w="1130165"/><text x="61.8516%" y="4543.50"></text></g><g><title>hashbrown::map::make_hash (1,130,165 samples, 0.15%)</title><rect x="61.6016%" y="4517" width="0.1516%" height="15" fill="rgb(239,219,30)" fg:x="459155181" fg:w="1130165"/><text x="61.8516%" y="4527.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1,130,165 samples, 0.15%)</title><rect x="61.6016%" y="4501" width="0.1516%" height="15" fill="rgb(224,196,39)" fg:x="459155181" fg:w="1130165"/><text x="61.8516%" y="4511.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1,130,165 samples, 0.15%)</title><rect x="61.6016%" y="4485" width="0.1516%" height="15" fill="rgb(205,35,43)" fg:x="459155181" fg:w="1130165"/><text x="61.8516%" y="4495.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (1,130,165 samples, 0.15%)</title><rect x="61.6016%" y="4469" width="0.1516%" height="15" fill="rgb(228,201,21)" fg:x="459155181" fg:w="1130165"/><text x="61.8516%" y="4479.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (1,130,165 samples, 0.15%)</title><rect x="61.6016%" y="4453" width="0.1516%" height="15" fill="rgb(237,118,16)" fg:x="459155181" fg:w="1130165"/><text x="61.8516%" y="4463.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (1,130,165 samples, 0.15%)</title><rect x="61.6016%" y="4437" width="0.1516%" height="15" fill="rgb(241,17,19)" fg:x="459155181" fg:w="1130165"/><text x="61.8516%" y="4447.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (1,130,165 samples, 0.15%)</title><rect x="61.6016%" y="4421" width="0.1516%" height="15" fill="rgb(214,10,25)" fg:x="459155181" fg:w="1130165"/><text x="61.8516%" y="4431.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,130,165 samples, 0.15%)</title><rect x="61.6016%" y="4405" width="0.1516%" height="15" fill="rgb(238,37,29)" fg:x="459155181" fg:w="1130165"/><text x="61.8516%" y="4415.50"></text></g><g><title>core::hash::sip::u8to64_le (1,130,165 samples, 0.15%)</title><rect x="61.6016%" y="4389" width="0.1516%" height="15" fill="rgb(253,83,25)" fg:x="459155181" fg:w="1130165"/><text x="61.8516%" y="4399.50"></text></g><g><title>css_bitvector_compiler::HtmlNode::needs_any_recomputation (440,156 samples, 0.06%)</title><rect x="61.7532%" y="4629" width="0.0591%" height="15" fill="rgb(234,192,12)" fg:x="460285346" fg:w="440156"/><text x="62.0032%" y="4639.50"></text></g><g><title>css_bitvector_compiler::HtmlNode::has_relevant_parent_state_changed (440,156 samples, 0.06%)</title><rect x="61.7532%" y="4613" width="0.0591%" height="15" fill="rgb(241,216,45)" fg:x="460285346" fg:w="440156"/><text x="62.0032%" y="4623.50"></text></g><g><title>css_bitvector_compiler::BitVector::is_bit_set (2,439,980 samples, 0.33%)</title><rect x="61.8123%" y="4613" width="0.3274%" height="15" fill="rgb(242,22,33)" fg:x="460725502" fg:w="2439980"/><text x="62.0623%" y="4623.50"></text></g><g><title>css_bitvector_compiler::BitVector::with_capacity (2,342,658 samples, 0.31%)</title><rect x="62.1396%" y="4613" width="0.3143%" height="15" fill="rgb(231,105,49)" fg:x="463165482" fg:w="2342658"/><text x="62.3896%" y="4623.50"></text></g><g><title>alloc::vec::from_elem (2,342,658 samples, 0.31%)</title><rect x="62.1396%" y="4597" width="0.3143%" height="15" fill="rgb(218,204,15)" fg:x="463165482" fg:w="2342658"/><text x="62.3896%" y="4607.50"></text></g><g><title>&lt;u8 as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (2,342,658 samples, 0.31%)</title><rect x="62.1396%" y="4581" width="0.3143%" height="15" fill="rgb(235,138,41)" fg:x="463165482" fg:w="2342658"/><text x="62.3896%" y="4591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (2,342,658 samples, 0.31%)</title><rect x="62.1396%" y="4565" width="0.3143%" height="15" fill="rgb(246,0,9)" fg:x="463165482" fg:w="2342658"/><text x="62.3896%" y="4575.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_zeroed_in (2,342,658 samples, 0.31%)</title><rect x="62.1396%" y="4549" width="0.3143%" height="15" fill="rgb(210,74,4)" fg:x="463165482" fg:w="2342658"/><text x="62.3896%" y="4559.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (2,342,658 samples, 0.31%)</title><rect x="62.1396%" y="4533" width="0.3143%" height="15" fill="rgb(250,60,41)" fg:x="463165482" fg:w="2342658"/><text x="62.3896%" y="4543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (2,342,658 samples, 0.31%)</title><rect x="62.1396%" y="4517" width="0.3143%" height="15" fill="rgb(220,115,12)" fg:x="463165482" fg:w="2342658"/><text x="62.3896%" y="4527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2,342,658 samples, 0.31%)</title><rect x="62.1396%" y="4501" width="0.3143%" height="15" fill="rgb(237,100,13)" fg:x="463165482" fg:w="2342658"/><text x="62.3896%" y="4511.50"></text></g><g><title>alloc::alloc::alloc_zeroed (2,342,658 samples, 0.31%)</title><rect x="62.1396%" y="4485" width="0.3143%" height="15" fill="rgb(213,55,26)" fg:x="463165482" fg:w="2342658"/><text x="62.3896%" y="4495.50"></text></g><g><title>__libc_calloc (2,342,658 samples, 0.31%)</title><rect x="62.1396%" y="4469" width="0.3143%" height="15" fill="rgb(216,17,4)" fg:x="463165482" fg:w="2342658"/><text x="62.3896%" y="4479.50"></text></g><g><title>[libc.so.6] (1,251,743 samples, 0.17%)</title><rect x="62.2860%" y="4453" width="0.1679%" height="15" fill="rgb(220,153,47)" fg:x="464256397" fg:w="1251743"/><text x="62.5360%" y="4463.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::invert (1,163,193 samples, 0.16%)</title><rect x="62.4539%" y="4437" width="0.1561%" height="15" fill="rgb(215,131,9)" fg:x="465508140" fg:w="1163193"/><text x="62.7039%" y="4447.50"></text></g><g><title>&lt;&amp;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (1,823,087 samples, 0.24%)</title><rect x="62.4539%" y="4581" width="0.2446%" height="15" fill="rgb(233,46,42)" fg:x="465508140" fg:w="1823087"/><text x="62.7039%" y="4591.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::iter (1,823,087 samples, 0.24%)</title><rect x="62.4539%" y="4565" width="0.2446%" height="15" fill="rgb(226,86,7)" fg:x="465508140" fg:w="1823087"/><text x="62.7039%" y="4575.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::iter (1,823,087 samples, 0.24%)</title><rect x="62.4539%" y="4549" width="0.2446%" height="15" fill="rgb(239,226,21)" fg:x="465508140" fg:w="1823087"/><text x="62.7039%" y="4559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::keys (1,823,087 samples, 0.24%)</title><rect x="62.4539%" y="4533" width="0.2446%" height="15" fill="rgb(244,137,22)" fg:x="465508140" fg:w="1823087"/><text x="62.7039%" y="4543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (1,823,087 samples, 0.24%)</title><rect x="62.4539%" y="4517" width="0.2446%" height="15" fill="rgb(211,139,35)" fg:x="465508140" fg:w="1823087"/><text x="62.7039%" y="4527.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter (1,823,087 samples, 0.24%)</title><rect x="62.4539%" y="4501" width="0.2446%" height="15" fill="rgb(214,62,50)" fg:x="465508140" fg:w="1823087"/><text x="62.7039%" y="4511.50"></text></g><g><title>hashbrown::raw::RawTableInner::iter (1,823,087 samples, 0.24%)</title><rect x="62.4539%" y="4485" width="0.2446%" height="15" fill="rgb(212,113,44)" fg:x="465508140" fg:w="1823087"/><text x="62.7039%" y="4495.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (1,823,087 samples, 0.24%)</title><rect x="62.4539%" y="4469" width="0.2446%" height="15" fill="rgb(226,150,43)" fg:x="465508140" fg:w="1823087"/><text x="62.7039%" y="4479.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_full (1,823,087 samples, 0.24%)</title><rect x="62.4539%" y="4453" width="0.2446%" height="15" fill="rgb(250,71,37)" fg:x="465508140" fg:w="1823087"/><text x="62.7039%" y="4463.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_empty_or_deleted (659,894 samples, 0.09%)</title><rect x="62.6100%" y="4437" width="0.0885%" height="15" fill="rgb(219,76,19)" fg:x="466671333" fg:w="659894"/><text x="62.8600%" y="4447.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (659,894 samples, 0.09%)</title><rect x="62.6100%" y="4421" width="0.0885%" height="15" fill="rgb(250,39,11)" fg:x="466671333" fg:w="659894"/><text x="62.8600%" y="4431.50"></text></g><g><title>main::benchmark::matches_class_id (3,066,280 samples, 0.41%)</title><rect x="62.4539%" y="4613" width="0.4114%" height="15" fill="rgb(230,64,31)" fg:x="465508140" fg:w="3066280"/><text x="62.7039%" y="4623.50"></text></g><g><title>main::benchmark::node_has_class_id (3,066,280 samples, 0.41%)</title><rect x="62.4539%" y="4597" width="0.4114%" height="15" fill="rgb(208,222,23)" fg:x="465508140" fg:w="3066280"/><text x="62.7039%" y="4607.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1,243,193 samples, 0.17%)</title><rect x="62.6985%" y="4581" width="0.1668%" height="15" fill="rgb(227,125,18)" fg:x="467331227" fg:w="1243193"/><text x="62.9485%" y="4591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1,243,193 samples, 0.17%)</title><rect x="62.6985%" y="4565" width="0.1668%" height="15" fill="rgb(234,210,9)" fg:x="467331227" fg:w="1243193"/><text x="62.9485%" y="4575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1,243,193 samples, 0.17%)</title><rect x="62.6985%" y="4549" width="0.1668%" height="15" fill="rgb(217,127,24)" fg:x="467331227" fg:w="1243193"/><text x="62.9485%" y="4559.50"></text></g><g><title>hashbrown::map::make_hash (1,243,193 samples, 0.17%)</title><rect x="62.6985%" y="4533" width="0.1668%" height="15" fill="rgb(239,141,48)" fg:x="467331227" fg:w="1243193"/><text x="62.9485%" y="4543.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1,243,193 samples, 0.17%)</title><rect x="62.6985%" y="4517" width="0.1668%" height="15" fill="rgb(227,109,8)" fg:x="467331227" fg:w="1243193"/><text x="62.9485%" y="4527.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1,243,193 samples, 0.17%)</title><rect x="62.6985%" y="4501" width="0.1668%" height="15" fill="rgb(235,184,23)" fg:x="467331227" fg:w="1243193"/><text x="62.9485%" y="4511.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1,243,193 samples, 0.17%)</title><rect x="62.6985%" y="4485" width="0.1668%" height="15" fill="rgb(227,226,48)" fg:x="467331227" fg:w="1243193"/><text x="62.9485%" y="4495.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1,243,193 samples, 0.17%)</title><rect x="62.6985%" y="4469" width="0.1668%" height="15" fill="rgb(206,150,11)" fg:x="467331227" fg:w="1243193"/><text x="62.9485%" y="4479.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1,243,193 samples, 0.17%)</title><rect x="62.6985%" y="4453" width="0.1668%" height="15" fill="rgb(254,2,33)" fg:x="467331227" fg:w="1243193"/><text x="62.9485%" y="4463.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1,019,383 samples, 0.14%)</title><rect x="62.8653%" y="4469" width="0.1368%" height="15" fill="rgb(243,160,20)" fg:x="468574420" fg:w="1019383"/><text x="63.1153%" y="4479.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1,019,383 samples, 0.14%)</title><rect x="62.8653%" y="4453" width="0.1368%" height="15" fill="rgb(218,208,30)" fg:x="468574420" fg:w="1019383"/><text x="63.1153%" y="4463.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1,019,383 samples, 0.14%)</title><rect x="62.8653%" y="4437" width="0.1368%" height="15" fill="rgb(224,120,49)" fg:x="468574420" fg:w="1019383"/><text x="63.1153%" y="4447.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1,019,383 samples, 0.14%)</title><rect x="62.8653%" y="4421" width="0.1368%" height="15" fill="rgb(246,12,2)" fg:x="468574420" fg:w="1019383"/><text x="63.1153%" y="4431.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1,019,383 samples, 0.14%)</title><rect x="62.8653%" y="4405" width="0.1368%" height="15" fill="rgb(236,117,3)" fg:x="468574420" fg:w="1019383"/><text x="63.1153%" y="4415.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1,357,217 samples, 0.18%)</title><rect x="63.0021%" y="4469" width="0.1821%" height="15" fill="rgb(216,128,52)" fg:x="469593803" fg:w="1357217"/><text x="63.2521%" y="4479.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (1,357,217 samples, 0.18%)</title><rect x="63.0021%" y="4453" width="0.1821%" height="15" fill="rgb(246,145,19)" fg:x="469593803" fg:w="1357217"/><text x="63.2521%" y="4463.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (1,357,217 samples, 0.18%)</title><rect x="63.0021%" y="4437" width="0.1821%" height="15" fill="rgb(222,11,46)" fg:x="469593803" fg:w="1357217"/><text x="63.2521%" y="4447.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (1,357,217 samples, 0.18%)</title><rect x="63.0021%" y="4421" width="0.1821%" height="15" fill="rgb(245,82,36)" fg:x="469593803" fg:w="1357217"/><text x="63.2521%" y="4431.50"></text></g><g><title>hashbrown::map::make_hash (4,985,452 samples, 0.67%)</title><rect x="62.8653%" y="4501" width="0.6689%" height="15" fill="rgb(250,73,51)" fg:x="468574420" fg:w="4985452"/><text x="63.1153%" y="4511.50"></text></g><g><title>core::hash::BuildHasher::hash_one (4,985,452 samples, 0.67%)</title><rect x="62.8653%" y="4485" width="0.6689%" height="15" fill="rgb(221,189,23)" fg:x="468574420" fg:w="4985452"/><text x="63.1153%" y="4495.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2,608,852 samples, 0.35%)</title><rect x="63.1841%" y="4469" width="0.3500%" height="15" fill="rgb(210,33,7)" fg:x="470951020" fg:w="2608852"/><text x="63.4341%" y="4479.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (2,608,852 samples, 0.35%)</title><rect x="63.1841%" y="4453" width="0.3500%" height="15" fill="rgb(210,107,22)" fg:x="470951020" fg:w="2608852"/><text x="63.4341%" y="4463.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (2,608,852 samples, 0.35%)</title><rect x="63.1841%" y="4437" width="0.3500%" height="15" fill="rgb(222,116,37)" fg:x="470951020" fg:w="2608852"/><text x="63.4341%" y="4447.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (2,608,852 samples, 0.35%)</title><rect x="63.1841%" y="4421" width="0.3500%" height="15" fill="rgb(254,17,48)" fg:x="470951020" fg:w="2608852"/><text x="63.4341%" y="4431.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (2,608,852 samples, 0.35%)</title><rect x="63.1841%" y="4405" width="0.3500%" height="15" fill="rgb(224,36,32)" fg:x="470951020" fg:w="2608852"/><text x="63.4341%" y="4415.50"></text></g><g><title>core::hash::Hasher::write_u8 (2,608,852 samples, 0.35%)</title><rect x="63.1841%" y="4389" width="0.3500%" height="15" fill="rgb(232,90,46)" fg:x="470951020" fg:w="2608852"/><text x="63.4341%" y="4399.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2,608,852 samples, 0.35%)</title><rect x="63.1841%" y="4373" width="0.3500%" height="15" fill="rgb(241,66,40)" fg:x="470951020" fg:w="2608852"/><text x="63.4341%" y="4383.50"></text></g><g><title>main::benchmark::process_node_generated_incremental (14,142,204 samples, 1.90%)</title><rect x="61.8123%" y="4629" width="1.8974%" height="15" fill="rgb(249,184,29)" fg:x="460725502" fg:w="14142204"/><text x="62.0623%" y="4639.50">m..</text></g><g><title>main::benchmark::matches_id_id (6,293,286 samples, 0.84%)</title><rect x="62.8653%" y="4613" width="0.8443%" height="15" fill="rgb(231,181,1)" fg:x="468574420" fg:w="6293286"/><text x="63.1153%" y="4623.50"></text></g><g><title>main::benchmark::get_node_id_id (6,293,286 samples, 0.84%)</title><rect x="62.8653%" y="4597" width="0.8443%" height="15" fill="rgb(224,94,2)" fg:x="468574420" fg:w="6293286"/><text x="63.1153%" y="4607.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (6,293,286 samples, 0.84%)</title><rect x="62.8653%" y="4581" width="0.8443%" height="15" fill="rgb(229,170,15)" fg:x="468574420" fg:w="6293286"/><text x="63.1153%" y="4591.50"></text></g><g><title>main::benchmark::get_node_id_id::_{{closure}} (6,293,286 samples, 0.84%)</title><rect x="62.8653%" y="4565" width="0.8443%" height="15" fill="rgb(240,127,35)" fg:x="468574420" fg:w="6293286"/><text x="63.1153%" y="4575.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (6,293,286 samples, 0.84%)</title><rect x="62.8653%" y="4549" width="0.8443%" height="15" fill="rgb(248,196,34)" fg:x="468574420" fg:w="6293286"/><text x="63.1153%" y="4559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (6,293,286 samples, 0.84%)</title><rect x="62.8653%" y="4533" width="0.8443%" height="15" fill="rgb(236,137,7)" fg:x="468574420" fg:w="6293286"/><text x="63.1153%" y="4543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (6,293,286 samples, 0.84%)</title><rect x="62.8653%" y="4517" width="0.8443%" height="15" fill="rgb(235,127,16)" fg:x="468574420" fg:w="6293286"/><text x="63.1153%" y="4527.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (1,307,834 samples, 0.18%)</title><rect x="63.5342%" y="4501" width="0.1755%" height="15" fill="rgb(250,192,54)" fg:x="473559872" fg:w="1307834"/><text x="63.7842%" y="4511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1,307,834 samples, 0.18%)</title><rect x="63.5342%" y="4485" width="0.1755%" height="15" fill="rgb(218,98,20)" fg:x="473559872" fg:w="1307834"/><text x="63.7842%" y="4495.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1,307,834 samples, 0.18%)</title><rect x="63.5342%" y="4469" width="0.1755%" height="15" fill="rgb(230,176,47)" fg:x="473559872" fg:w="1307834"/><text x="63.7842%" y="4479.50"></text></g><g><title>hashbrown::control::group::sse2::Group::load (1,307,834 samples, 0.18%)</title><rect x="63.5342%" y="4453" width="0.1755%" height="15" fill="rgb(244,2,33)" fg:x="473559872" fg:w="1307834"/><text x="63.7842%" y="4463.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1,307,834 samples, 0.18%)</title><rect x="63.5342%" y="4437" width="0.1755%" height="15" fill="rgb(231,100,17)" fg:x="473559872" fg:w="1307834"/><text x="63.7842%" y="4447.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,307,834 samples, 0.18%)</title><rect x="63.5342%" y="4421" width="0.1755%" height="15" fill="rgb(245,23,12)" fg:x="473559872" fg:w="1307834"/><text x="63.7842%" y="4431.50"></text></g><g><title>&lt;css_bitvector_compiler::BitVector as core::clone::Clone&gt;::clone (1,364,585 samples, 0.18%)</title><rect x="63.8786%" y="4597" width="0.1831%" height="15" fill="rgb(249,55,22)" fg:x="476127174" fg:w="1364585"/><text x="64.1286%" y="4607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,364,585 samples, 0.18%)</title><rect x="63.8786%" y="4581" width="0.1831%" height="15" fill="rgb(207,134,9)" fg:x="476127174" fg:w="1364585"/><text x="64.1286%" y="4591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,364,585 samples, 0.18%)</title><rect x="63.8786%" y="4565" width="0.1831%" height="15" fill="rgb(218,134,0)" fg:x="476127174" fg:w="1364585"/><text x="64.1286%" y="4575.50"></text></g><g><title>alloc::slice::hack::to_vec (1,364,585 samples, 0.18%)</title><rect x="63.8786%" y="4549" width="0.1831%" height="15" fill="rgb(213,212,33)" fg:x="476127174" fg:w="1364585"/><text x="64.1286%" y="4559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1,364,585 samples, 0.18%)</title><rect x="63.8786%" y="4533" width="0.1831%" height="15" fill="rgb(252,106,18)" fg:x="476127174" fg:w="1364585"/><text x="64.1286%" y="4543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,364,585 samples, 0.18%)</title><rect x="63.8786%" y="4517" width="0.1831%" height="15" fill="rgb(208,126,42)" fg:x="476127174" fg:w="1364585"/><text x="64.1286%" y="4527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,364,585 samples, 0.18%)</title><rect x="63.8786%" y="4501" width="0.1831%" height="15" fill="rgb(246,175,29)" fg:x="476127174" fg:w="1364585"/><text x="64.1286%" y="4511.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (1,364,585 samples, 0.18%)</title><rect x="63.8786%" y="4485" width="0.1831%" height="15" fill="rgb(215,13,50)" fg:x="476127174" fg:w="1364585"/><text x="64.1286%" y="4495.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1,364,585 samples, 0.18%)</title><rect x="63.8786%" y="4469" width="0.1831%" height="15" fill="rgb(216,172,15)" fg:x="476127174" fg:w="1364585"/><text x="64.1286%" y="4479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,364,585 samples, 0.18%)</title><rect x="63.8786%" y="4453" width="0.1831%" height="15" fill="rgb(212,103,13)" fg:x="476127174" fg:w="1364585"/><text x="64.1286%" y="4463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,364,585 samples, 0.18%)</title><rect x="63.8786%" y="4437" width="0.1831%" height="15" fill="rgb(231,171,36)" fg:x="476127174" fg:w="1364585"/><text x="64.1286%" y="4447.50"></text></g><g><title>alloc::alloc::alloc (1,364,585 samples, 0.18%)</title><rect x="63.8786%" y="4421" width="0.1831%" height="15" fill="rgb(250,123,20)" fg:x="476127174" fg:w="1364585"/><text x="64.1286%" y="4431.50"></text></g><g><title>malloc (1,364,585 samples, 0.18%)</title><rect x="63.8786%" y="4405" width="0.1831%" height="15" fill="rgb(212,53,50)" fg:x="476127174" fg:w="1364585"/><text x="64.1286%" y="4415.50"></text></g><g><title>css_bitvector_compiler::BitVector::is_bit_set (3,797,382 samples, 0.51%)</title><rect x="64.0617%" y="4597" width="0.5095%" height="15" fill="rgb(243,54,12)" fg:x="477491759" fg:w="3797382"/><text x="64.3117%" y="4607.50"></text></g><g><title>alloc::string::String::as_str (1,307,534 samples, 0.18%)</title><rect x="64.5711%" y="4565" width="0.1754%" height="15" fill="rgb(234,101,34)" fg:x="481289141" fg:w="1307534"/><text x="64.8211%" y="4575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (1,307,534 samples, 0.18%)</title><rect x="64.5711%" y="4549" width="0.1754%" height="15" fill="rgb(254,67,22)" fg:x="481289141" fg:w="1307534"/><text x="64.8211%" y="4559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (1,307,534 samples, 0.18%)</title><rect x="64.5711%" y="4533" width="0.1754%" height="15" fill="rgb(250,35,47)" fg:x="481289141" fg:w="1307534"/><text x="64.8211%" y="4543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1,307,534 samples, 0.18%)</title><rect x="64.5711%" y="4517" width="0.1754%" height="15" fill="rgb(226,126,38)" fg:x="481289141" fg:w="1307534"/><text x="64.8211%" y="4527.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (1,307,534 samples, 0.18%)</title><rect x="64.5711%" y="4501" width="0.1754%" height="15" fill="rgb(216,138,53)" fg:x="481289141" fg:w="1307534"/><text x="64.8211%" y="4511.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (1,307,534 samples, 0.18%)</title><rect x="64.5711%" y="4485" width="0.1754%" height="15" fill="rgb(246,199,43)" fg:x="481289141" fg:w="1307534"/><text x="64.8211%" y="4495.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1,338,408 samples, 0.18%)</title><rect x="65.7427%" y="4421" width="0.1796%" height="15" fill="rgb(232,125,11)" fg:x="490021438" fg:w="1338408"/><text x="65.9927%" y="4431.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (10,130,590 samples, 1.36%)</title><rect x="64.9075%" y="4485" width="1.3591%" height="15" fill="rgb(218,219,45)" fg:x="483796211" fg:w="10130590"/><text x="65.1575%" y="4495.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (10,130,590 samples, 1.36%)</title><rect x="64.9075%" y="4469" width="1.3591%" height="15" fill="rgb(216,102,54)" fg:x="483796211" fg:w="10130590"/><text x="65.1575%" y="4479.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (10,130,590 samples, 1.36%)</title><rect x="64.9075%" y="4453" width="1.3591%" height="15" fill="rgb(250,228,7)" fg:x="483796211" fg:w="10130590"/><text x="65.1575%" y="4463.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (6,366,029 samples, 0.85%)</title><rect x="65.4126%" y="4437" width="0.8541%" height="15" fill="rgb(226,125,25)" fg:x="487560772" fg:w="6366029"/><text x="65.6626%" y="4447.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2,566,955 samples, 0.34%)</title><rect x="65.9223%" y="4421" width="0.3444%" height="15" fill="rgb(224,165,27)" fg:x="491359846" fg:w="2566955"/><text x="66.1723%" y="4431.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (5,005,158 samples, 0.67%)</title><rect x="66.3882%" y="4405" width="0.6715%" height="15" fill="rgb(233,86,3)" fg:x="494833201" fg:w="5005158"/><text x="66.6382%" y="4415.50"></text></g><g><title>core::hash::sip::u8to64_le (2,487,768 samples, 0.33%)</title><rect x="66.7260%" y="4389" width="0.3338%" height="15" fill="rgb(228,116,20)" fg:x="497350591" fg:w="2487768"/><text x="66.9760%" y="4399.50"></text></g><g><title>hashbrown::map::make_hash (22,409,692 samples, 3.01%)</title><rect x="64.7466%" y="4517" width="3.0065%" height="15" fill="rgb(209,192,17)" fg:x="482596675" fg:w="22409692"/><text x="64.9966%" y="4527.50">has..</text></g><g><title>core::hash::BuildHasher::hash_one (22,409,692 samples, 3.01%)</title><rect x="64.7466%" y="4501" width="3.0065%" height="15" fill="rgb(224,88,34)" fg:x="482596675" fg:w="22409692"/><text x="64.9966%" y="4511.50">cor..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (11,079,566 samples, 1.49%)</title><rect x="66.2666%" y="4485" width="1.4865%" height="15" fill="rgb(233,38,6)" fg:x="493926801" fg:w="11079566"/><text x="66.5166%" y="4495.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (11,079,566 samples, 1.49%)</title><rect x="66.2666%" y="4469" width="1.4865%" height="15" fill="rgb(212,59,30)" fg:x="493926801" fg:w="11079566"/><text x="66.5166%" y="4479.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (11,079,566 samples, 1.49%)</title><rect x="66.2666%" y="4453" width="1.4865%" height="15" fill="rgb(213,80,3)" fg:x="493926801" fg:w="11079566"/><text x="66.5166%" y="4463.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (11,079,566 samples, 1.49%)</title><rect x="66.2666%" y="4437" width="1.4865%" height="15" fill="rgb(251,178,7)" fg:x="493926801" fg:w="11079566"/><text x="66.5166%" y="4447.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (11,079,566 samples, 1.49%)</title><rect x="66.2666%" y="4421" width="1.4865%" height="15" fill="rgb(213,154,26)" fg:x="493926801" fg:w="11079566"/><text x="66.5166%" y="4431.50"></text></g><g><title>core::hash::Hasher::write_u8 (5,168,008 samples, 0.69%)</title><rect x="67.0598%" y="4405" width="0.6934%" height="15" fill="rgb(238,165,49)" fg:x="499838359" fg:w="5168008"/><text x="67.3098%" y="4415.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (5,168,008 samples, 0.69%)</title><rect x="67.0598%" y="4389" width="0.6934%" height="15" fill="rgb(248,91,46)" fg:x="499838359" fg:w="5168008"/><text x="67.3098%" y="4399.50"></text></g><g><title>core::hash::sip::u8to64_le (2,587,788 samples, 0.35%)</title><rect x="67.4059%" y="4373" width="0.3472%" height="15" fill="rgb(244,21,52)" fg:x="502418579" fg:w="2587788"/><text x="67.6559%" y="4383.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (1,070,897 samples, 0.14%)</title><rect x="67.7531%" y="4469" width="0.1437%" height="15" fill="rgb(247,122,20)" fg:x="505006367" fg:w="1070897"/><text x="68.0031%" y="4479.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1,070,897 samples, 0.14%)</title><rect x="67.7531%" y="4453" width="0.1437%" height="15" fill="rgb(218,27,9)" fg:x="505006367" fg:w="1070897"/><text x="68.0031%" y="4463.50"></text></g><g><title>hashbrown::control::tag::Tag::full (2,523,742 samples, 0.34%)</title><rect x="67.8968%" y="4469" width="0.3386%" height="15" fill="rgb(246,7,6)" fg:x="506077264" fg:w="2523742"/><text x="68.1468%" y="4479.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (3,010,858 samples, 0.40%)</title><rect x="68.2354%" y="4453" width="0.4039%" height="15" fill="rgb(227,135,54)" fg:x="508601006" fg:w="3010858"/><text x="68.4854%" y="4463.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (3,010,858 samples, 0.40%)</title><rect x="68.2354%" y="4437" width="0.4039%" height="15" fill="rgb(247,14,11)" fg:x="508601006" fg:w="3010858"/><text x="68.4854%" y="4447.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (3,010,858 samples, 0.40%)</title><rect x="68.2354%" y="4421" width="0.4039%" height="15" fill="rgb(206,149,34)" fg:x="508601006" fg:w="3010858"/><text x="68.4854%" y="4431.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (3,010,858 samples, 0.40%)</title><rect x="68.2354%" y="4405" width="0.4039%" height="15" fill="rgb(227,228,4)" fg:x="508601006" fg:w="3010858"/><text x="68.4854%" y="4415.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (3,010,858 samples, 0.40%)</title><rect x="68.2354%" y="4389" width="0.4039%" height="15" fill="rgb(238,218,28)" fg:x="508601006" fg:w="3010858"/><text x="68.4854%" y="4399.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (3,010,858 samples, 0.40%)</title><rect x="68.2354%" y="4373" width="0.4039%" height="15" fill="rgb(252,86,40)" fg:x="508601006" fg:w="3010858"/><text x="68.4854%" y="4383.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (3,010,858 samples, 0.40%)</title><rect x="68.2354%" y="4357" width="0.4039%" height="15" fill="rgb(251,225,11)" fg:x="508601006" fg:w="3010858"/><text x="68.4854%" y="4367.50"></text></g><g><title>[libc.so.6] (1,763,695 samples, 0.24%)</title><rect x="68.4027%" y="4341" width="0.2366%" height="15" fill="rgb(206,46,49)" fg:x="509848169" fg:w="1763695"/><text x="68.6527%" y="4351.50"></text></g><g><title>main::benchmark::matches_class_id (32,880,080 samples, 4.41%)</title><rect x="64.5711%" y="4597" width="4.4113%" height="15" fill="rgb(245,128,24)" fg:x="481289141" fg:w="32880080"/><text x="64.8211%" y="4607.50">main:..</text></g><g><title>main::benchmark::node_has_class_id (32,880,080 samples, 4.41%)</title><rect x="64.5711%" y="4581" width="4.4113%" height="15" fill="rgb(219,177,34)" fg:x="481289141" fg:w="32880080"/><text x="64.8211%" y="4591.50">main:..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (31,572,546 samples, 4.24%)</title><rect x="64.7466%" y="4565" width="4.2359%" height="15" fill="rgb(218,60,48)" fg:x="482596675" fg:w="31572546"/><text x="64.9966%" y="4575.50">std::..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (31,572,546 samples, 4.24%)</title><rect x="64.7466%" y="4549" width="4.2359%" height="15" fill="rgb(221,11,5)" fg:x="482596675" fg:w="31572546"/><text x="64.9966%" y="4559.50">hashb..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (31,572,546 samples, 4.24%)</title><rect x="64.7466%" y="4533" width="4.2359%" height="15" fill="rgb(220,148,13)" fg:x="482596675" fg:w="31572546"/><text x="64.9966%" y="4543.50">hashb..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (9,162,854 samples, 1.23%)</title><rect x="67.7531%" y="4517" width="1.2293%" height="15" fill="rgb(210,16,3)" fg:x="505006367" fg:w="9162854"/><text x="68.0031%" y="4527.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (9,162,854 samples, 1.23%)</title><rect x="67.7531%" y="4501" width="1.2293%" height="15" fill="rgb(236,80,2)" fg:x="505006367" fg:w="9162854"/><text x="68.0031%" y="4511.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (9,162,854 samples, 1.23%)</title><rect x="67.7531%" y="4485" width="1.2293%" height="15" fill="rgb(239,129,19)" fg:x="505006367" fg:w="9162854"/><text x="68.0031%" y="4495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (5,568,215 samples, 0.75%)</title><rect x="68.2354%" y="4469" width="0.7470%" height="15" fill="rgb(220,106,35)" fg:x="508601006" fg:w="5568215"/><text x="68.4854%" y="4479.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (2,557,357 samples, 0.34%)</title><rect x="68.6393%" y="4453" width="0.3431%" height="15" fill="rgb(252,139,45)" fg:x="511611864" fg:w="2557357"/><text x="68.8893%" y="4463.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (2,557,357 samples, 0.34%)</title><rect x="68.6393%" y="4437" width="0.3431%" height="15" fill="rgb(229,8,36)" fg:x="511611864" fg:w="2557357"/><text x="68.8893%" y="4447.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (2,557,357 samples, 0.34%)</title><rect x="68.6393%" y="4421" width="0.3431%" height="15" fill="rgb(230,126,33)" fg:x="511611864" fg:w="2557357"/><text x="68.8893%" y="4431.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1,246,399 samples, 0.17%)</title><rect x="68.9824%" y="4453" width="0.1672%" height="15" fill="rgb(239,140,21)" fg:x="514169221" fg:w="1246399"/><text x="69.2324%" y="4463.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1,246,399 samples, 0.17%)</title><rect x="68.9824%" y="4437" width="0.1672%" height="15" fill="rgb(254,104,9)" fg:x="514169221" fg:w="1246399"/><text x="69.2324%" y="4447.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1,246,399 samples, 0.17%)</title><rect x="68.9824%" y="4421" width="0.1672%" height="15" fill="rgb(239,52,14)" fg:x="514169221" fg:w="1246399"/><text x="69.2324%" y="4431.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1,246,399 samples, 0.17%)</title><rect x="68.9824%" y="4405" width="0.1672%" height="15" fill="rgb(208,227,44)" fg:x="514169221" fg:w="1246399"/><text x="69.2324%" y="4415.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1,246,399 samples, 0.17%)</title><rect x="68.9824%" y="4389" width="0.1672%" height="15" fill="rgb(246,18,19)" fg:x="514169221" fg:w="1246399"/><text x="69.2324%" y="4399.50"></text></g><g><title>hashbrown::map::make_hash (4,768,836 samples, 0.64%)</title><rect x="68.9824%" y="4485" width="0.6398%" height="15" fill="rgb(235,228,25)" fg:x="514169221" fg:w="4768836"/><text x="69.2324%" y="4495.50"></text></g><g><title>core::hash::BuildHasher::hash_one (4,768,836 samples, 0.64%)</title><rect x="68.9824%" y="4469" width="0.6398%" height="15" fill="rgb(240,156,20)" fg:x="514169221" fg:w="4768836"/><text x="69.2324%" y="4479.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3,522,437 samples, 0.47%)</title><rect x="69.1496%" y="4453" width="0.4726%" height="15" fill="rgb(224,8,20)" fg:x="515415620" fg:w="3522437"/><text x="69.3996%" y="4463.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (3,522,437 samples, 0.47%)</title><rect x="69.1496%" y="4437" width="0.4726%" height="15" fill="rgb(214,12,52)" fg:x="515415620" fg:w="3522437"/><text x="69.3996%" y="4447.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (3,522,437 samples, 0.47%)</title><rect x="69.1496%" y="4421" width="0.4726%" height="15" fill="rgb(211,220,47)" fg:x="515415620" fg:w="3522437"/><text x="69.3996%" y="4431.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (3,522,437 samples, 0.47%)</title><rect x="69.1496%" y="4405" width="0.4726%" height="15" fill="rgb(250,173,5)" fg:x="515415620" fg:w="3522437"/><text x="69.3996%" y="4415.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (3,522,437 samples, 0.47%)</title><rect x="69.1496%" y="4389" width="0.4726%" height="15" fill="rgb(250,125,52)" fg:x="515415620" fg:w="3522437"/><text x="69.3996%" y="4399.50"></text></g><g><title>core::hash::Hasher::write_u8 (3,522,437 samples, 0.47%)</title><rect x="69.1496%" y="4373" width="0.4726%" height="15" fill="rgb(209,133,18)" fg:x="515415620" fg:w="3522437"/><text x="69.3996%" y="4383.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3,522,437 samples, 0.47%)</title><rect x="69.1496%" y="4357" width="0.4726%" height="15" fill="rgb(216,173,22)" fg:x="515415620" fg:w="3522437"/><text x="69.3996%" y="4367.50"></text></g><g><title>core::hash::sip::u8to64_le (3,522,437 samples, 0.47%)</title><rect x="69.1496%" y="4341" width="0.4726%" height="15" fill="rgb(205,3,22)" fg:x="515415620" fg:w="3522437"/><text x="69.3996%" y="4351.50"></text></g><g><title>&lt;hashbrown::control::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (476,443 samples, 0.06%)</title><rect x="69.6222%" y="4437" width="0.0639%" height="15" fill="rgb(248,22,20)" fg:x="518938057" fg:w="476443"/><text x="69.8722%" y="4447.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::lowest_set_bit (476,443 samples, 0.06%)</title><rect x="69.6222%" y="4421" width="0.0639%" height="15" fill="rgb(233,6,29)" fg:x="518938057" fg:w="476443"/><text x="69.8722%" y="4431.50"></text></g><g><title>main::benchmark::matches_id_id (7,506,259 samples, 1.01%)</title><rect x="68.9824%" y="4597" width="1.0071%" height="15" fill="rgb(240,22,54)" fg:x="514169221" fg:w="7506259"/><text x="69.2324%" y="4607.50"></text></g><g><title>main::benchmark::get_node_id_id (7,506,259 samples, 1.01%)</title><rect x="68.9824%" y="4581" width="1.0071%" height="15" fill="rgb(231,133,32)" fg:x="514169221" fg:w="7506259"/><text x="69.2324%" y="4591.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (7,506,259 samples, 1.01%)</title><rect x="68.9824%" y="4565" width="1.0071%" height="15" fill="rgb(248,193,4)" fg:x="514169221" fg:w="7506259"/><text x="69.2324%" y="4575.50"></text></g><g><title>main::benchmark::get_node_id_id::_{{closure}} (7,506,259 samples, 1.01%)</title><rect x="68.9824%" y="4549" width="1.0071%" height="15" fill="rgb(211,178,46)" fg:x="514169221" fg:w="7506259"/><text x="69.2324%" y="4559.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (7,506,259 samples, 1.01%)</title><rect x="68.9824%" y="4533" width="1.0071%" height="15" fill="rgb(224,5,42)" fg:x="514169221" fg:w="7506259"/><text x="69.2324%" y="4543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (7,506,259 samples, 1.01%)</title><rect x="68.9824%" y="4517" width="1.0071%" height="15" fill="rgb(239,176,25)" fg:x="514169221" fg:w="7506259"/><text x="69.2324%" y="4527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (7,506,259 samples, 1.01%)</title><rect x="68.9824%" y="4501" width="1.0071%" height="15" fill="rgb(245,187,50)" fg:x="514169221" fg:w="7506259"/><text x="69.2324%" y="4511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (2,737,423 samples, 0.37%)</title><rect x="69.6222%" y="4485" width="0.3673%" height="15" fill="rgb(248,24,15)" fg:x="518938057" fg:w="2737423"/><text x="69.8722%" y="4495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (2,737,423 samples, 0.37%)</title><rect x="69.6222%" y="4469" width="0.3673%" height="15" fill="rgb(205,166,13)" fg:x="518938057" fg:w="2737423"/><text x="69.8722%" y="4479.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (2,737,423 samples, 0.37%)</title><rect x="69.6222%" y="4453" width="0.3673%" height="15" fill="rgb(208,114,23)" fg:x="518938057" fg:w="2737423"/><text x="69.8722%" y="4463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (2,260,980 samples, 0.30%)</title><rect x="69.6861%" y="4437" width="0.3033%" height="15" fill="rgb(239,127,18)" fg:x="519414500" fg:w="2260980"/><text x="69.9361%" y="4447.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (2,260,980 samples, 0.30%)</title><rect x="69.6861%" y="4421" width="0.3033%" height="15" fill="rgb(219,154,28)" fg:x="519414500" fg:w="2260980"/><text x="69.9361%" y="4431.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (2,260,980 samples, 0.30%)</title><rect x="69.6861%" y="4405" width="0.3033%" height="15" fill="rgb(225,157,23)" fg:x="519414500" fg:w="2260980"/><text x="69.9361%" y="4415.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (2,260,980 samples, 0.30%)</title><rect x="69.6861%" y="4389" width="0.3033%" height="15" fill="rgb(219,8,6)" fg:x="519414500" fg:w="2260980"/><text x="69.9361%" y="4399.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (2,260,980 samples, 0.30%)</title><rect x="69.6861%" y="4373" width="0.3033%" height="15" fill="rgb(212,47,6)" fg:x="519414500" fg:w="2260980"/><text x="69.9361%" y="4383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (2,260,980 samples, 0.30%)</title><rect x="69.6861%" y="4357" width="0.3033%" height="15" fill="rgb(224,190,4)" fg:x="519414500" fg:w="2260980"/><text x="69.9361%" y="4367.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (2,260,980 samples, 0.30%)</title><rect x="69.6861%" y="4341" width="0.3033%" height="15" fill="rgb(239,183,29)" fg:x="519414500" fg:w="2260980"/><text x="69.9361%" y="4351.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (2,260,980 samples, 0.30%)</title><rect x="69.6861%" y="4325" width="0.3033%" height="15" fill="rgb(213,57,7)" fg:x="519414500" fg:w="2260980"/><text x="69.9361%" y="4335.50"></text></g><g><title>main::benchmark::get_string_to_id_map (1,245,395 samples, 0.17%)</title><rect x="69.9895%" y="4565" width="0.1671%" height="15" fill="rgb(216,148,1)" fg:x="521675480" fg:w="1245395"/><text x="70.2395%" y="4575.50"></text></g><g><title>std::sync::once_lock::OnceLock&lt;T&gt;::get_or_init (1,245,395 samples, 0.17%)</title><rect x="69.9895%" y="4549" width="0.1671%" height="15" fill="rgb(236,182,29)" fg:x="521675480" fg:w="1245395"/><text x="70.2395%" y="4559.50"></text></g><g><title>std::sync::once_lock::OnceLock&lt;T&gt;::get_or_try_init (1,245,395 samples, 0.17%)</title><rect x="69.9895%" y="4533" width="0.1671%" height="15" fill="rgb(244,120,48)" fg:x="521675480" fg:w="1245395"/><text x="70.2395%" y="4543.50"></text></g><g><title>hashbrown::map::make_hash (2,549,500 samples, 0.34%)</title><rect x="70.1566%" y="4517" width="0.3420%" height="15" fill="rgb(206,71,34)" fg:x="522920875" fg:w="2549500"/><text x="70.4066%" y="4527.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2,549,500 samples, 0.34%)</title><rect x="70.1566%" y="4501" width="0.3420%" height="15" fill="rgb(242,32,6)" fg:x="522920875" fg:w="2549500"/><text x="70.4066%" y="4511.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (2,549,500 samples, 0.34%)</title><rect x="70.1566%" y="4485" width="0.3420%" height="15" fill="rgb(241,35,3)" fg:x="522920875" fg:w="2549500"/><text x="70.4066%" y="4495.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2,549,500 samples, 0.34%)</title><rect x="70.1566%" y="4469" width="0.3420%" height="15" fill="rgb(222,62,19)" fg:x="522920875" fg:w="2549500"/><text x="70.4066%" y="4479.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2,549,500 samples, 0.34%)</title><rect x="70.1566%" y="4453" width="0.3420%" height="15" fill="rgb(223,110,41)" fg:x="522920875" fg:w="2549500"/><text x="70.4066%" y="4463.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1,306,363 samples, 0.18%)</title><rect x="70.3234%" y="4437" width="0.1753%" height="15" fill="rgb(208,224,4)" fg:x="524164012" fg:w="1306363"/><text x="70.5734%" y="4447.50"></text></g><g><title>main::benchmark::process_node_generated_incremental (51,965,439 samples, 6.97%)</title><rect x="63.7096%" y="4613" width="6.9718%" height="15" fill="rgb(241,137,19)" fg:x="474867706" fg:w="51965439"/><text x="63.9596%" y="4623.50">main::ben..</text></g><g><title>main::benchmark::matches_tag_id (5,157,665 samples, 0.69%)</title><rect x="69.9895%" y="4597" width="0.6920%" height="15" fill="rgb(244,24,17)" fg:x="521675480" fg:w="5157665"/><text x="70.2395%" y="4607.50"></text></g><g><title>main::benchmark::get_node_tag_id (5,157,665 samples, 0.69%)</title><rect x="69.9895%" y="4581" width="0.6920%" height="15" fill="rgb(245,178,49)" fg:x="521675480" fg:w="5157665"/><text x="70.2395%" y="4591.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (3,912,270 samples, 0.52%)</title><rect x="70.1566%" y="4565" width="0.5249%" height="15" fill="rgb(219,160,38)" fg:x="522920875" fg:w="3912270"/><text x="70.4066%" y="4575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (3,912,270 samples, 0.52%)</title><rect x="70.1566%" y="4549" width="0.5249%" height="15" fill="rgb(228,137,14)" fg:x="522920875" fg:w="3912270"/><text x="70.4066%" y="4559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (3,912,270 samples, 0.52%)</title><rect x="70.1566%" y="4533" width="0.5249%" height="15" fill="rgb(237,134,11)" fg:x="522920875" fg:w="3912270"/><text x="70.4066%" y="4543.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (1,362,770 samples, 0.18%)</title><rect x="70.4986%" y="4517" width="0.1828%" height="15" fill="rgb(211,126,44)" fg:x="525470375" fg:w="1362770"/><text x="70.7486%" y="4527.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1,362,770 samples, 0.18%)</title><rect x="70.4986%" y="4501" width="0.1828%" height="15" fill="rgb(226,171,33)" fg:x="525470375" fg:w="1362770"/><text x="70.7486%" y="4511.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1,362,770 samples, 0.18%)</title><rect x="70.4986%" y="4485" width="0.1828%" height="15" fill="rgb(253,99,13)" fg:x="525470375" fg:w="1362770"/><text x="70.7486%" y="4495.50"></text></g><g><title>hashbrown::control::tag::Tag::full (1,362,770 samples, 0.18%)</title><rect x="70.4986%" y="4469" width="0.1828%" height="15" fill="rgb(244,48,7)" fg:x="525470375" fg:w="1362770"/><text x="70.7486%" y="4479.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (1,154,051 samples, 0.15%)</title><rect x="70.6815%" y="4581" width="0.1548%" height="15" fill="rgb(244,217,54)" fg:x="526833145" fg:w="1154051"/><text x="70.9315%" y="4591.50"></text></g><g><title>&lt;css_bitvector_compiler::BitVector as core::clone::Clone&gt;::clone (1,154,051 samples, 0.15%)</title><rect x="70.6815%" y="4565" width="0.1548%" height="15" fill="rgb(224,15,18)" fg:x="526833145" fg:w="1154051"/><text x="70.9315%" y="4575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,154,051 samples, 0.15%)</title><rect x="70.6815%" y="4549" width="0.1548%" height="15" fill="rgb(244,99,12)" fg:x="526833145" fg:w="1154051"/><text x="70.9315%" y="4559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,154,051 samples, 0.15%)</title><rect x="70.6815%" y="4533" width="0.1548%" height="15" fill="rgb(233,226,8)" fg:x="526833145" fg:w="1154051"/><text x="70.9315%" y="4543.50"></text></g><g><title>alloc::slice::hack::to_vec (1,154,051 samples, 0.15%)</title><rect x="70.6815%" y="4517" width="0.1548%" height="15" fill="rgb(229,211,3)" fg:x="526833145" fg:w="1154051"/><text x="70.9315%" y="4527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1,154,051 samples, 0.15%)</title><rect x="70.6815%" y="4501" width="0.1548%" height="15" fill="rgb(216,140,21)" fg:x="526833145" fg:w="1154051"/><text x="70.9315%" y="4511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,154,051 samples, 0.15%)</title><rect x="70.6815%" y="4485" width="0.1548%" height="15" fill="rgb(234,122,30)" fg:x="526833145" fg:w="1154051"/><text x="70.9315%" y="4495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,154,051 samples, 0.15%)</title><rect x="70.6815%" y="4469" width="0.1548%" height="15" fill="rgb(236,25,46)" fg:x="526833145" fg:w="1154051"/><text x="70.9315%" y="4479.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (1,154,051 samples, 0.15%)</title><rect x="70.6815%" y="4453" width="0.1548%" height="15" fill="rgb(217,52,54)" fg:x="526833145" fg:w="1154051"/><text x="70.9315%" y="4463.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1,154,051 samples, 0.15%)</title><rect x="70.6815%" y="4437" width="0.1548%" height="15" fill="rgb(222,29,26)" fg:x="526833145" fg:w="1154051"/><text x="70.9315%" y="4447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,154,051 samples, 0.15%)</title><rect x="70.6815%" y="4421" width="0.1548%" height="15" fill="rgb(216,177,29)" fg:x="526833145" fg:w="1154051"/><text x="70.9315%" y="4431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,154,051 samples, 0.15%)</title><rect x="70.6815%" y="4405" width="0.1548%" height="15" fill="rgb(247,136,51)" fg:x="526833145" fg:w="1154051"/><text x="70.9315%" y="4415.50"></text></g><g><title>alloc::alloc::alloc (1,154,051 samples, 0.15%)</title><rect x="70.6815%" y="4389" width="0.1548%" height="15" fill="rgb(231,47,47)" fg:x="526833145" fg:w="1154051"/><text x="70.9315%" y="4399.50"></text></g><g><title>malloc (1,154,051 samples, 0.15%)</title><rect x="70.6815%" y="4373" width="0.1548%" height="15" fill="rgb(211,192,36)" fg:x="526833145" fg:w="1154051"/><text x="70.9315%" y="4383.50"></text></g><g><title>[libc.so.6] (1,154,051 samples, 0.15%)</title><rect x="70.6815%" y="4357" width="0.1548%" height="15" fill="rgb(229,156,32)" fg:x="526833145" fg:w="1154051"/><text x="70.9315%" y="4367.50"></text></g><g><title>alloc::vec::from_elem (2,492,367 samples, 0.33%)</title><rect x="70.8363%" y="4581" width="0.3344%" height="15" fill="rgb(248,213,20)" fg:x="527987196" fg:w="2492367"/><text x="71.0863%" y="4591.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (2,492,367 samples, 0.33%)</title><rect x="70.8363%" y="4565" width="0.3344%" height="15" fill="rgb(217,64,7)" fg:x="527987196" fg:w="2492367"/><text x="71.0863%" y="4575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2,492,367 samples, 0.33%)</title><rect x="70.8363%" y="4549" width="0.3344%" height="15" fill="rgb(232,142,8)" fg:x="527987196" fg:w="2492367"/><text x="71.0863%" y="4559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2,492,367 samples, 0.33%)</title><rect x="70.8363%" y="4533" width="0.3344%" height="15" fill="rgb(224,92,44)" fg:x="527987196" fg:w="2492367"/><text x="71.0863%" y="4543.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (2,492,367 samples, 0.33%)</title><rect x="70.8363%" y="4517" width="0.3344%" height="15" fill="rgb(214,169,17)" fg:x="527987196" fg:w="2492367"/><text x="71.0863%" y="4527.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (2,492,367 samples, 0.33%)</title><rect x="70.8363%" y="4501" width="0.3344%" height="15" fill="rgb(210,59,37)" fg:x="527987196" fg:w="2492367"/><text x="71.0863%" y="4511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2,492,367 samples, 0.33%)</title><rect x="70.8363%" y="4485" width="0.3344%" height="15" fill="rgb(214,116,48)" fg:x="527987196" fg:w="2492367"/><text x="71.0863%" y="4495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2,492,367 samples, 0.33%)</title><rect x="70.8363%" y="4469" width="0.3344%" height="15" fill="rgb(244,191,6)" fg:x="527987196" fg:w="2492367"/><text x="71.0863%" y="4479.50"></text></g><g><title>alloc::alloc::alloc (2,492,367 samples, 0.33%)</title><rect x="70.8363%" y="4453" width="0.3344%" height="15" fill="rgb(241,50,52)" fg:x="527987196" fg:w="2492367"/><text x="71.0863%" y="4463.50"></text></g><g><title>malloc (2,492,367 samples, 0.33%)</title><rect x="70.8363%" y="4437" width="0.3344%" height="15" fill="rgb(236,75,39)" fg:x="527987196" fg:w="2492367"/><text x="71.0863%" y="4447.50"></text></g><g><title>[libc.so.6] (1,300,536 samples, 0.17%)</title><rect x="70.9962%" y="4421" width="0.1745%" height="15" fill="rgb(236,99,0)" fg:x="529179027" fg:w="1300536"/><text x="71.2462%" y="4431.50"></text></g><g><title>css_bitvector_compiler::BitVector::is_bit_set (2,466,014 samples, 0.33%)</title><rect x="71.1707%" y="4581" width="0.3308%" height="15" fill="rgb(207,202,15)" fg:x="530479563" fg:w="2466014"/><text x="71.4207%" y="4591.50"></text></g><g><title>&lt;&amp;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (1,144,478 samples, 0.15%)</title><rect x="71.5015%" y="4549" width="0.1535%" height="15" fill="rgb(233,207,14)" fg:x="532945577" fg:w="1144478"/><text x="71.7515%" y="4559.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::iter (1,144,478 samples, 0.15%)</title><rect x="71.5015%" y="4533" width="0.1535%" height="15" fill="rgb(226,27,51)" fg:x="532945577" fg:w="1144478"/><text x="71.7515%" y="4543.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::iter (1,144,478 samples, 0.15%)</title><rect x="71.5015%" y="4517" width="0.1535%" height="15" fill="rgb(206,104,42)" fg:x="532945577" fg:w="1144478"/><text x="71.7515%" y="4527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::keys (1,144,478 samples, 0.15%)</title><rect x="71.5015%" y="4501" width="0.1535%" height="15" fill="rgb(212,225,4)" fg:x="532945577" fg:w="1144478"/><text x="71.7515%" y="4511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (1,144,478 samples, 0.15%)</title><rect x="71.5015%" y="4485" width="0.1535%" height="15" fill="rgb(233,96,42)" fg:x="532945577" fg:w="1144478"/><text x="71.7515%" y="4495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter (1,144,478 samples, 0.15%)</title><rect x="71.5015%" y="4469" width="0.1535%" height="15" fill="rgb(229,21,32)" fg:x="532945577" fg:w="1144478"/><text x="71.7515%" y="4479.50"></text></g><g><title>hashbrown::raw::RawTableInner::iter (1,144,478 samples, 0.15%)</title><rect x="71.5015%" y="4453" width="0.1535%" height="15" fill="rgb(226,216,24)" fg:x="532945577" fg:w="1144478"/><text x="71.7515%" y="4463.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (1,144,478 samples, 0.15%)</title><rect x="71.5015%" y="4437" width="0.1535%" height="15" fill="rgb(221,163,17)" fg:x="532945577" fg:w="1144478"/><text x="71.7515%" y="4447.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_full (1,144,478 samples, 0.15%)</title><rect x="71.5015%" y="4421" width="0.1535%" height="15" fill="rgb(216,216,42)" fg:x="532945577" fg:w="1144478"/><text x="71.7515%" y="4431.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::invert (1,144,478 samples, 0.15%)</title><rect x="71.5015%" y="4405" width="0.1535%" height="15" fill="rgb(240,118,7)" fg:x="532945577" fg:w="1144478"/><text x="71.7515%" y="4415.50"></text></g><g><title>&lt;std::collections::hash::set::Iter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,536,158 samples, 0.34%)</title><rect x="71.6551%" y="4549" width="0.3403%" height="15" fill="rgb(221,67,37)" fg:x="534090055" fg:w="2536158"/><text x="71.9051%" y="4559.50"></text></g><g><title>&lt;hashbrown::set::Iter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,536,158 samples, 0.34%)</title><rect x="71.6551%" y="4533" width="0.3403%" height="15" fill="rgb(241,32,44)" fg:x="534090055" fg:w="2536158"/><text x="71.9051%" y="4543.50"></text></g><g><title>&lt;hashbrown::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,536,158 samples, 0.34%)</title><rect x="71.6551%" y="4517" width="0.3403%" height="15" fill="rgb(235,204,43)" fg:x="534090055" fg:w="2536158"/><text x="71.9051%" y="4527.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,536,158 samples, 0.34%)</title><rect x="71.6551%" y="4501" width="0.3403%" height="15" fill="rgb(213,116,10)" fg:x="534090055" fg:w="2536158"/><text x="71.9051%" y="4511.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,536,158 samples, 0.34%)</title><rect x="71.6551%" y="4485" width="0.3403%" height="15" fill="rgb(239,15,48)" fg:x="534090055" fg:w="2536158"/><text x="71.9051%" y="4495.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (1,263,668 samples, 0.17%)</title><rect x="71.8258%" y="4469" width="0.1695%" height="15" fill="rgb(207,123,36)" fg:x="535362545" fg:w="1263668"/><text x="72.0758%" y="4479.50"></text></g><g><title>&lt;hashbrown::control::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1,263,668 samples, 0.17%)</title><rect x="71.8258%" y="4453" width="0.1695%" height="15" fill="rgb(209,103,30)" fg:x="535362545" fg:w="1263668"/><text x="72.0758%" y="4463.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::lowest_set_bit (1,263,668 samples, 0.17%)</title><rect x="71.8258%" y="4437" width="0.1695%" height="15" fill="rgb(238,100,19)" fg:x="535362545" fg:w="1263668"/><text x="72.0758%" y="4447.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1,265,145 samples, 0.17%)</title><rect x="71.9953%" y="4421" width="0.1697%" height="15" fill="rgb(244,30,14)" fg:x="536626213" fg:w="1265145"/><text x="72.2453%" y="4431.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1,265,145 samples, 0.17%)</title><rect x="71.9953%" y="4405" width="0.1697%" height="15" fill="rgb(249,174,6)" fg:x="536626213" fg:w="1265145"/><text x="72.2453%" y="4415.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1,214,317 samples, 0.16%)</title><rect x="72.1651%" y="4405" width="0.1629%" height="15" fill="rgb(235,213,41)" fg:x="537891358" fg:w="1214317"/><text x="72.4151%" y="4415.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (3,733,120 samples, 0.50%)</title><rect x="71.9953%" y="4469" width="0.5008%" height="15" fill="rgb(213,118,6)" fg:x="536626213" fg:w="3733120"/><text x="72.2453%" y="4479.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (3,733,120 samples, 0.50%)</title><rect x="71.9953%" y="4453" width="0.5008%" height="15" fill="rgb(235,44,51)" fg:x="536626213" fg:w="3733120"/><text x="72.2453%" y="4463.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3,733,120 samples, 0.50%)</title><rect x="71.9953%" y="4437" width="0.5008%" height="15" fill="rgb(217,9,53)" fg:x="536626213" fg:w="3733120"/><text x="72.2453%" y="4447.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2,467,975 samples, 0.33%)</title><rect x="72.1651%" y="4421" width="0.3311%" height="15" fill="rgb(237,172,34)" fg:x="537891358" fg:w="2467975"/><text x="72.4151%" y="4431.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1,253,658 samples, 0.17%)</title><rect x="72.3280%" y="4405" width="0.1682%" height="15" fill="rgb(206,206,11)" fg:x="539105675" fg:w="1253658"/><text x="72.5780%" y="4415.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2,583,727 samples, 0.35%)</title><rect x="72.4962%" y="4389" width="0.3466%" height="15" fill="rgb(214,149,29)" fg:x="540359333" fg:w="2583727"/><text x="72.7462%" y="4399.50"></text></g><g><title>core::hash::sip::u8to64_le (1,305,627 samples, 0.18%)</title><rect x="72.6676%" y="4373" width="0.1752%" height="15" fill="rgb(208,123,3)" fg:x="541637433" fg:w="1305627"/><text x="72.9176%" y="4383.50"></text></g><g><title>hashbrown::map::make_hash (7,561,229 samples, 1.01%)</title><rect x="71.9953%" y="4501" width="1.0144%" height="15" fill="rgb(229,126,4)" fg:x="536626213" fg:w="7561229"/><text x="72.2453%" y="4511.50"></text></g><g><title>core::hash::BuildHasher::hash_one (7,561,229 samples, 1.01%)</title><rect x="71.9953%" y="4485" width="1.0144%" height="15" fill="rgb(222,92,36)" fg:x="536626213" fg:w="7561229"/><text x="72.2453%" y="4495.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3,828,109 samples, 0.51%)</title><rect x="72.4962%" y="4469" width="0.5136%" height="15" fill="rgb(216,39,41)" fg:x="540359333" fg:w="3828109"/><text x="72.7462%" y="4479.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (3,828,109 samples, 0.51%)</title><rect x="72.4962%" y="4453" width="0.5136%" height="15" fill="rgb(253,127,28)" fg:x="540359333" fg:w="3828109"/><text x="72.7462%" y="4463.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (3,828,109 samples, 0.51%)</title><rect x="72.4962%" y="4437" width="0.5136%" height="15" fill="rgb(249,152,51)" fg:x="540359333" fg:w="3828109"/><text x="72.7462%" y="4447.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (3,828,109 samples, 0.51%)</title><rect x="72.4962%" y="4421" width="0.5136%" height="15" fill="rgb(209,123,42)" fg:x="540359333" fg:w="3828109"/><text x="72.7462%" y="4431.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (3,828,109 samples, 0.51%)</title><rect x="72.4962%" y="4405" width="0.5136%" height="15" fill="rgb(241,118,22)" fg:x="540359333" fg:w="3828109"/><text x="72.7462%" y="4415.50"></text></g><g><title>core::hash::Hasher::write_u8 (1,244,382 samples, 0.17%)</title><rect x="72.8428%" y="4389" width="0.1669%" height="15" fill="rgb(208,25,7)" fg:x="542943060" fg:w="1244382"/><text x="73.0928%" y="4399.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,244,382 samples, 0.17%)</title><rect x="72.8428%" y="4373" width="0.1669%" height="15" fill="rgb(243,144,39)" fg:x="542943060" fg:w="1244382"/><text x="73.0928%" y="4383.50"></text></g><g><title>core::hash::sip::u8to64_le (1,244,382 samples, 0.17%)</title><rect x="72.8428%" y="4357" width="0.1669%" height="15" fill="rgb(250,50,5)" fg:x="542943060" fg:w="1244382"/><text x="73.0928%" y="4367.50"></text></g><g><title>hashbrown::control::tag::Tag::full (1,360,288 samples, 0.18%)</title><rect x="73.0098%" y="4453" width="0.1825%" height="15" fill="rgb(207,67,11)" fg:x="544187442" fg:w="1360288"/><text x="73.2598%" y="4463.50"></text></g><g><title>main::benchmark::matches_class_id (13,838,628 samples, 1.86%)</title><rect x="71.5015%" y="4581" width="1.8566%" height="15" fill="rgb(245,204,40)" fg:x="532945577" fg:w="13838628"/><text x="71.7515%" y="4591.50">m..</text></g><g><title>main::benchmark::node_has_class_id (13,838,628 samples, 1.86%)</title><rect x="71.5015%" y="4565" width="1.8566%" height="15" fill="rgb(238,228,24)" fg:x="532945577" fg:w="13838628"/><text x="71.7515%" y="4575.50">m..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (10,157,992 samples, 1.36%)</title><rect x="71.9953%" y="4549" width="1.3628%" height="15" fill="rgb(217,116,22)" fg:x="536626213" fg:w="10157992"/><text x="72.2453%" y="4559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (10,157,992 samples, 1.36%)</title><rect x="71.9953%" y="4533" width="1.3628%" height="15" fill="rgb(234,98,12)" fg:x="536626213" fg:w="10157992"/><text x="72.2453%" y="4543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (10,157,992 samples, 1.36%)</title><rect x="71.9953%" y="4517" width="1.3628%" height="15" fill="rgb(242,170,50)" fg:x="536626213" fg:w="10157992"/><text x="72.2453%" y="4527.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (2,596,763 samples, 0.35%)</title><rect x="73.0098%" y="4501" width="0.3484%" height="15" fill="rgb(235,7,5)" fg:x="544187442" fg:w="2596763"/><text x="73.2598%" y="4511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (2,596,763 samples, 0.35%)</title><rect x="73.0098%" y="4485" width="0.3484%" height="15" fill="rgb(241,114,28)" fg:x="544187442" fg:w="2596763"/><text x="73.2598%" y="4495.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (2,596,763 samples, 0.35%)</title><rect x="73.0098%" y="4469" width="0.3484%" height="15" fill="rgb(246,112,42)" fg:x="544187442" fg:w="2596763"/><text x="73.2598%" y="4479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (1,236,475 samples, 0.17%)</title><rect x="73.1923%" y="4453" width="0.1659%" height="15" fill="rgb(248,228,14)" fg:x="545547730" fg:w="1236475"/><text x="73.4423%" y="4463.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (1,236,475 samples, 0.17%)</title><rect x="73.1923%" y="4437" width="0.1659%" height="15" fill="rgb(208,133,18)" fg:x="545547730" fg:w="1236475"/><text x="73.4423%" y="4447.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (1,236,475 samples, 0.17%)</title><rect x="73.1923%" y="4421" width="0.1659%" height="15" fill="rgb(207,35,49)" fg:x="545547730" fg:w="1236475"/><text x="73.4423%" y="4431.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1,236,475 samples, 0.17%)</title><rect x="73.1923%" y="4405" width="0.1659%" height="15" fill="rgb(205,68,36)" fg:x="545547730" fg:w="1236475"/><text x="73.4423%" y="4415.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (2,566,634 samples, 0.34%)</title><rect x="73.7039%" y="4437" width="0.3443%" height="15" fill="rgb(245,62,40)" fg:x="549361687" fg:w="2566634"/><text x="73.9539%" y="4447.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2,566,634 samples, 0.34%)</title><rect x="73.7039%" y="4421" width="0.3443%" height="15" fill="rgb(228,27,24)" fg:x="549361687" fg:w="2566634"/><text x="73.9539%" y="4431.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2,566,634 samples, 0.34%)</title><rect x="73.7039%" y="4405" width="0.3443%" height="15" fill="rgb(253,19,12)" fg:x="549361687" fg:w="2566634"/><text x="73.9539%" y="4415.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1,267,607 samples, 0.17%)</title><rect x="73.8782%" y="4389" width="0.1701%" height="15" fill="rgb(232,28,20)" fg:x="550660714" fg:w="1267607"/><text x="74.1282%" y="4399.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1,267,607 samples, 0.17%)</title><rect x="73.8782%" y="4373" width="0.1701%" height="15" fill="rgb(218,35,51)" fg:x="550660714" fg:w="1267607"/><text x="74.1282%" y="4383.50"></text></g><g><title>hashbrown::map::make_hash (5,060,521 samples, 0.68%)</title><rect x="73.5231%" y="4469" width="0.6789%" height="15" fill="rgb(212,90,40)" fg:x="548014091" fg:w="5060521"/><text x="73.7731%" y="4479.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3,712,925 samples, 0.50%)</title><rect x="73.7039%" y="4453" width="0.4981%" height="15" fill="rgb(220,172,12)" fg:x="549361687" fg:w="3712925"/><text x="73.9539%" y="4463.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1,146,291 samples, 0.15%)</title><rect x="74.0483%" y="4437" width="0.1538%" height="15" fill="rgb(226,159,20)" fg:x="551928321" fg:w="1146291"/><text x="74.2983%" y="4447.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (1,146,291 samples, 0.15%)</title><rect x="74.0483%" y="4421" width="0.1538%" height="15" fill="rgb(234,205,16)" fg:x="551928321" fg:w="1146291"/><text x="74.2983%" y="4431.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (1,146,291 samples, 0.15%)</title><rect x="74.0483%" y="4405" width="0.1538%" height="15" fill="rgb(207,9,39)" fg:x="551928321" fg:w="1146291"/><text x="74.2983%" y="4415.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (1,146,291 samples, 0.15%)</title><rect x="74.0483%" y="4389" width="0.1538%" height="15" fill="rgb(249,143,15)" fg:x="551928321" fg:w="1146291"/><text x="74.2983%" y="4399.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (1,146,291 samples, 0.15%)</title><rect x="74.0483%" y="4373" width="0.1538%" height="15" fill="rgb(253,133,29)" fg:x="551928321" fg:w="1146291"/><text x="74.2983%" y="4383.50"></text></g><g><title>&lt;hashbrown::control::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1,239,522 samples, 0.17%)</title><rect x="74.2021%" y="4421" width="0.1663%" height="15" fill="rgb(221,187,0)" fg:x="553074612" fg:w="1239522"/><text x="74.4521%" y="4431.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::lowest_set_bit (1,239,522 samples, 0.17%)</title><rect x="74.2021%" y="4405" width="0.1663%" height="15" fill="rgb(205,204,26)" fg:x="553074612" fg:w="1239522"/><text x="74.4521%" y="4415.50"></text></g><g><title>hashbrown::control::group::sse2::Group::load (1,318,790 samples, 0.18%)</title><rect x="74.3684%" y="4421" width="0.1769%" height="15" fill="rgb(224,68,54)" fg:x="554314134" fg:w="1318790"/><text x="74.6184%" y="4431.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1,318,790 samples, 0.18%)</title><rect x="74.3684%" y="4405" width="0.1769%" height="15" fill="rgb(209,67,4)" fg:x="554314134" fg:w="1318790"/><text x="74.6184%" y="4415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,318,790 samples, 0.18%)</title><rect x="74.3684%" y="4389" width="0.1769%" height="15" fill="rgb(228,229,18)" fg:x="554314134" fg:w="1318790"/><text x="74.6184%" y="4399.50"></text></g><g><title>main::benchmark::matches_id_id (10,174,153 samples, 1.36%)</title><rect x="73.3581%" y="4581" width="1.3650%" height="15" fill="rgb(231,89,13)" fg:x="546784205" fg:w="10174153"/><text x="73.6081%" y="4591.50"></text></g><g><title>main::benchmark::get_node_id_id (10,174,153 samples, 1.36%)</title><rect x="73.3581%" y="4565" width="1.3650%" height="15" fill="rgb(210,182,18)" fg:x="546784205" fg:w="10174153"/><text x="73.6081%" y="4575.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (10,174,153 samples, 1.36%)</title><rect x="73.3581%" y="4549" width="1.3650%" height="15" fill="rgb(240,105,2)" fg:x="546784205" fg:w="10174153"/><text x="73.6081%" y="4559.50"></text></g><g><title>main::benchmark::get_node_id_id::_{{closure}} (10,174,153 samples, 1.36%)</title><rect x="73.3581%" y="4533" width="1.3650%" height="15" fill="rgb(207,170,50)" fg:x="546784205" fg:w="10174153"/><text x="73.6081%" y="4543.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (8,944,267 samples, 1.20%)</title><rect x="73.5231%" y="4517" width="1.2000%" height="15" fill="rgb(232,133,24)" fg:x="548014091" fg:w="8944267"/><text x="73.7731%" y="4527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (8,944,267 samples, 1.20%)</title><rect x="73.5231%" y="4501" width="1.2000%" height="15" fill="rgb(235,166,27)" fg:x="548014091" fg:w="8944267"/><text x="73.7731%" y="4511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (8,944,267 samples, 1.20%)</title><rect x="73.5231%" y="4485" width="1.2000%" height="15" fill="rgb(209,19,13)" fg:x="548014091" fg:w="8944267"/><text x="73.7731%" y="4495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (3,883,746 samples, 0.52%)</title><rect x="74.2021%" y="4469" width="0.5211%" height="15" fill="rgb(226,79,39)" fg:x="553074612" fg:w="3883746"/><text x="74.4521%" y="4479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (3,883,746 samples, 0.52%)</title><rect x="74.2021%" y="4453" width="0.5211%" height="15" fill="rgb(222,163,10)" fg:x="553074612" fg:w="3883746"/><text x="74.4521%" y="4463.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (3,883,746 samples, 0.52%)</title><rect x="74.2021%" y="4437" width="0.5211%" height="15" fill="rgb(214,44,19)" fg:x="553074612" fg:w="3883746"/><text x="74.4521%" y="4447.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_empty (1,325,434 samples, 0.18%)</title><rect x="74.5453%" y="4421" width="0.1778%" height="15" fill="rgb(210,217,13)" fg:x="555632924" fg:w="1325434"/><text x="74.7953%" y="4431.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (1,325,434 samples, 0.18%)</title><rect x="74.5453%" y="4405" width="0.1778%" height="15" fill="rgb(237,61,54)" fg:x="555632924" fg:w="1325434"/><text x="74.7953%" y="4415.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1,325,434 samples, 0.18%)</title><rect x="74.5453%" y="4389" width="0.1778%" height="15" fill="rgb(226,184,24)" fg:x="555632924" fg:w="1325434"/><text x="74.7953%" y="4399.50"></text></g><g><title>main::benchmark::process_node_generated_incremental (31,374,267 samples, 4.21%)</title><rect x="70.6815%" y="4597" width="4.2093%" height="15" fill="rgb(223,226,4)" fg:x="526833145" fg:w="31374267"/><text x="70.9315%" y="4607.50">main:..</text></g><g><title>main::benchmark::matches_tag_id (1,249,054 samples, 0.17%)</title><rect x="74.7231%" y="4581" width="0.1676%" height="15" fill="rgb(210,26,41)" fg:x="556958358" fg:w="1249054"/><text x="74.9731%" y="4591.50"></text></g><g><title>main::benchmark::get_node_tag_id (1,249,054 samples, 0.17%)</title><rect x="74.7231%" y="4565" width="0.1676%" height="15" fill="rgb(220,221,6)" fg:x="556958358" fg:w="1249054"/><text x="74.9731%" y="4575.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1,249,054 samples, 0.17%)</title><rect x="74.7231%" y="4549" width="0.1676%" height="15" fill="rgb(225,89,49)" fg:x="556958358" fg:w="1249054"/><text x="74.9731%" y="4559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1,249,054 samples, 0.17%)</title><rect x="74.7231%" y="4533" width="0.1676%" height="15" fill="rgb(218,70,45)" fg:x="556958358" fg:w="1249054"/><text x="74.9731%" y="4543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1,249,054 samples, 0.17%)</title><rect x="74.7231%" y="4517" width="0.1676%" height="15" fill="rgb(238,166,21)" fg:x="556958358" fg:w="1249054"/><text x="74.9731%" y="4527.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (1,249,054 samples, 0.17%)</title><rect x="74.7231%" y="4501" width="0.1676%" height="15" fill="rgb(224,141,44)" fg:x="556958358" fg:w="1249054"/><text x="74.9731%" y="4511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1,249,054 samples, 0.17%)</title><rect x="74.7231%" y="4485" width="0.1676%" height="15" fill="rgb(230,12,49)" fg:x="556958358" fg:w="1249054"/><text x="74.9731%" y="4495.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1,249,054 samples, 0.17%)</title><rect x="74.7231%" y="4469" width="0.1676%" height="15" fill="rgb(212,174,12)" fg:x="556958358" fg:w="1249054"/><text x="74.9731%" y="4479.50"></text></g><g><title>&lt;hashbrown::control::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1,249,054 samples, 0.17%)</title><rect x="74.7231%" y="4453" width="0.1676%" height="15" fill="rgb(246,67,9)" fg:x="556958358" fg:w="1249054"/><text x="74.9731%" y="4463.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::lowest_set_bit (1,249,054 samples, 0.17%)</title><rect x="74.7231%" y="4437" width="0.1676%" height="15" fill="rgb(239,35,23)" fg:x="556958358" fg:w="1249054"/><text x="74.9731%" y="4447.50"></text></g><g><title>css_bitvector_compiler::BitVector::is_bit_set (2,618,643 samples, 0.35%)</title><rect x="75.0553%" y="4565" width="0.3513%" height="15" fill="rgb(211,167,0)" fg:x="559434294" fg:w="2618643"/><text x="75.3053%" y="4575.50"></text></g><g><title>hashbrown::control::group::sse2::Group::load_aligned (1,086,751 samples, 0.15%)</title><rect x="75.5723%" y="4405" width="0.1458%" height="15" fill="rgb(225,119,45)" fg:x="563287596" fg:w="1086751"/><text x="75.8223%" y="4415.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (1,086,751 samples, 0.15%)</title><rect x="75.5723%" y="4389" width="0.1458%" height="15" fill="rgb(210,162,6)" fg:x="563287596" fg:w="1086751"/><text x="75.8223%" y="4399.50"></text></g><g><title>&lt;&amp;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (4,926,851 samples, 0.66%)</title><rect x="75.4066%" y="4533" width="0.6610%" height="15" fill="rgb(208,118,35)" fg:x="562052937" fg:w="4926851"/><text x="75.6566%" y="4543.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::iter (4,926,851 samples, 0.66%)</title><rect x="75.4066%" y="4517" width="0.6610%" height="15" fill="rgb(239,4,53)" fg:x="562052937" fg:w="4926851"/><text x="75.6566%" y="4527.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::iter (4,926,851 samples, 0.66%)</title><rect x="75.4066%" y="4501" width="0.6610%" height="15" fill="rgb(213,130,21)" fg:x="562052937" fg:w="4926851"/><text x="75.6566%" y="4511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::keys (4,926,851 samples, 0.66%)</title><rect x="75.4066%" y="4485" width="0.6610%" height="15" fill="rgb(235,148,0)" fg:x="562052937" fg:w="4926851"/><text x="75.6566%" y="4495.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (4,926,851 samples, 0.66%)</title><rect x="75.4066%" y="4469" width="0.6610%" height="15" fill="rgb(244,224,18)" fg:x="562052937" fg:w="4926851"/><text x="75.6566%" y="4479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter (4,926,851 samples, 0.66%)</title><rect x="75.4066%" y="4453" width="0.6610%" height="15" fill="rgb(211,214,4)" fg:x="562052937" fg:w="4926851"/><text x="75.6566%" y="4463.50"></text></g><g><title>hashbrown::raw::RawTableInner::iter (4,926,851 samples, 0.66%)</title><rect x="75.4066%" y="4437" width="0.6610%" height="15" fill="rgb(206,119,25)" fg:x="562052937" fg:w="4926851"/><text x="75.6566%" y="4447.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (3,692,192 samples, 0.50%)</title><rect x="75.5723%" y="4421" width="0.4954%" height="15" fill="rgb(243,93,47)" fg:x="563287596" fg:w="3692192"/><text x="75.8223%" y="4431.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_full (2,605,441 samples, 0.35%)</title><rect x="75.7181%" y="4405" width="0.3496%" height="15" fill="rgb(224,194,6)" fg:x="564374347" fg:w="2605441"/><text x="75.9681%" y="4415.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::invert (1,220,898 samples, 0.16%)</title><rect x="75.9038%" y="4389" width="0.1638%" height="15" fill="rgb(243,229,6)" fg:x="565758890" fg:w="1220898"/><text x="76.1538%" y="4399.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2,612,997 samples, 0.35%)</title><rect x="76.4032%" y="4373" width="0.3506%" height="15" fill="rgb(207,23,50)" fg:x="569480872" fg:w="2612997"/><text x="76.6532%" y="4383.50"></text></g><g><title>core::hash::sip::u8to64_le (2,612,997 samples, 0.35%)</title><rect x="76.4032%" y="4357" width="0.3506%" height="15" fill="rgb(253,192,32)" fg:x="569480872" fg:w="2612997"/><text x="76.6532%" y="4367.50"></text></g><g><title>hashbrown::map::make_hash (6,345,223 samples, 0.85%)</title><rect x="76.0676%" y="4485" width="0.8513%" height="15" fill="rgb(213,21,6)" fg:x="566979788" fg:w="6345223"/><text x="76.3176%" y="4495.50"></text></g><g><title>core::hash::BuildHasher::hash_one (5,203,812 samples, 0.70%)</title><rect x="76.2208%" y="4469" width="0.6982%" height="15" fill="rgb(243,151,13)" fg:x="568121199" fg:w="5203812"/><text x="76.4708%" y="4479.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3,844,139 samples, 0.52%)</title><rect x="76.4032%" y="4453" width="0.5157%" height="15" fill="rgb(233,165,41)" fg:x="569480872" fg:w="3844139"/><text x="76.6532%" y="4463.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (3,844,139 samples, 0.52%)</title><rect x="76.4032%" y="4437" width="0.5157%" height="15" fill="rgb(246,176,45)" fg:x="569480872" fg:w="3844139"/><text x="76.6532%" y="4447.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (3,844,139 samples, 0.52%)</title><rect x="76.4032%" y="4421" width="0.5157%" height="15" fill="rgb(217,170,52)" fg:x="569480872" fg:w="3844139"/><text x="76.6532%" y="4431.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (3,844,139 samples, 0.52%)</title><rect x="76.4032%" y="4405" width="0.5157%" height="15" fill="rgb(214,203,54)" fg:x="569480872" fg:w="3844139"/><text x="76.6532%" y="4415.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (3,844,139 samples, 0.52%)</title><rect x="76.4032%" y="4389" width="0.5157%" height="15" fill="rgb(248,215,49)" fg:x="569480872" fg:w="3844139"/><text x="76.6532%" y="4399.50"></text></g><g><title>core::hash::Hasher::write_u8 (1,231,142 samples, 0.17%)</title><rect x="76.7538%" y="4373" width="0.1652%" height="15" fill="rgb(208,46,10)" fg:x="572093869" fg:w="1231142"/><text x="77.0038%" y="4383.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,231,142 samples, 0.17%)</title><rect x="76.7538%" y="4357" width="0.1652%" height="15" fill="rgb(254,5,31)" fg:x="572093869" fg:w="1231142"/><text x="77.0038%" y="4367.50"></text></g><g><title>&lt;hashbrown::control::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1,323,604 samples, 0.18%)</title><rect x="76.9189%" y="4437" width="0.1776%" height="15" fill="rgb(222,104,33)" fg:x="573325011" fg:w="1323604"/><text x="77.1689%" y="4447.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::lowest_set_bit (1,323,604 samples, 0.18%)</title><rect x="76.9189%" y="4421" width="0.1776%" height="15" fill="rgb(248,49,16)" fg:x="573325011" fg:w="1323604"/><text x="77.1689%" y="4431.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::nonzero_trailing_zeros (1,323,604 samples, 0.18%)</title><rect x="76.9189%" y="4405" width="0.1776%" height="15" fill="rgb(232,198,41)" fg:x="573325011" fg:w="1323604"/><text x="77.1689%" y="4415.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u16&gt;::trailing_zeros (1,323,604 samples, 0.18%)</title><rect x="76.9189%" y="4389" width="0.1776%" height="15" fill="rgb(214,125,3)" fg:x="573325011" fg:w="1323604"/><text x="77.1689%" y="4399.50"></text></g><g><title>main::benchmark::matches_class_id (13,611,289 samples, 1.83%)</title><rect x="75.4066%" y="4565" width="1.8261%" height="15" fill="rgb(229,220,28)" fg:x="562052937" fg:w="13611289"/><text x="75.6566%" y="4575.50">m..</text></g><g><title>main::benchmark::node_has_class_id (13,611,289 samples, 1.83%)</title><rect x="75.4066%" y="4549" width="1.8261%" height="15" fill="rgb(222,64,37)" fg:x="562052937" fg:w="13611289"/><text x="75.6566%" y="4559.50">m..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (8,684,438 samples, 1.17%)</title><rect x="76.0676%" y="4533" width="1.1651%" height="15" fill="rgb(249,184,13)" fg:x="566979788" fg:w="8684438"/><text x="76.3176%" y="4543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (8,684,438 samples, 1.17%)</title><rect x="76.0676%" y="4517" width="1.1651%" height="15" fill="rgb(252,176,6)" fg:x="566979788" fg:w="8684438"/><text x="76.3176%" y="4527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (8,684,438 samples, 1.17%)</title><rect x="76.0676%" y="4501" width="1.1651%" height="15" fill="rgb(228,153,7)" fg:x="566979788" fg:w="8684438"/><text x="76.3176%" y="4511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (2,339,215 samples, 0.31%)</title><rect x="76.9189%" y="4485" width="0.3138%" height="15" fill="rgb(242,193,5)" fg:x="573325011" fg:w="2339215"/><text x="77.1689%" y="4495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (2,339,215 samples, 0.31%)</title><rect x="76.9189%" y="4469" width="0.3138%" height="15" fill="rgb(232,140,9)" fg:x="573325011" fg:w="2339215"/><text x="77.1689%" y="4479.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (2,339,215 samples, 0.31%)</title><rect x="76.9189%" y="4453" width="0.3138%" height="15" fill="rgb(213,222,16)" fg:x="573325011" fg:w="2339215"/><text x="77.1689%" y="4463.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (1,015,611 samples, 0.14%)</title><rect x="77.0965%" y="4437" width="0.1363%" height="15" fill="rgb(222,75,50)" fg:x="574648615" fg:w="1015611"/><text x="77.3465%" y="4447.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1,015,611 samples, 0.14%)</title><rect x="77.0965%" y="4421" width="0.1363%" height="15" fill="rgb(205,180,2)" fg:x="574648615" fg:w="1015611"/><text x="77.3465%" y="4431.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1,324,085 samples, 0.18%)</title><rect x="77.4059%" y="4357" width="0.1776%" height="15" fill="rgb(216,34,7)" fg:x="576954900" fg:w="1324085"/><text x="77.6559%" y="4367.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (3,970,080 samples, 0.53%)</title><rect x="77.2328%" y="4421" width="0.5326%" height="15" fill="rgb(253,16,32)" fg:x="575664226" fg:w="3970080"/><text x="77.4828%" y="4431.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (3,970,080 samples, 0.53%)</title><rect x="77.2328%" y="4405" width="0.5326%" height="15" fill="rgb(208,97,28)" fg:x="575664226" fg:w="3970080"/><text x="77.4828%" y="4415.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3,970,080 samples, 0.53%)</title><rect x="77.2328%" y="4389" width="0.5326%" height="15" fill="rgb(225,92,11)" fg:x="575664226" fg:w="3970080"/><text x="77.4828%" y="4399.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2,679,406 samples, 0.36%)</title><rect x="77.4059%" y="4373" width="0.3595%" height="15" fill="rgb(243,38,12)" fg:x="576954900" fg:w="2679406"/><text x="77.6559%" y="4383.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1,355,321 samples, 0.18%)</title><rect x="77.5836%" y="4357" width="0.1818%" height="15" fill="rgb(208,139,16)" fg:x="578278985" fg:w="1355321"/><text x="77.8336%" y="4367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (6,279,224 samples, 0.84%)</title><rect x="77.7654%" y="4341" width="0.8424%" height="15" fill="rgb(227,24,9)" fg:x="579634306" fg:w="6279224"/><text x="78.0154%" y="4351.50"></text></g><g><title>core::hash::sip::u8to64_le (3,794,230 samples, 0.51%)</title><rect x="78.0988%" y="4325" width="0.5090%" height="15" fill="rgb(206,62,11)" fg:x="582119300" fg:w="3794230"/><text x="78.3488%" y="4335.50"></text></g><g><title>hashbrown::map::make_hash (12,786,706 samples, 1.72%)</title><rect x="77.2328%" y="4453" width="1.7155%" height="15" fill="rgb(228,134,27)" fg:x="575664226" fg:w="12786706"/><text x="77.4828%" y="4463.50"></text></g><g><title>core::hash::BuildHasher::hash_one (12,786,706 samples, 1.72%)</title><rect x="77.2328%" y="4437" width="1.7155%" height="15" fill="rgb(205,55,33)" fg:x="575664226" fg:w="12786706"/><text x="77.4828%" y="4447.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (8,816,626 samples, 1.18%)</title><rect x="77.7654%" y="4421" width="1.1829%" height="15" fill="rgb(243,75,43)" fg:x="579634306" fg:w="8816626"/><text x="78.0154%" y="4431.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (8,816,626 samples, 1.18%)</title><rect x="77.7654%" y="4405" width="1.1829%" height="15" fill="rgb(223,27,42)" fg:x="579634306" fg:w="8816626"/><text x="78.0154%" y="4415.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (8,816,626 samples, 1.18%)</title><rect x="77.7654%" y="4389" width="1.1829%" height="15" fill="rgb(232,189,33)" fg:x="579634306" fg:w="8816626"/><text x="78.0154%" y="4399.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (8,816,626 samples, 1.18%)</title><rect x="77.7654%" y="4373" width="1.1829%" height="15" fill="rgb(210,9,39)" fg:x="579634306" fg:w="8816626"/><text x="78.0154%" y="4383.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (8,816,626 samples, 1.18%)</title><rect x="77.7654%" y="4357" width="1.1829%" height="15" fill="rgb(242,85,26)" fg:x="579634306" fg:w="8816626"/><text x="78.0154%" y="4367.50"></text></g><g><title>core::hash::Hasher::write_u8 (2,537,402 samples, 0.34%)</title><rect x="78.6078%" y="4341" width="0.3404%" height="15" fill="rgb(248,44,4)" fg:x="585913530" fg:w="2537402"/><text x="78.8578%" y="4351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2,537,402 samples, 0.34%)</title><rect x="78.6078%" y="4325" width="0.3404%" height="15" fill="rgb(250,96,46)" fg:x="585913530" fg:w="2537402"/><text x="78.8578%" y="4335.50"></text></g><g><title>core::cmp::min (1,213,273 samples, 0.16%)</title><rect x="78.7855%" y="4309" width="0.1628%" height="15" fill="rgb(229,116,26)" fg:x="587237659" fg:w="1213273"/><text x="79.0355%" y="4319.50"></text></g><g><title>core::cmp::Ord::min (1,213,273 samples, 0.16%)</title><rect x="78.7855%" y="4293" width="0.1628%" height="15" fill="rgb(246,94,34)" fg:x="587237659" fg:w="1213273"/><text x="79.0355%" y="4303.50"></text></g><g><title>hashbrown::control::group::sse2::Group::match_tag (1,346,411 samples, 0.18%)</title><rect x="78.9483%" y="4405" width="0.1806%" height="15" fill="rgb(251,73,21)" fg:x="588450932" fg:w="1346411"/><text x="79.1983%" y="4415.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1,346,411 samples, 0.18%)</title><rect x="78.9483%" y="4389" width="0.1806%" height="15" fill="rgb(254,121,25)" fg:x="588450932" fg:w="1346411"/><text x="79.1983%" y="4399.50"></text></g><g><title>main::benchmark::matches_id_id (15,372,765 samples, 2.06%)</title><rect x="77.2328%" y="4565" width="2.0625%" height="15" fill="rgb(215,161,49)" fg:x="575664226" fg:w="15372765"/><text x="77.4828%" y="4575.50">m..</text></g><g><title>main::benchmark::get_node_id_id (15,372,765 samples, 2.06%)</title><rect x="77.2328%" y="4549" width="2.0625%" height="15" fill="rgb(221,43,13)" fg:x="575664226" fg:w="15372765"/><text x="77.4828%" y="4559.50">m..</text></g><g><title>core::option::Option&lt;T&gt;::and_then (15,372,765 samples, 2.06%)</title><rect x="77.2328%" y="4533" width="2.0625%" height="15" fill="rgb(249,5,37)" fg:x="575664226" fg:w="15372765"/><text x="77.4828%" y="4543.50">c..</text></g><g><title>main::benchmark::get_node_id_id::_{{closure}} (15,372,765 samples, 2.06%)</title><rect x="77.2328%" y="4517" width="2.0625%" height="15" fill="rgb(226,25,44)" fg:x="575664226" fg:w="15372765"/><text x="77.4828%" y="4527.50">m..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (15,372,765 samples, 2.06%)</title><rect x="77.2328%" y="4501" width="2.0625%" height="15" fill="rgb(238,189,16)" fg:x="575664226" fg:w="15372765"/><text x="77.4828%" y="4511.50">s..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (15,372,765 samples, 2.06%)</title><rect x="77.2328%" y="4485" width="2.0625%" height="15" fill="rgb(251,186,8)" fg:x="575664226" fg:w="15372765"/><text x="77.4828%" y="4495.50">h..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (15,372,765 samples, 2.06%)</title><rect x="77.2328%" y="4469" width="2.0625%" height="15" fill="rgb(254,34,31)" fg:x="575664226" fg:w="15372765"/><text x="77.4828%" y="4479.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (2,586,059 samples, 0.35%)</title><rect x="78.9483%" y="4453" width="0.3470%" height="15" fill="rgb(225,215,27)" fg:x="588450932" fg:w="2586059"/><text x="79.1983%" y="4463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (2,586,059 samples, 0.35%)</title><rect x="78.9483%" y="4437" width="0.3470%" height="15" fill="rgb(221,192,48)" fg:x="588450932" fg:w="2586059"/><text x="79.1983%" y="4447.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (2,586,059 samples, 0.35%)</title><rect x="78.9483%" y="4421" width="0.3470%" height="15" fill="rgb(219,137,20)" fg:x="588450932" fg:w="2586059"/><text x="79.1983%" y="4431.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (1,239,648 samples, 0.17%)</title><rect x="79.1289%" y="4405" width="0.1663%" height="15" fill="rgb(219,84,11)" fg:x="589797343" fg:w="1239648"/><text x="79.3789%" y="4415.50"></text></g><g><title>main::benchmark::process_node_generated_incremental (35,353,194 samples, 4.74%)</title><rect x="74.8907%" y="4581" width="4.7431%" height="15" fill="rgb(224,10,23)" fg:x="558207412" fg:w="35353194"/><text x="75.1407%" y="4591.50">main::..</text></g><g><title>main::benchmark::matches_tag_id (2,523,615 samples, 0.34%)</title><rect x="79.2952%" y="4565" width="0.3386%" height="15" fill="rgb(248,22,39)" fg:x="591036991" fg:w="2523615"/><text x="79.5452%" y="4575.50"></text></g><g><title>main::benchmark::get_node_tag_id (2,523,615 samples, 0.34%)</title><rect x="79.2952%" y="4549" width="0.3386%" height="15" fill="rgb(212,154,20)" fg:x="591036991" fg:w="2523615"/><text x="79.5452%" y="4559.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1,206,387 samples, 0.16%)</title><rect x="79.4719%" y="4533" width="0.1619%" height="15" fill="rgb(236,199,50)" fg:x="592354219" fg:w="1206387"/><text x="79.7219%" y="4543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1,206,387 samples, 0.16%)</title><rect x="79.4719%" y="4517" width="0.1619%" height="15" fill="rgb(211,9,17)" fg:x="592354219" fg:w="1206387"/><text x="79.7219%" y="4527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1,206,387 samples, 0.16%)</title><rect x="79.4719%" y="4501" width="0.1619%" height="15" fill="rgb(243,216,36)" fg:x="592354219" fg:w="1206387"/><text x="79.7219%" y="4511.50"></text></g><g><title>hashbrown::map::make_hash (1,206,387 samples, 0.16%)</title><rect x="79.4719%" y="4485" width="0.1619%" height="15" fill="rgb(250,2,10)" fg:x="592354219" fg:w="1206387"/><text x="79.7219%" y="4495.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1,206,387 samples, 0.16%)</title><rect x="79.4719%" y="4469" width="0.1619%" height="15" fill="rgb(226,50,48)" fg:x="592354219" fg:w="1206387"/><text x="79.7219%" y="4479.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1,206,387 samples, 0.16%)</title><rect x="79.4719%" y="4453" width="0.1619%" height="15" fill="rgb(243,81,16)" fg:x="592354219" fg:w="1206387"/><text x="79.7219%" y="4463.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (1,206,387 samples, 0.16%)</title><rect x="79.4719%" y="4437" width="0.1619%" height="15" fill="rgb(250,14,2)" fg:x="592354219" fg:w="1206387"/><text x="79.7219%" y="4447.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (1,206,387 samples, 0.16%)</title><rect x="79.4719%" y="4421" width="0.1619%" height="15" fill="rgb(233,135,29)" fg:x="592354219" fg:w="1206387"/><text x="79.7219%" y="4431.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (1,206,387 samples, 0.16%)</title><rect x="79.4719%" y="4405" width="0.1619%" height="15" fill="rgb(224,64,43)" fg:x="592354219" fg:w="1206387"/><text x="79.7219%" y="4415.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (1,206,387 samples, 0.16%)</title><rect x="79.4719%" y="4389" width="0.1619%" height="15" fill="rgb(238,84,13)" fg:x="592354219" fg:w="1206387"/><text x="79.7219%" y="4399.50"></text></g><g><title>core::hash::Hasher::write_u8 (1,206,387 samples, 0.16%)</title><rect x="79.4719%" y="4373" width="0.1619%" height="15" fill="rgb(253,48,26)" fg:x="592354219" fg:w="1206387"/><text x="79.7219%" y="4383.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,206,387 samples, 0.16%)</title><rect x="79.4719%" y="4357" width="0.1619%" height="15" fill="rgb(205,223,31)" fg:x="592354219" fg:w="1206387"/><text x="79.7219%" y="4367.50"></text></g><g><title>core::hash::sip::u8to64_le (1,206,387 samples, 0.16%)</title><rect x="79.4719%" y="4341" width="0.1619%" height="15" fill="rgb(221,41,32)" fg:x="592354219" fg:w="1206387"/><text x="79.7219%" y="4351.50"></text></g><g><title>alloc::vec::from_elem (2,674,934 samples, 0.36%)</title><rect x="79.6338%" y="4549" width="0.3589%" height="15" fill="rgb(213,158,31)" fg:x="593560606" fg:w="2674934"/><text x="79.8838%" y="4559.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (2,674,934 samples, 0.36%)</title><rect x="79.6338%" y="4533" width="0.3589%" height="15" fill="rgb(245,126,43)" fg:x="593560606" fg:w="2674934"/><text x="79.8838%" y="4543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (2,674,934 samples, 0.36%)</title><rect x="79.6338%" y="4517" width="0.3589%" height="15" fill="rgb(227,7,22)" fg:x="593560606" fg:w="2674934"/><text x="79.8838%" y="4527.50"></text></g><g><title>core::ptr::write (2,674,934 samples, 0.36%)</title><rect x="79.6338%" y="4501" width="0.3589%" height="15" fill="rgb(252,90,44)" fg:x="593560606" fg:w="2674934"/><text x="79.8838%" y="4511.50"></text></g><g><title>[libc.so.6] (2,674,934 samples, 0.36%)</title><rect x="79.6338%" y="4485" width="0.3589%" height="15" fill="rgb(253,91,0)" fg:x="593560606" fg:w="2674934"/><text x="79.8838%" y="4495.50"></text></g><g><title>css_bitvector_compiler::BitVector::is_bit_set (3,876,973 samples, 0.52%)</title><rect x="79.9927%" y="4549" width="0.5201%" height="15" fill="rgb(252,175,49)" fg:x="596235540" fg:w="3876973"/><text x="80.2427%" y="4559.50"></text></g><g><title>css_bitvector_compiler::BitVector::with_capacity (2,545,799 samples, 0.34%)</title><rect x="80.5128%" y="4549" width="0.3416%" height="15" fill="rgb(246,150,1)" fg:x="600112513" fg:w="2545799"/><text x="80.7628%" y="4559.50"></text></g><g><title>alloc::vec::from_elem (2,545,799 samples, 0.34%)</title><rect x="80.5128%" y="4533" width="0.3416%" height="15" fill="rgb(241,192,25)" fg:x="600112513" fg:w="2545799"/><text x="80.7628%" y="4543.50"></text></g><g><title>&lt;u8 as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (2,545,799 samples, 0.34%)</title><rect x="80.5128%" y="4517" width="0.3416%" height="15" fill="rgb(239,187,11)" fg:x="600112513" fg:w="2545799"/><text x="80.7628%" y="4527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (2,545,799 samples, 0.34%)</title><rect x="80.5128%" y="4501" width="0.3416%" height="15" fill="rgb(218,202,51)" fg:x="600112513" fg:w="2545799"/><text x="80.7628%" y="4511.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_zeroed_in (2,545,799 samples, 0.34%)</title><rect x="80.5128%" y="4485" width="0.3416%" height="15" fill="rgb(225,176,8)" fg:x="600112513" fg:w="2545799"/><text x="80.7628%" y="4495.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (2,545,799 samples, 0.34%)</title><rect x="80.5128%" y="4469" width="0.3416%" height="15" fill="rgb(219,122,41)" fg:x="600112513" fg:w="2545799"/><text x="80.7628%" y="4479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (2,545,799 samples, 0.34%)</title><rect x="80.5128%" y="4453" width="0.3416%" height="15" fill="rgb(248,140,20)" fg:x="600112513" fg:w="2545799"/><text x="80.7628%" y="4463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2,545,799 samples, 0.34%)</title><rect x="80.5128%" y="4437" width="0.3416%" height="15" fill="rgb(245,41,37)" fg:x="600112513" fg:w="2545799"/><text x="80.7628%" y="4447.50"></text></g><g><title>alloc::alloc::alloc_zeroed (2,545,799 samples, 0.34%)</title><rect x="80.5128%" y="4421" width="0.3416%" height="15" fill="rgb(235,82,39)" fg:x="600112513" fg:w="2545799"/><text x="80.7628%" y="4431.50"></text></g><g><title>__libc_calloc (2,545,799 samples, 0.34%)</title><rect x="80.5128%" y="4405" width="0.3416%" height="15" fill="rgb(230,108,42)" fg:x="600112513" fg:w="2545799"/><text x="80.7628%" y="4415.50"></text></g><g><title>[libc.so.6] (1,316,462 samples, 0.18%)</title><rect x="80.6778%" y="4389" width="0.1766%" height="15" fill="rgb(215,150,50)" fg:x="601341850" fg:w="1316462"/><text x="80.9278%" y="4399.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1,172,005 samples, 0.16%)</title><rect x="80.9313%" y="4389" width="0.1572%" height="15" fill="rgb(233,212,5)" fg:x="603231930" fg:w="1172005"/><text x="81.1813%" y="4399.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1,172,005 samples, 0.16%)</title><rect x="80.9313%" y="4373" width="0.1572%" height="15" fill="rgb(245,80,22)" fg:x="603231930" fg:w="1172005"/><text x="81.1813%" y="4383.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (2,964,830 samples, 0.40%)</title><rect x="80.8544%" y="4437" width="0.3978%" height="15" fill="rgb(238,129,16)" fg:x="602658312" fg:w="2964830"/><text x="81.1044%" y="4447.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2,964,830 samples, 0.40%)</title><rect x="80.8544%" y="4421" width="0.3978%" height="15" fill="rgb(240,19,0)" fg:x="602658312" fg:w="2964830"/><text x="81.1044%" y="4431.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2,964,830 samples, 0.40%)</title><rect x="80.8544%" y="4405" width="0.3978%" height="15" fill="rgb(232,42,35)" fg:x="602658312" fg:w="2964830"/><text x="81.1044%" y="4415.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1,219,207 samples, 0.16%)</title><rect x="81.0886%" y="4389" width="0.1636%" height="15" fill="rgb(223,130,24)" fg:x="604403935" fg:w="1219207"/><text x="81.3386%" y="4399.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1,219,207 samples, 0.16%)</title><rect x="81.0886%" y="4373" width="0.1636%" height="15" fill="rgb(237,16,22)" fg:x="604403935" fg:w="1219207"/><text x="81.3386%" y="4383.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,260,084 samples, 0.17%)</title><rect x="81.2521%" y="4357" width="0.1691%" height="15" fill="rgb(248,192,20)" fg:x="605623142" fg:w="1260084"/><text x="81.5021%" y="4367.50"></text></g><g><title>core::hash::sip::u8to64_le (1,260,084 samples, 0.17%)</title><rect x="81.2521%" y="4341" width="0.1691%" height="15" fill="rgb(233,167,2)" fg:x="605623142" fg:w="1260084"/><text x="81.5021%" y="4351.50"></text></g><g><title>main::benchmark::matches_class_id (5,088,569 samples, 0.68%)</title><rect x="80.8544%" y="4549" width="0.6827%" height="15" fill="rgb(252,71,44)" fg:x="602658312" fg:w="5088569"/><text x="81.1044%" y="4559.50"></text></g><g><title>main::benchmark::node_has_class_id (5,088,569 samples, 0.68%)</title><rect x="80.8544%" y="4533" width="0.6827%" height="15" fill="rgb(238,37,47)" fg:x="602658312" fg:w="5088569"/><text x="81.1044%" y="4543.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (5,088,569 samples, 0.68%)</title><rect x="80.8544%" y="4517" width="0.6827%" height="15" fill="rgb(214,202,54)" fg:x="602658312" fg:w="5088569"/><text x="81.1044%" y="4527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (5,088,569 samples, 0.68%)</title><rect x="80.8544%" y="4501" width="0.6827%" height="15" fill="rgb(254,165,40)" fg:x="602658312" fg:w="5088569"/><text x="81.1044%" y="4511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (5,088,569 samples, 0.68%)</title><rect x="80.8544%" y="4485" width="0.6827%" height="15" fill="rgb(246,173,38)" fg:x="602658312" fg:w="5088569"/><text x="81.1044%" y="4495.50"></text></g><g><title>hashbrown::map::make_hash (5,088,569 samples, 0.68%)</title><rect x="80.8544%" y="4469" width="0.6827%" height="15" fill="rgb(215,3,27)" fg:x="602658312" fg:w="5088569"/><text x="81.1044%" y="4479.50"></text></g><g><title>core::hash::BuildHasher::hash_one (5,088,569 samples, 0.68%)</title><rect x="80.8544%" y="4453" width="0.6827%" height="15" fill="rgb(239,169,51)" fg:x="602658312" fg:w="5088569"/><text x="81.1044%" y="4463.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2,123,739 samples, 0.28%)</title><rect x="81.2521%" y="4437" width="0.2849%" height="15" fill="rgb(212,5,25)" fg:x="605623142" fg:w="2123739"/><text x="81.5021%" y="4447.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (2,123,739 samples, 0.28%)</title><rect x="81.2521%" y="4421" width="0.2849%" height="15" fill="rgb(243,45,17)" fg:x="605623142" fg:w="2123739"/><text x="81.5021%" y="4431.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (2,123,739 samples, 0.28%)</title><rect x="81.2521%" y="4405" width="0.2849%" height="15" fill="rgb(242,97,9)" fg:x="605623142" fg:w="2123739"/><text x="81.5021%" y="4415.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (2,123,739 samples, 0.28%)</title><rect x="81.2521%" y="4389" width="0.2849%" height="15" fill="rgb(228,71,31)" fg:x="605623142" fg:w="2123739"/><text x="81.5021%" y="4399.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (2,123,739 samples, 0.28%)</title><rect x="81.2521%" y="4373" width="0.2849%" height="15" fill="rgb(252,184,16)" fg:x="605623142" fg:w="2123739"/><text x="81.5021%" y="4383.50"></text></g><g><title>core::hash::Hasher::write_u8 (863,655 samples, 0.12%)</title><rect x="81.4212%" y="4357" width="0.1159%" height="15" fill="rgb(236,169,46)" fg:x="606883226" fg:w="863655"/><text x="81.6712%" y="4367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (863,655 samples, 0.12%)</title><rect x="81.4212%" y="4341" width="0.1159%" height="15" fill="rgb(207,17,47)" fg:x="606883226" fg:w="863655"/><text x="81.6712%" y="4351.50"></text></g><g><title>core::hash::sip::u8to64_le (863,655 samples, 0.12%)</title><rect x="81.4212%" y="4325" width="0.1159%" height="15" fill="rgb(206,201,28)" fg:x="606883226" fg:w="863655"/><text x="81.6712%" y="4335.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1,308,645 samples, 0.18%)</title><rect x="81.5371%" y="4405" width="0.1756%" height="15" fill="rgb(224,184,23)" fg:x="607746881" fg:w="1308645"/><text x="81.7871%" y="4415.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1,308,645 samples, 0.18%)</title><rect x="81.5371%" y="4389" width="0.1756%" height="15" fill="rgb(208,139,48)" fg:x="607746881" fg:w="1308645"/><text x="81.7871%" y="4399.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1,308,645 samples, 0.18%)</title><rect x="81.5371%" y="4373" width="0.1756%" height="15" fill="rgb(208,130,10)" fg:x="607746881" fg:w="1308645"/><text x="81.7871%" y="4383.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1,208,515 samples, 0.16%)</title><rect x="81.7126%" y="4405" width="0.1621%" height="15" fill="rgb(211,213,45)" fg:x="609055526" fg:w="1208515"/><text x="81.9626%" y="4415.50"></text></g><g><title>hashbrown::map::make_hash (5,078,527 samples, 0.68%)</title><rect x="81.5371%" y="4437" width="0.6813%" height="15" fill="rgb(235,100,30)" fg:x="607746881" fg:w="5078527"/><text x="81.7871%" y="4447.50"></text></g><g><title>core::hash::BuildHasher::hash_one (5,078,527 samples, 0.68%)</title><rect x="81.5371%" y="4421" width="0.6813%" height="15" fill="rgb(206,144,31)" fg:x="607746881" fg:w="5078527"/><text x="81.7871%" y="4431.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2,561,367 samples, 0.34%)</title><rect x="81.8748%" y="4405" width="0.3436%" height="15" fill="rgb(224,200,26)" fg:x="610264041" fg:w="2561367"/><text x="82.1248%" y="4415.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (2,561,367 samples, 0.34%)</title><rect x="81.8748%" y="4389" width="0.3436%" height="15" fill="rgb(247,104,53)" fg:x="610264041" fg:w="2561367"/><text x="82.1248%" y="4399.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (2,561,367 samples, 0.34%)</title><rect x="81.8748%" y="4373" width="0.3436%" height="15" fill="rgb(220,14,17)" fg:x="610264041" fg:w="2561367"/><text x="82.1248%" y="4383.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (2,561,367 samples, 0.34%)</title><rect x="81.8748%" y="4357" width="0.3436%" height="15" fill="rgb(230,140,40)" fg:x="610264041" fg:w="2561367"/><text x="82.1248%" y="4367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (2,561,367 samples, 0.34%)</title><rect x="81.8748%" y="4341" width="0.3436%" height="15" fill="rgb(229,2,41)" fg:x="610264041" fg:w="2561367"/><text x="82.1248%" y="4351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2,561,367 samples, 0.34%)</title><rect x="81.8748%" y="4325" width="0.3436%" height="15" fill="rgb(232,89,16)" fg:x="610264041" fg:w="2561367"/><text x="82.1248%" y="4335.50"></text></g><g><title>main::benchmark::process_node_generated_incremental (20,528,214 samples, 2.75%)</title><rect x="79.6338%" y="4565" width="2.7541%" height="15" fill="rgb(247,59,52)" fg:x="593560606" fg:w="20528214"/><text x="79.8838%" y="4575.50">ma..</text></g><g><title>main::benchmark::matches_id_id (6,341,939 samples, 0.85%)</title><rect x="81.5371%" y="4549" width="0.8509%" height="15" fill="rgb(226,110,21)" fg:x="607746881" fg:w="6341939"/><text x="81.7871%" y="4559.50"></text></g><g><title>main::benchmark::get_node_id_id (6,341,939 samples, 0.85%)</title><rect x="81.5371%" y="4533" width="0.8509%" height="15" fill="rgb(224,176,43)" fg:x="607746881" fg:w="6341939"/><text x="81.7871%" y="4543.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (6,341,939 samples, 0.85%)</title><rect x="81.5371%" y="4517" width="0.8509%" height="15" fill="rgb(221,73,6)" fg:x="607746881" fg:w="6341939"/><text x="81.7871%" y="4527.50"></text></g><g><title>main::benchmark::get_node_id_id::_{{closure}} (6,341,939 samples, 0.85%)</title><rect x="81.5371%" y="4501" width="0.8509%" height="15" fill="rgb(232,78,19)" fg:x="607746881" fg:w="6341939"/><text x="81.7871%" y="4511.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (6,341,939 samples, 0.85%)</title><rect x="81.5371%" y="4485" width="0.8509%" height="15" fill="rgb(233,112,48)" fg:x="607746881" fg:w="6341939"/><text x="81.7871%" y="4495.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (6,341,939 samples, 0.85%)</title><rect x="81.5371%" y="4469" width="0.8509%" height="15" fill="rgb(243,131,47)" fg:x="607746881" fg:w="6341939"/><text x="81.7871%" y="4479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (6,341,939 samples, 0.85%)</title><rect x="81.5371%" y="4453" width="0.8509%" height="15" fill="rgb(226,51,1)" fg:x="607746881" fg:w="6341939"/><text x="81.7871%" y="4463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (1,263,412 samples, 0.17%)</title><rect x="82.2184%" y="4437" width="0.1695%" height="15" fill="rgb(247,58,7)" fg:x="612825408" fg:w="1263412"/><text x="82.4684%" y="4447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1,263,412 samples, 0.17%)</title><rect x="82.2184%" y="4421" width="0.1695%" height="15" fill="rgb(209,7,32)" fg:x="612825408" fg:w="1263412"/><text x="82.4684%" y="4431.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1,263,412 samples, 0.17%)</title><rect x="82.2184%" y="4405" width="0.1695%" height="15" fill="rgb(209,39,41)" fg:x="612825408" fg:w="1263412"/><text x="82.4684%" y="4415.50"></text></g><g><title>hashbrown::control::tag::Tag::full (1,263,412 samples, 0.17%)</title><rect x="82.2184%" y="4389" width="0.1695%" height="15" fill="rgb(226,182,46)" fg:x="612825408" fg:w="1263412"/><text x="82.4684%" y="4399.50"></text></g><g><title>css_bitvector_compiler::BitVector::is_bit_set (1,341,658 samples, 0.18%)</title><rect x="82.5528%" y="4533" width="0.1800%" height="15" fill="rgb(230,219,10)" fg:x="615317795" fg:w="1341658"/><text x="82.8028%" y="4543.50"></text></g><g><title>&lt;&amp;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (1,266,744 samples, 0.17%)</title><rect x="82.7328%" y="4501" width="0.1700%" height="15" fill="rgb(227,175,30)" fg:x="616659453" fg:w="1266744"/><text x="82.9828%" y="4511.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::iter (1,266,744 samples, 0.17%)</title><rect x="82.7328%" y="4485" width="0.1700%" height="15" fill="rgb(217,2,50)" fg:x="616659453" fg:w="1266744"/><text x="82.9828%" y="4495.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::iter (1,266,744 samples, 0.17%)</title><rect x="82.7328%" y="4469" width="0.1700%" height="15" fill="rgb(229,160,0)" fg:x="616659453" fg:w="1266744"/><text x="82.9828%" y="4479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::keys (1,266,744 samples, 0.17%)</title><rect x="82.7328%" y="4453" width="0.1700%" height="15" fill="rgb(207,78,37)" fg:x="616659453" fg:w="1266744"/><text x="82.9828%" y="4463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (1,266,744 samples, 0.17%)</title><rect x="82.7328%" y="4437" width="0.1700%" height="15" fill="rgb(225,57,0)" fg:x="616659453" fg:w="1266744"/><text x="82.9828%" y="4447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter (1,266,744 samples, 0.17%)</title><rect x="82.7328%" y="4421" width="0.1700%" height="15" fill="rgb(232,154,2)" fg:x="616659453" fg:w="1266744"/><text x="82.9828%" y="4431.50"></text></g><g><title>hashbrown::raw::RawTableInner::iter (1,266,744 samples, 0.17%)</title><rect x="82.7328%" y="4405" width="0.1700%" height="15" fill="rgb(241,212,25)" fg:x="616659453" fg:w="1266744"/><text x="82.9828%" y="4415.50"></text></g><g><title>main::benchmark::matches_class_id (2,526,928 samples, 0.34%)</title><rect x="82.7328%" y="4533" width="0.3390%" height="15" fill="rgb(226,69,20)" fg:x="616659453" fg:w="2526928"/><text x="82.9828%" y="4543.50"></text></g><g><title>main::benchmark::node_has_class_id (2,526,928 samples, 0.34%)</title><rect x="82.7328%" y="4517" width="0.3390%" height="15" fill="rgb(247,184,54)" fg:x="616659453" fg:w="2526928"/><text x="82.9828%" y="4527.50"></text></g><g><title>&lt;std::collections::hash::set::Iter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,260,184 samples, 0.17%)</title><rect x="82.9028%" y="4501" width="0.1691%" height="15" fill="rgb(210,145,0)" fg:x="617926197" fg:w="1260184"/><text x="83.1528%" y="4511.50"></text></g><g><title>&lt;hashbrown::set::Iter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,260,184 samples, 0.17%)</title><rect x="82.9028%" y="4485" width="0.1691%" height="15" fill="rgb(253,82,12)" fg:x="617926197" fg:w="1260184"/><text x="83.1528%" y="4495.50"></text></g><g><title>&lt;hashbrown::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,260,184 samples, 0.17%)</title><rect x="82.9028%" y="4469" width="0.1691%" height="15" fill="rgb(245,42,11)" fg:x="617926197" fg:w="1260184"/><text x="83.1528%" y="4479.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,260,184 samples, 0.17%)</title><rect x="82.9028%" y="4453" width="0.1691%" height="15" fill="rgb(219,147,32)" fg:x="617926197" fg:w="1260184"/><text x="83.1528%" y="4463.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,260,184 samples, 0.17%)</title><rect x="82.9028%" y="4437" width="0.1691%" height="15" fill="rgb(246,12,7)" fg:x="617926197" fg:w="1260184"/><text x="83.1528%" y="4447.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1,303,323 samples, 0.17%)</title><rect x="83.0718%" y="4389" width="0.1749%" height="15" fill="rgb(243,50,9)" fg:x="619186381" fg:w="1303323"/><text x="83.3218%" y="4399.50"></text></g><g><title>main::benchmark::process_node_generated_incremental (8,862,272 samples, 1.19%)</title><rect x="82.3879%" y="4549" width="1.1890%" height="15" fill="rgb(219,149,6)" fg:x="614088820" fg:w="8862272"/><text x="82.6379%" y="4559.50"></text></g><g><title>main::benchmark::matches_id_id (3,764,711 samples, 0.51%)</title><rect x="83.0718%" y="4533" width="0.5051%" height="15" fill="rgb(241,51,42)" fg:x="619186381" fg:w="3764711"/><text x="83.3218%" y="4543.50"></text></g><g><title>main::benchmark::get_node_id_id (3,764,711 samples, 0.51%)</title><rect x="83.0718%" y="4517" width="0.5051%" height="15" fill="rgb(226,128,27)" fg:x="619186381" fg:w="3764711"/><text x="83.3218%" y="4527.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (3,764,711 samples, 0.51%)</title><rect x="83.0718%" y="4501" width="0.5051%" height="15" fill="rgb(244,144,4)" fg:x="619186381" fg:w="3764711"/><text x="83.3218%" y="4511.50"></text></g><g><title>main::benchmark::get_node_id_id::_{{closure}} (3,764,711 samples, 0.51%)</title><rect x="83.0718%" y="4485" width="0.5051%" height="15" fill="rgb(221,4,13)" fg:x="619186381" fg:w="3764711"/><text x="83.3218%" y="4495.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (3,764,711 samples, 0.51%)</title><rect x="83.0718%" y="4469" width="0.5051%" height="15" fill="rgb(208,170,28)" fg:x="619186381" fg:w="3764711"/><text x="83.3218%" y="4479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (3,764,711 samples, 0.51%)</title><rect x="83.0718%" y="4453" width="0.5051%" height="15" fill="rgb(226,131,13)" fg:x="619186381" fg:w="3764711"/><text x="83.3218%" y="4463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (3,764,711 samples, 0.51%)</title><rect x="83.0718%" y="4437" width="0.5051%" height="15" fill="rgb(215,72,41)" fg:x="619186381" fg:w="3764711"/><text x="83.3218%" y="4447.50"></text></g><g><title>hashbrown::map::make_hash (3,764,711 samples, 0.51%)</title><rect x="83.0718%" y="4421" width="0.5051%" height="15" fill="rgb(243,108,20)" fg:x="619186381" fg:w="3764711"/><text x="83.3218%" y="4431.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3,764,711 samples, 0.51%)</title><rect x="83.0718%" y="4405" width="0.5051%" height="15" fill="rgb(230,189,17)" fg:x="619186381" fg:w="3764711"/><text x="83.3218%" y="4415.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2,461,388 samples, 0.33%)</title><rect x="83.2467%" y="4389" width="0.3302%" height="15" fill="rgb(220,50,17)" fg:x="620489704" fg:w="2461388"/><text x="83.4967%" y="4399.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (2,461,388 samples, 0.33%)</title><rect x="83.2467%" y="4373" width="0.3302%" height="15" fill="rgb(248,152,48)" fg:x="620489704" fg:w="2461388"/><text x="83.4967%" y="4383.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (2,461,388 samples, 0.33%)</title><rect x="83.2467%" y="4357" width="0.3302%" height="15" fill="rgb(244,91,11)" fg:x="620489704" fg:w="2461388"/><text x="83.4967%" y="4367.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (2,461,388 samples, 0.33%)</title><rect x="83.2467%" y="4341" width="0.3302%" height="15" fill="rgb(220,157,5)" fg:x="620489704" fg:w="2461388"/><text x="83.4967%" y="4351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (2,461,388 samples, 0.33%)</title><rect x="83.2467%" y="4325" width="0.3302%" height="15" fill="rgb(253,137,8)" fg:x="620489704" fg:w="2461388"/><text x="83.4967%" y="4335.50"></text></g><g><title>core::hash::Hasher::write_u8 (1,224,896 samples, 0.16%)</title><rect x="83.4126%" y="4309" width="0.1643%" height="15" fill="rgb(217,137,51)" fg:x="621726196" fg:w="1224896"/><text x="83.6626%" y="4319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,224,896 samples, 0.16%)</title><rect x="83.4126%" y="4293" width="0.1643%" height="15" fill="rgb(218,209,53)" fg:x="621726196" fg:w="1224896"/><text x="83.6626%" y="4303.50"></text></g><g><title>core::hash::sip::u8to64_le (1,224,896 samples, 0.16%)</title><rect x="83.4126%" y="4277" width="0.1643%" height="15" fill="rgb(249,137,25)" fg:x="621726196" fg:w="1224896"/><text x="83.6626%" y="4287.50"></text></g><g><title>&lt;css_bitvector_compiler::BitVector as core::clone::Clone&gt;::clone (1,281,121 samples, 0.17%)</title><rect x="83.9136%" y="4517" width="0.1719%" height="15" fill="rgb(239,155,26)" fg:x="625460903" fg:w="1281121"/><text x="84.1636%" y="4527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,281,121 samples, 0.17%)</title><rect x="83.9136%" y="4501" width="0.1719%" height="15" fill="rgb(227,85,46)" fg:x="625460903" fg:w="1281121"/><text x="84.1636%" y="4511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,281,121 samples, 0.17%)</title><rect x="83.9136%" y="4485" width="0.1719%" height="15" fill="rgb(251,107,43)" fg:x="625460903" fg:w="1281121"/><text x="84.1636%" y="4495.50"></text></g><g><title>alloc::slice::hack::to_vec (1,281,121 samples, 0.17%)</title><rect x="83.9136%" y="4469" width="0.1719%" height="15" fill="rgb(234,170,33)" fg:x="625460903" fg:w="1281121"/><text x="84.1636%" y="4479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1,281,121 samples, 0.17%)</title><rect x="83.9136%" y="4453" width="0.1719%" height="15" fill="rgb(206,29,35)" fg:x="625460903" fg:w="1281121"/><text x="84.1636%" y="4463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,281,121 samples, 0.17%)</title><rect x="83.9136%" y="4437" width="0.1719%" height="15" fill="rgb(227,138,25)" fg:x="625460903" fg:w="1281121"/><text x="84.1636%" y="4447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,281,121 samples, 0.17%)</title><rect x="83.9136%" y="4421" width="0.1719%" height="15" fill="rgb(249,131,35)" fg:x="625460903" fg:w="1281121"/><text x="84.1636%" y="4431.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (1,281,121 samples, 0.17%)</title><rect x="83.9136%" y="4405" width="0.1719%" height="15" fill="rgb(239,6,40)" fg:x="625460903" fg:w="1281121"/><text x="84.1636%" y="4415.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1,281,121 samples, 0.17%)</title><rect x="83.9136%" y="4389" width="0.1719%" height="15" fill="rgb(246,136,47)" fg:x="625460903" fg:w="1281121"/><text x="84.1636%" y="4399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,281,121 samples, 0.17%)</title><rect x="83.9136%" y="4373" width="0.1719%" height="15" fill="rgb(253,58,26)" fg:x="625460903" fg:w="1281121"/><text x="84.1636%" y="4383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,281,121 samples, 0.17%)</title><rect x="83.9136%" y="4357" width="0.1719%" height="15" fill="rgb(237,141,10)" fg:x="625460903" fg:w="1281121"/><text x="84.1636%" y="4367.50"></text></g><g><title>alloc::alloc::alloc (1,281,121 samples, 0.17%)</title><rect x="83.9136%" y="4341" width="0.1719%" height="15" fill="rgb(234,156,12)" fg:x="625460903" fg:w="1281121"/><text x="84.1636%" y="4351.50"></text></g><g><title>__rdl_alloc (1,281,121 samples, 0.17%)</title><rect x="83.9136%" y="4325" width="0.1719%" height="15" fill="rgb(243,224,36)" fg:x="625460903" fg:w="1281121"/><text x="84.1636%" y="4335.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1,281,121 samples, 0.17%)</title><rect x="83.9136%" y="4309" width="0.1719%" height="15" fill="rgb(205,229,51)" fg:x="625460903" fg:w="1281121"/><text x="84.1636%" y="4319.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (3,775,403 samples, 0.51%)</title><rect x="84.0855%" y="4405" width="0.5065%" height="15" fill="rgb(223,189,4)" fg:x="626742024" fg:w="3775403"/><text x="84.3355%" y="4415.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (3,775,403 samples, 0.51%)</title><rect x="84.0855%" y="4389" width="0.5065%" height="15" fill="rgb(249,167,54)" fg:x="626742024" fg:w="3775403"/><text x="84.3355%" y="4399.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3,775,403 samples, 0.51%)</title><rect x="84.0855%" y="4373" width="0.5065%" height="15" fill="rgb(218,34,28)" fg:x="626742024" fg:w="3775403"/><text x="84.3355%" y="4383.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2,600,637 samples, 0.35%)</title><rect x="84.2431%" y="4357" width="0.3489%" height="15" fill="rgb(232,109,42)" fg:x="627916790" fg:w="2600637"/><text x="84.4931%" y="4367.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1,265,736 samples, 0.17%)</title><rect x="84.4222%" y="4341" width="0.1698%" height="15" fill="rgb(248,214,46)" fg:x="629251691" fg:w="1265736"/><text x="84.6722%" y="4351.50"></text></g><g><title>hashbrown::map::make_hash (4,901,513 samples, 0.66%)</title><rect x="84.0855%" y="4437" width="0.6576%" height="15" fill="rgb(244,216,40)" fg:x="626742024" fg:w="4901513"/><text x="84.3355%" y="4447.50"></text></g><g><title>core::hash::BuildHasher::hash_one (4,901,513 samples, 0.66%)</title><rect x="84.0855%" y="4421" width="0.6576%" height="15" fill="rgb(231,226,31)" fg:x="626742024" fg:w="4901513"/><text x="84.3355%" y="4431.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1,126,110 samples, 0.15%)</title><rect x="84.5920%" y="4405" width="0.1511%" height="15" fill="rgb(238,38,43)" fg:x="630517427" fg:w="1126110"/><text x="84.8420%" y="4415.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (1,126,110 samples, 0.15%)</title><rect x="84.5920%" y="4389" width="0.1511%" height="15" fill="rgb(208,88,43)" fg:x="630517427" fg:w="1126110"/><text x="84.8420%" y="4399.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (1,126,110 samples, 0.15%)</title><rect x="84.5920%" y="4373" width="0.1511%" height="15" fill="rgb(205,136,37)" fg:x="630517427" fg:w="1126110"/><text x="84.8420%" y="4383.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (1,126,110 samples, 0.15%)</title><rect x="84.5920%" y="4357" width="0.1511%" height="15" fill="rgb(237,34,14)" fg:x="630517427" fg:w="1126110"/><text x="84.8420%" y="4367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (1,126,110 samples, 0.15%)</title><rect x="84.5920%" y="4341" width="0.1511%" height="15" fill="rgb(236,193,44)" fg:x="630517427" fg:w="1126110"/><text x="84.8420%" y="4351.50"></text></g><g><title>core::hash::Hasher::write_u8 (1,126,110 samples, 0.15%)</title><rect x="84.5920%" y="4325" width="0.1511%" height="15" fill="rgb(231,48,10)" fg:x="630517427" fg:w="1126110"/><text x="84.8420%" y="4335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,126,110 samples, 0.15%)</title><rect x="84.5920%" y="4309" width="0.1511%" height="15" fill="rgb(213,141,34)" fg:x="630517427" fg:w="1126110"/><text x="84.8420%" y="4319.50"></text></g><g><title>core::hash::sip::u8to64_le (1,126,110 samples, 0.15%)</title><rect x="84.5920%" y="4293" width="0.1511%" height="15" fill="rgb(249,130,34)" fg:x="630517427" fg:w="1126110"/><text x="84.8420%" y="4303.50"></text></g><g><title>main::benchmark::matches_class_id (6,249,805 samples, 0.84%)</title><rect x="84.0855%" y="4517" width="0.8385%" height="15" fill="rgb(219,42,41)" fg:x="626742024" fg:w="6249805"/><text x="84.3355%" y="4527.50"></text></g><g><title>main::benchmark::node_has_class_id (6,249,805 samples, 0.84%)</title><rect x="84.0855%" y="4501" width="0.8385%" height="15" fill="rgb(224,100,54)" fg:x="626742024" fg:w="6249805"/><text x="84.3355%" y="4511.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (6,249,805 samples, 0.84%)</title><rect x="84.0855%" y="4485" width="0.8385%" height="15" fill="rgb(229,200,27)" fg:x="626742024" fg:w="6249805"/><text x="84.3355%" y="4495.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (6,249,805 samples, 0.84%)</title><rect x="84.0855%" y="4469" width="0.8385%" height="15" fill="rgb(217,118,10)" fg:x="626742024" fg:w="6249805"/><text x="84.3355%" y="4479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (6,249,805 samples, 0.84%)</title><rect x="84.0855%" y="4453" width="0.8385%" height="15" fill="rgb(206,22,3)" fg:x="626742024" fg:w="6249805"/><text x="84.3355%" y="4463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (1,348,292 samples, 0.18%)</title><rect x="84.7431%" y="4437" width="0.1809%" height="15" fill="rgb(232,163,46)" fg:x="631643537" fg:w="1348292"/><text x="84.9931%" y="4447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1,348,292 samples, 0.18%)</title><rect x="84.7431%" y="4421" width="0.1809%" height="15" fill="rgb(206,95,13)" fg:x="631643537" fg:w="1348292"/><text x="84.9931%" y="4431.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1,348,292 samples, 0.18%)</title><rect x="84.7431%" y="4405" width="0.1809%" height="15" fill="rgb(253,154,18)" fg:x="631643537" fg:w="1348292"/><text x="84.9931%" y="4415.50"></text></g><g><title>hashbrown::control::tag::Tag::full (1,348,292 samples, 0.18%)</title><rect x="84.7431%" y="4389" width="0.1809%" height="15" fill="rgb(219,32,23)" fg:x="631643537" fg:w="1348292"/><text x="84.9931%" y="4399.50"></text></g><g><title>main::benchmark::get_string_to_id_map (1,209,247 samples, 0.16%)</title><rect x="84.9240%" y="4453" width="0.1622%" height="15" fill="rgb(230,191,45)" fg:x="632991829" fg:w="1209247"/><text x="85.1740%" y="4463.50"></text></g><g><title>std::sync::once_lock::OnceLock&lt;T&gt;::get_or_init (1,209,247 samples, 0.16%)</title><rect x="84.9240%" y="4437" width="0.1622%" height="15" fill="rgb(229,64,36)" fg:x="632991829" fg:w="1209247"/><text x="85.1740%" y="4447.50"></text></g><g><title>std::sync::once_lock::OnceLock&lt;T&gt;::get_or_try_init (1,209,247 samples, 0.16%)</title><rect x="84.9240%" y="4421" width="0.1622%" height="15" fill="rgb(205,129,25)" fg:x="632991829" fg:w="1209247"/><text x="85.1740%" y="4431.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1,263,927 samples, 0.17%)</title><rect x="85.0862%" y="4309" width="0.1696%" height="15" fill="rgb(254,112,7)" fg:x="634201076" fg:w="1263927"/><text x="85.3362%" y="4319.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (2,608,362 samples, 0.35%)</title><rect x="85.0862%" y="4373" width="0.3499%" height="15" fill="rgb(226,53,48)" fg:x="634201076" fg:w="2608362"/><text x="85.3362%" y="4383.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2,608,362 samples, 0.35%)</title><rect x="85.0862%" y="4357" width="0.3499%" height="15" fill="rgb(214,153,38)" fg:x="634201076" fg:w="2608362"/><text x="85.3362%" y="4367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2,608,362 samples, 0.35%)</title><rect x="85.0862%" y="4341" width="0.3499%" height="15" fill="rgb(243,101,7)" fg:x="634201076" fg:w="2608362"/><text x="85.3362%" y="4351.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2,608,362 samples, 0.35%)</title><rect x="85.0862%" y="4325" width="0.3499%" height="15" fill="rgb(240,140,22)" fg:x="634201076" fg:w="2608362"/><text x="85.3362%" y="4335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1,344,435 samples, 0.18%)</title><rect x="85.2558%" y="4309" width="0.1804%" height="15" fill="rgb(235,114,2)" fg:x="635465003" fg:w="1344435"/><text x="85.5058%" y="4319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2,644,396 samples, 0.35%)</title><rect x="85.4362%" y="4293" width="0.3548%" height="15" fill="rgb(242,59,12)" fg:x="636809438" fg:w="2644396"/><text x="85.6862%" y="4303.50"></text></g><g><title>core::hash::sip::u8to64_le (1,330,822 samples, 0.18%)</title><rect x="85.6124%" y="4277" width="0.1785%" height="15" fill="rgb(252,134,9)" fg:x="638123012" fg:w="1330822"/><text x="85.8624%" y="4287.50"></text></g><g><title>hashbrown::map::make_hash (6,599,889 samples, 0.89%)</title><rect x="85.0862%" y="4405" width="0.8855%" height="15" fill="rgb(236,4,44)" fg:x="634201076" fg:w="6599889"/><text x="85.3362%" y="4415.50"></text></g><g><title>core::hash::BuildHasher::hash_one (6,599,889 samples, 0.89%)</title><rect x="85.0862%" y="4389" width="0.8855%" height="15" fill="rgb(254,172,41)" fg:x="634201076" fg:w="6599889"/><text x="85.3362%" y="4399.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3,991,527 samples, 0.54%)</title><rect x="85.4362%" y="4373" width="0.5355%" height="15" fill="rgb(244,63,20)" fg:x="636809438" fg:w="3991527"/><text x="85.6862%" y="4383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (3,991,527 samples, 0.54%)</title><rect x="85.4362%" y="4357" width="0.5355%" height="15" fill="rgb(250,73,31)" fg:x="636809438" fg:w="3991527"/><text x="85.6862%" y="4367.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (3,991,527 samples, 0.54%)</title><rect x="85.4362%" y="4341" width="0.5355%" height="15" fill="rgb(241,38,36)" fg:x="636809438" fg:w="3991527"/><text x="85.6862%" y="4351.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (3,991,527 samples, 0.54%)</title><rect x="85.4362%" y="4325" width="0.5355%" height="15" fill="rgb(245,211,2)" fg:x="636809438" fg:w="3991527"/><text x="85.6862%" y="4335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (3,991,527 samples, 0.54%)</title><rect x="85.4362%" y="4309" width="0.5355%" height="15" fill="rgb(206,120,28)" fg:x="636809438" fg:w="3991527"/><text x="85.6862%" y="4319.50"></text></g><g><title>core::hash::Hasher::write_u8 (1,347,131 samples, 0.18%)</title><rect x="85.7910%" y="4293" width="0.1807%" height="15" fill="rgb(211,59,34)" fg:x="639453834" fg:w="1347131"/><text x="86.0410%" y="4303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,347,131 samples, 0.18%)</title><rect x="85.7910%" y="4277" width="0.1807%" height="15" fill="rgb(233,168,5)" fg:x="639453834" fg:w="1347131"/><text x="86.0410%" y="4287.50"></text></g><g><title>main::benchmark::process_node_generated_incremental (18,972,466 samples, 2.55%)</title><rect x="83.5769%" y="4533" width="2.5454%" height="15" fill="rgb(234,33,13)" fg:x="622951092" fg:w="18972466"/><text x="83.8269%" y="4543.50">ma..</text></g><g><title>main::benchmark::matches_id_id (8,931,729 samples, 1.20%)</title><rect x="84.9240%" y="4517" width="1.1983%" height="15" fill="rgb(231,150,26)" fg:x="632991829" fg:w="8931729"/><text x="85.1740%" y="4527.50"></text></g><g><title>main::benchmark::get_node_id_id (8,931,729 samples, 1.20%)</title><rect x="84.9240%" y="4501" width="1.1983%" height="15" fill="rgb(217,191,4)" fg:x="632991829" fg:w="8931729"/><text x="85.1740%" y="4511.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (8,931,729 samples, 1.20%)</title><rect x="84.9240%" y="4485" width="1.1983%" height="15" fill="rgb(246,198,38)" fg:x="632991829" fg:w="8931729"/><text x="85.1740%" y="4495.50"></text></g><g><title>main::benchmark::get_node_id_id::_{{closure}} (8,931,729 samples, 1.20%)</title><rect x="84.9240%" y="4469" width="1.1983%" height="15" fill="rgb(245,64,37)" fg:x="632991829" fg:w="8931729"/><text x="85.1740%" y="4479.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (7,722,482 samples, 1.04%)</title><rect x="85.0862%" y="4453" width="1.0361%" height="15" fill="rgb(250,30,36)" fg:x="634201076" fg:w="7722482"/><text x="85.3362%" y="4463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (7,722,482 samples, 1.04%)</title><rect x="85.0862%" y="4437" width="1.0361%" height="15" fill="rgb(217,86,53)" fg:x="634201076" fg:w="7722482"/><text x="85.3362%" y="4447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (7,722,482 samples, 1.04%)</title><rect x="85.0862%" y="4421" width="1.0361%" height="15" fill="rgb(228,157,16)" fg:x="634201076" fg:w="7722482"/><text x="85.3362%" y="4431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (1,122,593 samples, 0.15%)</title><rect x="85.9717%" y="4405" width="0.1506%" height="15" fill="rgb(217,59,31)" fg:x="640800965" fg:w="1122593"/><text x="86.2217%" y="4415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1,122,593 samples, 0.15%)</title><rect x="85.9717%" y="4389" width="0.1506%" height="15" fill="rgb(237,138,41)" fg:x="640800965" fg:w="1122593"/><text x="86.2217%" y="4399.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1,122,593 samples, 0.15%)</title><rect x="85.9717%" y="4373" width="0.1506%" height="15" fill="rgb(227,91,49)" fg:x="640800965" fg:w="1122593"/><text x="86.2217%" y="4383.50"></text></g><g><title>hashbrown::control::group::sse2::Group::load (1,122,593 samples, 0.15%)</title><rect x="85.9717%" y="4357" width="0.1506%" height="15" fill="rgb(247,21,44)" fg:x="640800965" fg:w="1122593"/><text x="86.2217%" y="4367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1,122,593 samples, 0.15%)</title><rect x="85.9717%" y="4341" width="0.1506%" height="15" fill="rgb(219,210,51)" fg:x="640800965" fg:w="1122593"/><text x="86.2217%" y="4351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,122,593 samples, 0.15%)</title><rect x="85.9717%" y="4325" width="0.1506%" height="15" fill="rgb(209,140,6)" fg:x="640800965" fg:w="1122593"/><text x="86.2217%" y="4335.50"></text></g><g><title>alloc::vec::from_elem (1,318,651 samples, 0.18%)</title><rect x="86.2867%" y="4501" width="0.1769%" height="15" fill="rgb(221,188,24)" fg:x="643148758" fg:w="1318651"/><text x="86.5367%" y="4511.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (1,318,651 samples, 0.18%)</title><rect x="86.2867%" y="4485" width="0.1769%" height="15" fill="rgb(232,154,20)" fg:x="643148758" fg:w="1318651"/><text x="86.5367%" y="4495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,318,651 samples, 0.18%)</title><rect x="86.2867%" y="4469" width="0.1769%" height="15" fill="rgb(244,137,50)" fg:x="643148758" fg:w="1318651"/><text x="86.5367%" y="4479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,318,651 samples, 0.18%)</title><rect x="86.2867%" y="4453" width="0.1769%" height="15" fill="rgb(225,185,43)" fg:x="643148758" fg:w="1318651"/><text x="86.5367%" y="4463.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (1,318,651 samples, 0.18%)</title><rect x="86.2867%" y="4437" width="0.1769%" height="15" fill="rgb(213,205,38)" fg:x="643148758" fg:w="1318651"/><text x="86.5367%" y="4447.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1,318,651 samples, 0.18%)</title><rect x="86.2867%" y="4421" width="0.1769%" height="15" fill="rgb(236,73,12)" fg:x="643148758" fg:w="1318651"/><text x="86.5367%" y="4431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,318,651 samples, 0.18%)</title><rect x="86.2867%" y="4405" width="0.1769%" height="15" fill="rgb(235,219,13)" fg:x="643148758" fg:w="1318651"/><text x="86.5367%" y="4415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,318,651 samples, 0.18%)</title><rect x="86.2867%" y="4389" width="0.1769%" height="15" fill="rgb(218,59,36)" fg:x="643148758" fg:w="1318651"/><text x="86.5367%" y="4399.50"></text></g><g><title>alloc::alloc::alloc (1,318,651 samples, 0.18%)</title><rect x="86.2867%" y="4373" width="0.1769%" height="15" fill="rgb(205,110,39)" fg:x="643148758" fg:w="1318651"/><text x="86.5367%" y="4383.50"></text></g><g><title>malloc (1,318,651 samples, 0.18%)</title><rect x="86.2867%" y="4357" width="0.1769%" height="15" fill="rgb(218,206,42)" fg:x="643148758" fg:w="1318651"/><text x="86.5367%" y="4367.50"></text></g><g><title>[libc.so.6] (1,318,651 samples, 0.18%)</title><rect x="86.2867%" y="4341" width="0.1769%" height="15" fill="rgb(248,125,24)" fg:x="643148758" fg:w="1318651"/><text x="86.5367%" y="4351.50"></text></g><g><title>css_bitvector_compiler::BitVector::is_bit_set (3,601,851 samples, 0.48%)</title><rect x="86.4636%" y="4501" width="0.4832%" height="15" fill="rgb(242,28,27)" fg:x="644467409" fg:w="3601851"/><text x="86.7136%" y="4511.50"></text></g><g><title>main::benchmark::matches_class_id (1,265,182 samples, 0.17%)</title><rect x="86.9468%" y="4501" width="0.1697%" height="15" fill="rgb(216,228,15)" fg:x="648069260" fg:w="1265182"/><text x="87.1968%" y="4511.50"></text></g><g><title>main::benchmark::node_has_class_id (1,265,182 samples, 0.17%)</title><rect x="86.9468%" y="4485" width="0.1697%" height="15" fill="rgb(235,116,46)" fg:x="648069260" fg:w="1265182"/><text x="87.1968%" y="4495.50"></text></g><g><title>&lt;std::collections::hash::set::Iter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,265,182 samples, 0.17%)</title><rect x="86.9468%" y="4469" width="0.1697%" height="15" fill="rgb(224,18,32)" fg:x="648069260" fg:w="1265182"/><text x="87.1968%" y="4479.50"></text></g><g><title>&lt;hashbrown::set::Iter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,265,182 samples, 0.17%)</title><rect x="86.9468%" y="4453" width="0.1697%" height="15" fill="rgb(252,5,12)" fg:x="648069260" fg:w="1265182"/><text x="87.1968%" y="4463.50"></text></g><g><title>&lt;hashbrown::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,265,182 samples, 0.17%)</title><rect x="86.9468%" y="4437" width="0.1697%" height="15" fill="rgb(251,36,5)" fg:x="648069260" fg:w="1265182"/><text x="87.1968%" y="4447.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,265,182 samples, 0.17%)</title><rect x="86.9468%" y="4421" width="0.1697%" height="15" fill="rgb(217,53,14)" fg:x="648069260" fg:w="1265182"/><text x="87.1968%" y="4431.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,265,182 samples, 0.17%)</title><rect x="86.9468%" y="4405" width="0.1697%" height="15" fill="rgb(215,86,45)" fg:x="648069260" fg:w="1265182"/><text x="87.1968%" y="4415.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1,235,259 samples, 0.17%)</title><rect x="87.1166%" y="4357" width="0.1657%" height="15" fill="rgb(242,169,11)" fg:x="649334442" fg:w="1235259"/><text x="87.3666%" y="4367.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1,235,259 samples, 0.17%)</title><rect x="87.1166%" y="4341" width="0.1657%" height="15" fill="rgb(211,213,45)" fg:x="649334442" fg:w="1235259"/><text x="87.3666%" y="4351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1,235,259 samples, 0.17%)</title><rect x="87.1166%" y="4325" width="0.1657%" height="15" fill="rgb(205,88,11)" fg:x="649334442" fg:w="1235259"/><text x="87.3666%" y="4335.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1,235,259 samples, 0.17%)</title><rect x="87.1166%" y="4309" width="0.1657%" height="15" fill="rgb(252,69,26)" fg:x="649334442" fg:w="1235259"/><text x="87.3666%" y="4319.50"></text></g><g><title>hashbrown::map::make_hash (5,174,183 samples, 0.69%)</title><rect x="87.1166%" y="4389" width="0.6942%" height="15" fill="rgb(246,123,37)" fg:x="649334442" fg:w="5174183"/><text x="87.3666%" y="4399.50"></text></g><g><title>core::hash::BuildHasher::hash_one (5,174,183 samples, 0.69%)</title><rect x="87.1166%" y="4373" width="0.6942%" height="15" fill="rgb(212,205,5)" fg:x="649334442" fg:w="5174183"/><text x="87.3666%" y="4383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3,938,924 samples, 0.53%)</title><rect x="87.2823%" y="4357" width="0.5285%" height="15" fill="rgb(253,148,0)" fg:x="650569701" fg:w="3938924"/><text x="87.5323%" y="4367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (3,938,924 samples, 0.53%)</title><rect x="87.2823%" y="4341" width="0.5285%" height="15" fill="rgb(239,22,4)" fg:x="650569701" fg:w="3938924"/><text x="87.5323%" y="4351.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (3,938,924 samples, 0.53%)</title><rect x="87.2823%" y="4325" width="0.5285%" height="15" fill="rgb(226,26,53)" fg:x="650569701" fg:w="3938924"/><text x="87.5323%" y="4335.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (3,938,924 samples, 0.53%)</title><rect x="87.2823%" y="4309" width="0.5285%" height="15" fill="rgb(225,229,45)" fg:x="650569701" fg:w="3938924"/><text x="87.5323%" y="4319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (3,938,924 samples, 0.53%)</title><rect x="87.2823%" y="4293" width="0.5285%" height="15" fill="rgb(220,60,37)" fg:x="650569701" fg:w="3938924"/><text x="87.5323%" y="4303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3,938,924 samples, 0.53%)</title><rect x="87.2823%" y="4277" width="0.5285%" height="15" fill="rgb(217,180,35)" fg:x="650569701" fg:w="3938924"/><text x="87.5323%" y="4287.50"></text></g><g><title>main::benchmark::invoke_incremental_layout (220,594,766 samples, 29.60%)</title><rect x="58.5464%" y="4821" width="29.5956%" height="15" fill="rgb(229,7,53)" fg:x="436382876" fg:w="220594766"/><text x="58.7964%" y="4831.50">main::benchmark::invoke_incremental_layout</text></g><g><title>main::benchmark::process_tree_incremental_with_stats (220,594,766 samples, 29.60%)</title><rect x="58.5464%" y="4805" width="29.5956%" height="15" fill="rgb(254,137,3)" fg:x="436382876" fg:w="220594766"/><text x="58.7964%" y="4815.50">main::benchmark::process_tree_incremental_with_s..</text></g><g><title>main::benchmark::process_tree_recursive_incremental (220,594,766 samples, 29.60%)</title><rect x="58.5464%" y="4789" width="29.5956%" height="15" fill="rgb(215,140,41)" fg:x="436382876" fg:w="220594766"/><text x="58.7964%" y="4799.50">main::benchmark::process_tree_recursive_incremen..</text></g><g><title>main::benchmark::process_tree_recursive_incremental (219,303,499 samples, 29.42%)</title><rect x="58.7196%" y="4773" width="29.4224%" height="15" fill="rgb(250,80,15)" fg:x="437674143" fg:w="219303499"/><text x="58.9696%" y="4783.50">main::benchmark::process_tree_recursive_increme..</text></g><g><title>main::benchmark::process_tree_recursive_incremental (219,303,499 samples, 29.42%)</title><rect x="58.7196%" y="4757" width="29.4224%" height="15" fill="rgb(252,191,6)" fg:x="437674143" fg:w="219303499"/><text x="58.9696%" y="4767.50">main::benchmark::process_tree_recursive_increme..</text></g><g><title>main::benchmark::process_tree_recursive_incremental (219,303,499 samples, 29.42%)</title><rect x="58.7196%" y="4741" width="29.4224%" height="15" fill="rgb(246,217,18)" fg:x="437674143" fg:w="219303499"/><text x="58.9696%" y="4751.50">main::benchmark::process_tree_recursive_increme..</text></g><g><title>main::benchmark::process_tree_recursive_incremental (213,651,203 samples, 28.66%)</title><rect x="59.4780%" y="4725" width="28.6641%" height="15" fill="rgb(223,93,7)" fg:x="443326439" fg:w="213651203"/><text x="59.7280%" y="4735.50">main::benchmark::process_tree_recursive_increm..</text></g><g><title>main::benchmark::process_tree_recursive_incremental (212,378,330 samples, 28.49%)</title><rect x="59.6487%" y="4709" width="28.4933%" height="15" fill="rgb(225,55,52)" fg:x="444599312" fg:w="212378330"/><text x="59.8987%" y="4719.50">main::benchmark::process_tree_recursive_increm..</text></g><g><title>main::benchmark::process_tree_recursive_incremental (208,681,850 samples, 28.00%)</title><rect x="60.1447%" y="4693" width="27.9974%" height="15" fill="rgb(240,31,24)" fg:x="448295792" fg:w="208681850"/><text x="60.3947%" y="4703.50">main::benchmark::process_tree_recursive_incre..</text></g><g><title>main::benchmark::process_tree_recursive_incremental (204,982,651 samples, 27.50%)</title><rect x="60.6410%" y="4677" width="27.5011%" height="15" fill="rgb(205,56,52)" fg:x="451994991" fg:w="204982651"/><text x="60.8910%" y="4687.50">main::benchmark::process_tree_recursive_incr..</text></g><g><title>main::benchmark::process_tree_recursive_incremental (202,615,062 samples, 27.18%)</title><rect x="60.9586%" y="4661" width="27.1834%" height="15" fill="rgb(246,146,12)" fg:x="454362580" fg:w="202615062"/><text x="61.2086%" y="4671.50">main::benchmark::process_tree_recursive_incr..</text></g><g><title>main::benchmark::process_tree_recursive_incremental (196,692,296 samples, 26.39%)</title><rect x="61.7532%" y="4645" width="26.3888%" height="15" fill="rgb(239,84,36)" fg:x="460285346" fg:w="196692296"/><text x="62.0032%" y="4655.50">main::benchmark::process_tree_recursive_in..</text></g><g><title>main::benchmark::process_tree_recursive_incremental (182,109,936 samples, 24.43%)</title><rect x="63.7096%" y="4629" width="24.4324%" height="15" fill="rgb(207,41,40)" fg:x="474867706" fg:w="182109936"/><text x="63.9596%" y="4639.50">main::benchmark::process_tree_recursive..</text></g><g><title>main::benchmark::process_tree_recursive_incremental (130,144,497 samples, 17.46%)</title><rect x="70.6815%" y="4613" width="17.4606%" height="15" fill="rgb(241,179,25)" fg:x="526833145" fg:w="130144497"/><text x="70.9315%" y="4623.50">main::benchmark::process_tr..</text></g><g><title>main::benchmark::process_tree_recursive_incremental (98,770,230 samples, 13.25%)</title><rect x="74.8907%" y="4597" width="13.2513%" height="15" fill="rgb(210,0,34)" fg:x="558207412" fg:w="98770230"/><text x="75.1407%" y="4607.50">main::benchmark::pro..</text></g><g><title>main::benchmark::process_tree_recursive_incremental (63,417,036 samples, 8.51%)</title><rect x="79.6338%" y="4581" width="8.5082%" height="15" fill="rgb(225,217,29)" fg:x="593560606" fg:w="63417036"/><text x="79.8838%" y="4591.50">main::benchm..</text></g><g><title>main::benchmark::process_tree_recursive_incremental (42,888,822 samples, 5.75%)</title><rect x="82.3879%" y="4565" width="5.7541%" height="15" fill="rgb(216,191,38)" fg:x="614088820" fg:w="42888822"/><text x="82.6379%" y="4575.50">main::b..</text></g><g><title>main::benchmark::process_tree_recursive_incremental (34,026,550 samples, 4.57%)</title><rect x="83.5769%" y="4549" width="4.5651%" height="15" fill="rgb(232,140,52)" fg:x="622951092" fg:w="34026550"/><text x="83.8269%" y="4559.50">main:..</text></g><g><title>main::benchmark::process_tree_recursive_incremental (15,054,084 samples, 2.02%)</title><rect x="86.1223%" y="4533" width="2.0197%" height="15" fill="rgb(223,158,51)" fg:x="641923558" fg:w="15054084"/><text x="86.3723%" y="4543.50">m..</text></g><g><title>main::benchmark::process_node_generated_incremental (15,054,084 samples, 2.02%)</title><rect x="86.1223%" y="4517" width="2.0197%" height="15" fill="rgb(235,29,51)" fg:x="641923558" fg:w="15054084"/><text x="86.3723%" y="4527.50">m..</text></g><g><title>main::benchmark::matches_id_id (7,643,200 samples, 1.03%)</title><rect x="87.1166%" y="4501" width="1.0254%" height="15" fill="rgb(215,181,18)" fg:x="649334442" fg:w="7643200"/><text x="87.3666%" y="4511.50"></text></g><g><title>main::benchmark::get_node_id_id (7,643,200 samples, 1.03%)</title><rect x="87.1166%" y="4485" width="1.0254%" height="15" fill="rgb(227,125,34)" fg:x="649334442" fg:w="7643200"/><text x="87.3666%" y="4495.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (7,643,200 samples, 1.03%)</title><rect x="87.1166%" y="4469" width="1.0254%" height="15" fill="rgb(230,197,49)" fg:x="649334442" fg:w="7643200"/><text x="87.3666%" y="4479.50"></text></g><g><title>main::benchmark::get_node_id_id::_{{closure}} (7,643,200 samples, 1.03%)</title><rect x="87.1166%" y="4453" width="1.0254%" height="15" fill="rgb(239,141,16)" fg:x="649334442" fg:w="7643200"/><text x="87.3666%" y="4463.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (7,643,200 samples, 1.03%)</title><rect x="87.1166%" y="4437" width="1.0254%" height="15" fill="rgb(225,105,43)" fg:x="649334442" fg:w="7643200"/><text x="87.3666%" y="4447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (7,643,200 samples, 1.03%)</title><rect x="87.1166%" y="4421" width="1.0254%" height="15" fill="rgb(214,131,14)" fg:x="649334442" fg:w="7643200"/><text x="87.3666%" y="4431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (7,643,200 samples, 1.03%)</title><rect x="87.1166%" y="4405" width="1.0254%" height="15" fill="rgb(229,177,11)" fg:x="649334442" fg:w="7643200"/><text x="87.3666%" y="4415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (2,469,017 samples, 0.33%)</title><rect x="87.8108%" y="4389" width="0.3313%" height="15" fill="rgb(231,180,14)" fg:x="654508625" fg:w="2469017"/><text x="88.0608%" y="4399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (2,469,017 samples, 0.33%)</title><rect x="87.8108%" y="4373" width="0.3313%" height="15" fill="rgb(232,88,2)" fg:x="654508625" fg:w="2469017"/><text x="88.0608%" y="4383.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (2,469,017 samples, 0.33%)</title><rect x="87.8108%" y="4357" width="0.3313%" height="15" fill="rgb(205,220,8)" fg:x="654508625" fg:w="2469017"/><text x="88.0608%" y="4367.50"></text></g><g><title>&lt;hashbrown::control::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1,264,915 samples, 0.17%)</title><rect x="87.9723%" y="4341" width="0.1697%" height="15" fill="rgb(225,23,53)" fg:x="655712727" fg:w="1264915"/><text x="88.2223%" y="4351.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::lowest_set_bit (1,264,915 samples, 0.17%)</title><rect x="87.9723%" y="4325" width="0.1697%" height="15" fill="rgb(213,62,29)" fg:x="655712727" fg:w="1264915"/><text x="88.2223%" y="4335.50"></text></g><g><title>main::benchmark::benchmark_accumulated_modifications (519,065,764 samples, 69.64%)</title><rect x="18.6647%" y="4837" width="69.6394%" height="15" fill="rgb(227,75,7)" fg:x="139119801" fg:w="519065764"/><text x="18.9147%" y="4847.50">main::benchmark::benchmark_accumulated_modifications</text></g><g><title>main::benchmark::mark_all_dirty_for_layout (1,207,923 samples, 0.16%)</title><rect x="88.1420%" y="4821" width="0.1621%" height="15" fill="rgb(207,105,14)" fg:x="656977642" fg:w="1207923"/><text x="88.3920%" y="4831.50"></text></g><g><title>main::benchmark::mark_all_dirty_for_layout (1,207,923 samples, 0.16%)</title><rect x="88.1420%" y="4805" width="0.1621%" height="15" fill="rgb(245,62,29)" fg:x="656977642" fg:w="1207923"/><text x="88.3920%" y="4815.50"></text></g><g><title>main::benchmark::mark_all_dirty_for_layout (1,207,923 samples, 0.16%)</title><rect x="88.1420%" y="4789" width="0.1621%" height="15" fill="rgb(236,202,4)" fg:x="656977642" fg:w="1207923"/><text x="88.3920%" y="4799.50"></text></g><g><title>main::benchmark::mark_all_dirty_for_layout (1,207,923 samples, 0.16%)</title><rect x="88.1420%" y="4773" width="0.1621%" height="15" fill="rgb(250,67,1)" fg:x="656977642" fg:w="1207923"/><text x="88.3920%" y="4783.50"></text></g><g><title>main::benchmark::mark_all_dirty_for_layout (1,207,923 samples, 0.16%)</title><rect x="88.1420%" y="4757" width="0.1621%" height="15" fill="rgb(253,115,44)" fg:x="656977642" fg:w="1207923"/><text x="88.3920%" y="4767.50"></text></g><g><title>main::benchmark::mark_all_dirty_for_layout (1,207,923 samples, 0.16%)</title><rect x="88.1420%" y="4741" width="0.1621%" height="15" fill="rgb(251,139,18)" fg:x="656977642" fg:w="1207923"/><text x="88.3920%" y="4751.50"></text></g><g><title>main::benchmark::mark_all_dirty_for_layout (1,207,923 samples, 0.16%)</title><rect x="88.1420%" y="4725" width="0.1621%" height="15" fill="rgb(218,22,32)" fg:x="656977642" fg:w="1207923"/><text x="88.3920%" y="4735.50"></text></g><g><title>main::benchmark::mark_all_dirty_for_layout (1,207,923 samples, 0.16%)</title><rect x="88.1420%" y="4709" width="0.1621%" height="15" fill="rgb(243,53,5)" fg:x="656977642" fg:w="1207923"/><text x="88.3920%" y="4719.50"></text></g><g><title>main::benchmark::mark_all_dirty_for_layout (1,207,923 samples, 0.16%)</title><rect x="88.1420%" y="4693" width="0.1621%" height="15" fill="rgb(227,56,16)" fg:x="656977642" fg:w="1207923"/><text x="88.3920%" y="4703.50"></text></g><g><title>main::benchmark::mark_all_dirty_for_layout (1,207,923 samples, 0.16%)</title><rect x="88.1420%" y="4677" width="0.1621%" height="15" fill="rgb(245,53,0)" fg:x="656977642" fg:w="1207923"/><text x="88.3920%" y="4687.50"></text></g><g><title>main::benchmark::mark_all_dirty_for_layout (1,207,923 samples, 0.16%)</title><rect x="88.1420%" y="4661" width="0.1621%" height="15" fill="rgb(216,170,35)" fg:x="656977642" fg:w="1207923"/><text x="88.3920%" y="4671.50"></text></g><g><title>main::benchmark::mark_all_dirty_for_layout (1,207,923 samples, 0.16%)</title><rect x="88.1420%" y="4645" width="0.1621%" height="15" fill="rgb(211,200,8)" fg:x="656977642" fg:w="1207923"/><text x="88.3920%" y="4655.50"></text></g><g><title>main::benchmark::mark_all_dirty_for_layout (1,207,923 samples, 0.16%)</title><rect x="88.1420%" y="4629" width="0.1621%" height="15" fill="rgb(228,204,44)" fg:x="656977642" fg:w="1207923"/><text x="88.3920%" y="4639.50"></text></g><g><title>main::benchmark::mark_all_dirty_for_layout (1,207,923 samples, 0.16%)</title><rect x="88.1420%" y="4613" width="0.1621%" height="15" fill="rgb(214,121,17)" fg:x="656977642" fg:w="1207923"/><text x="88.3920%" y="4623.50"></text></g><g><title>main::benchmark::mark_all_dirty_for_layout (1,207,923 samples, 0.16%)</title><rect x="88.1420%" y="4597" width="0.1621%" height="15" fill="rgb(233,64,38)" fg:x="656977642" fg:w="1207923"/><text x="88.3920%" y="4607.50"></text></g><g><title>main::benchmark::mark_all_dirty_for_layout (1,207,923 samples, 0.16%)</title><rect x="88.1420%" y="4581" width="0.1621%" height="15" fill="rgb(253,54,19)" fg:x="656977642" fg:w="1207923"/><text x="88.3920%" y="4591.50"></text></g><g><title>main::benchmark::mark_all_dirty_for_layout (1,207,923 samples, 0.16%)</title><rect x="88.1420%" y="4565" width="0.1621%" height="15" fill="rgb(253,94,18)" fg:x="656977642" fg:w="1207923"/><text x="88.3920%" y="4575.50"></text></g><g><title>css_bitvector_compiler::HtmlNode::mark_dirty (1,207,923 samples, 0.16%)</title><rect x="88.1420%" y="4549" width="0.1621%" height="15" fill="rgb(227,57,52)" fg:x="656977642" fg:w="1207923"/><text x="88.3920%" y="4559.50"></text></g><g><title>css_bitvector_compiler::HtmlNode::set_summary_bit_on_ancestors (1,207,923 samples, 0.16%)</title><rect x="88.1420%" y="4533" width="0.1621%" height="15" fill="rgb(230,228,50)" fg:x="656977642" fg:w="1207923"/><text x="88.3920%" y="4543.50"></text></g><g><title>css_bitvector_compiler::HtmlNode::set_summary_bit (1,207,923 samples, 0.16%)</title><rect x="88.1420%" y="4517" width="0.1621%" height="15" fill="rgb(217,205,27)" fg:x="656977642" fg:w="1207923"/><text x="88.3920%" y="4527.50"></text></g><g><title>main::benchmark::generate_web_layout_csv (1,264,044 samples, 0.17%)</title><rect x="88.3041%" y="4837" width="0.1696%" height="15" fill="rgb(252,71,50)" fg:x="658185565" fg:w="1264044"/><text x="88.5541%" y="4847.50"></text></g><g><title>alloc::string::String::push_str (1,264,044 samples, 0.17%)</title><rect x="88.3041%" y="4821" width="0.1696%" height="15" fill="rgb(209,86,4)" fg:x="658185565" fg:w="1264044"/><text x="88.5541%" y="4831.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1,264,044 samples, 0.17%)</title><rect x="88.3041%" y="4805" width="0.1696%" height="15" fill="rgb(229,94,0)" fg:x="658185565" fg:w="1264044"/><text x="88.5541%" y="4815.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1,264,044 samples, 0.17%)</title><rect x="88.3041%" y="4789" width="0.1696%" height="15" fill="rgb(252,223,21)" fg:x="658185565" fg:w="1264044"/><text x="88.5541%" y="4799.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1,264,044 samples, 0.17%)</title><rect x="88.3041%" y="4773" width="0.1696%" height="15" fill="rgb(230,210,4)" fg:x="658185565" fg:w="1264044"/><text x="88.5541%" y="4783.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1,264,044 samples, 0.17%)</title><rect x="88.3041%" y="4757" width="0.1696%" height="15" fill="rgb(240,149,38)" fg:x="658185565" fg:w="1264044"/><text x="88.5541%" y="4767.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1,264,044 samples, 0.17%)</title><rect x="88.3041%" y="4741" width="0.1696%" height="15" fill="rgb(254,105,20)" fg:x="658185565" fg:w="1264044"/><text x="88.5541%" y="4751.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (1,264,044 samples, 0.17%)</title><rect x="88.3041%" y="4725" width="0.1696%" height="15" fill="rgb(253,87,46)" fg:x="658185565" fg:w="1264044"/><text x="88.5541%" y="4735.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1,264,044 samples, 0.17%)</title><rect x="88.3041%" y="4709" width="0.1696%" height="15" fill="rgb(253,116,33)" fg:x="658185565" fg:w="1264044"/><text x="88.5541%" y="4719.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (1,264,044 samples, 0.17%)</title><rect x="88.3041%" y="4693" width="0.1696%" height="15" fill="rgb(229,198,5)" fg:x="658185565" fg:w="1264044"/><text x="88.5541%" y="4703.50"></text></g><g><title>alloc::raw_vec::finish_grow (1,264,044 samples, 0.17%)</title><rect x="88.3041%" y="4677" width="0.1696%" height="15" fill="rgb(242,38,37)" fg:x="658185565" fg:w="1264044"/><text x="88.5541%" y="4687.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1,264,044 samples, 0.17%)</title><rect x="88.3041%" y="4661" width="0.1696%" height="15" fill="rgb(242,69,53)" fg:x="658185565" fg:w="1264044"/><text x="88.5541%" y="4671.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1,264,044 samples, 0.17%)</title><rect x="88.3041%" y="4645" width="0.1696%" height="15" fill="rgb(249,80,16)" fg:x="658185565" fg:w="1264044"/><text x="88.5541%" y="4655.50"></text></g><g><title>alloc::alloc::realloc (1,264,044 samples, 0.17%)</title><rect x="88.3041%" y="4629" width="0.1696%" height="15" fill="rgb(206,128,11)" fg:x="658185565" fg:w="1264044"/><text x="88.5541%" y="4639.50"></text></g><g><title>realloc (1,264,044 samples, 0.17%)</title><rect x="88.3041%" y="4613" width="0.1696%" height="15" fill="rgb(212,35,20)" fg:x="658185565" fg:w="1264044"/><text x="88.5541%" y="4623.50"></text></g><g><title>[libc.so.6] (1,264,044 samples, 0.17%)</title><rect x="88.3041%" y="4597" width="0.1696%" height="15" fill="rgb(236,79,13)" fg:x="658185565" fg:w="1264044"/><text x="88.5541%" y="4607.50"></text></g><g><title>[libc.so.6] (1,264,044 samples, 0.17%)</title><rect x="88.3041%" y="4581" width="0.1696%" height="15" fill="rgb(233,123,3)" fg:x="658185565" fg:w="1264044"/><text x="88.5541%" y="4591.50"></text></g><g><title>[libc.so.6] (1,264,044 samples, 0.17%)</title><rect x="88.3041%" y="4565" width="0.1696%" height="15" fill="rgb(214,93,52)" fg:x="658185565" fg:w="1264044"/><text x="88.5541%" y="4575.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (501,504 samples, 0.07%)</title><rect x="88.4737%" y="4309" width="0.0673%" height="15" fill="rgb(251,37,40)" fg:x="659449609" fg:w="501504"/><text x="88.7237%" y="4319.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1,293,261 samples, 0.17%)</title><rect x="88.4737%" y="4389" width="0.1735%" height="15" fill="rgb(227,80,54)" fg:x="659449609" fg:w="1293261"/><text x="88.7237%" y="4399.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1,293,261 samples, 0.17%)</title><rect x="88.4737%" y="4373" width="0.1735%" height="15" fill="rgb(254,48,11)" fg:x="659449609" fg:w="1293261"/><text x="88.7237%" y="4383.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (1,293,261 samples, 0.17%)</title><rect x="88.4737%" y="4357" width="0.1735%" height="15" fill="rgb(235,193,26)" fg:x="659449609" fg:w="1293261"/><text x="88.7237%" y="4367.50"></text></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (1,293,261 samples, 0.17%)</title><rect x="88.4737%" y="4341" width="0.1735%" height="15" fill="rgb(229,99,21)" fg:x="659449609" fg:w="1293261"/><text x="88.7237%" y="4351.50"></text></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1,293,261 samples, 0.17%)</title><rect x="88.4737%" y="4325" width="0.1735%" height="15" fill="rgb(211,140,41)" fg:x="659449609" fg:w="1293261"/><text x="88.7237%" y="4335.50"></text></g><g><title>malloc (791,757 samples, 0.11%)</title><rect x="88.5409%" y="4309" width="0.1062%" height="15" fill="rgb(240,227,30)" fg:x="659951113" fg:w="791757"/><text x="88.7909%" y="4319.50"></text></g><g><title>[libc.so.6] (791,757 samples, 0.11%)</title><rect x="88.5409%" y="4293" width="0.1062%" height="15" fill="rgb(215,224,45)" fg:x="659951113" fg:w="791757"/><text x="88.7909%" y="4303.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (879,340 samples, 0.12%)</title><rect x="88.6472%" y="3701" width="0.1180%" height="15" fill="rgb(206,123,31)" fg:x="660742870" fg:w="879340"/><text x="88.8972%" y="3711.50"></text></g><g><title>serde_json::read::SliceRead::parse_str_bytes (879,340 samples, 0.12%)</title><rect x="88.6472%" y="3685" width="0.1180%" height="15" fill="rgb(210,138,16)" fg:x="660742870" fg:w="879340"/><text x="88.8972%" y="3695.50"></text></g><g><title>serde_json::read::SliceRead::skip_to_escape (434,490 samples, 0.06%)</title><rect x="88.7069%" y="3669" width="0.0583%" height="15" fill="rgb(228,57,28)" fg:x="661187720" fg:w="434490"/><text x="88.9569%" y="3679.50"></text></g><g><title>core::num::&lt;impl u64&gt;::trailing_zeros (434,490 samples, 0.06%)</title><rect x="88.7069%" y="3653" width="0.0583%" height="15" fill="rgb(242,170,10)" fg:x="661187720" fg:w="434490"/><text x="88.9569%" y="3663.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (942,542 samples, 0.13%)</title><rect x="88.7651%" y="3061" width="0.1265%" height="15" fill="rgb(228,214,39)" fg:x="661622210" fg:w="942542"/><text x="89.0151%" y="3071.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (942,542 samples, 0.13%)</title><rect x="88.7651%" y="3045" width="0.1265%" height="15" fill="rgb(218,179,33)" fg:x="661622210" fg:w="942542"/><text x="89.0151%" y="3055.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (942,542 samples, 0.13%)</title><rect x="88.7651%" y="3029" width="0.1265%" height="15" fill="rgb(235,193,39)" fg:x="661622210" fg:w="942542"/><text x="89.0151%" y="3039.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (942,542 samples, 0.13%)</title><rect x="88.7651%" y="3013" width="0.1265%" height="15" fill="rgb(219,221,36)" fg:x="661622210" fg:w="942542"/><text x="89.0151%" y="3023.50"></text></g><g><title>alloc::raw_vec::finish_grow (942,542 samples, 0.13%)</title><rect x="88.7651%" y="2997" width="0.1265%" height="15" fill="rgb(248,218,19)" fg:x="661622210" fg:w="942542"/><text x="89.0151%" y="3007.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (942,542 samples, 0.13%)</title><rect x="88.7651%" y="2981" width="0.1265%" height="15" fill="rgb(205,50,9)" fg:x="661622210" fg:w="942542"/><text x="89.0151%" y="2991.50"></text></g><g><title>alloc::alloc::Global::grow_impl (942,542 samples, 0.13%)</title><rect x="88.7651%" y="2965" width="0.1265%" height="15" fill="rgb(238,81,28)" fg:x="661622210" fg:w="942542"/><text x="89.0151%" y="2975.50"></text></g><g><title>alloc::alloc::realloc (942,542 samples, 0.13%)</title><rect x="88.7651%" y="2949" width="0.1265%" height="15" fill="rgb(235,110,19)" fg:x="661622210" fg:w="942542"/><text x="89.0151%" y="2959.50"></text></g><g><title>realloc (942,542 samples, 0.13%)</title><rect x="88.7651%" y="2933" width="0.1265%" height="15" fill="rgb(214,7,14)" fg:x="661622210" fg:w="942542"/><text x="89.0151%" y="2943.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2,026,212 samples, 0.27%)</title><rect x="88.8916%" y="2933" width="0.2718%" height="15" fill="rgb(211,77,3)" fg:x="662564752" fg:w="2026212"/><text x="89.1416%" y="2943.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2,026,212 samples, 0.27%)</title><rect x="88.8916%" y="2917" width="0.2718%" height="15" fill="rgb(229,5,9)" fg:x="662564752" fg:w="2026212"/><text x="89.1416%" y="2927.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (2,026,212 samples, 0.27%)</title><rect x="88.8916%" y="2901" width="0.2718%" height="15" fill="rgb(225,90,11)" fg:x="662564752" fg:w="2026212"/><text x="89.1416%" y="2911.50"></text></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (2,026,212 samples, 0.27%)</title><rect x="88.8916%" y="2885" width="0.2718%" height="15" fill="rgb(242,56,8)" fg:x="662564752" fg:w="2026212"/><text x="89.1416%" y="2895.50"></text></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2,026,212 samples, 0.27%)</title><rect x="88.8916%" y="2869" width="0.2718%" height="15" fill="rgb(249,212,39)" fg:x="662564752" fg:w="2026212"/><text x="89.1416%" y="2879.50"></text></g><g><title>malloc (1,019,406 samples, 0.14%)</title><rect x="89.0267%" y="2853" width="0.1368%" height="15" fill="rgb(236,90,9)" fg:x="663571558" fg:w="1019406"/><text x="89.2767%" y="2863.50"></text></g><g><title>[libc.so.6] (1,019,406 samples, 0.14%)</title><rect x="89.0267%" y="2837" width="0.1368%" height="15" fill="rgb(206,88,35)" fg:x="663571558" fg:w="1019406"/><text x="89.2767%" y="2847.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (972,488 samples, 0.13%)</title><rect x="89.1634%" y="2725" width="0.1305%" height="15" fill="rgb(205,126,30)" fg:x="664590964" fg:w="972488"/><text x="89.4134%" y="2735.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed::has_next_key (972,488 samples, 0.13%)</title><rect x="89.1634%" y="2709" width="0.1305%" height="15" fill="rgb(230,176,12)" fg:x="664590964" fg:w="972488"/><text x="89.4134%" y="2719.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (972,488 samples, 0.13%)</title><rect x="89.1634%" y="2693" width="0.1305%" height="15" fill="rgb(243,19,9)" fg:x="664590964" fg:w="972488"/><text x="89.4134%" y="2703.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::eat_char (972,488 samples, 0.13%)</title><rect x="89.1634%" y="2677" width="0.1305%" height="15" fill="rgb(245,171,17)" fg:x="664590964" fg:w="972488"/><text x="89.4134%" y="2687.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::discard (972,488 samples, 0.13%)</title><rect x="89.1634%" y="2661" width="0.1305%" height="15" fill="rgb(227,52,21)" fg:x="664590964" fg:w="972488"/><text x="89.4134%" y="2671.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::discard (972,488 samples, 0.13%)</title><rect x="89.1634%" y="2645" width="0.1305%" height="15" fill="rgb(238,69,14)" fg:x="664590964" fg:w="972488"/><text x="89.4134%" y="2655.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1,013,337 samples, 0.14%)</title><rect x="89.2939%" y="2661" width="0.1360%" height="15" fill="rgb(241,156,39)" fg:x="665563452" fg:w="1013337"/><text x="89.5439%" y="2671.50"></text></g><g><title>serde_json::read::SliceRead::parse_str_bytes (1,013,337 samples, 0.14%)</title><rect x="89.2939%" y="2645" width="0.1360%" height="15" fill="rgb(212,227,28)" fg:x="665563452" fg:w="1013337"/><text x="89.5439%" y="2655.50"></text></g><g><title>serde_json::read::SliceRead::skip_to_escape (1,013,337 samples, 0.14%)</title><rect x="89.2939%" y="2629" width="0.1360%" height="15" fill="rgb(209,118,27)" fg:x="665563452" fg:w="1013337"/><text x="89.5439%" y="2639.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1,007,617 samples, 0.14%)</title><rect x="89.4299%" y="1877" width="0.1352%" height="15" fill="rgb(226,102,5)" fg:x="666576789" fg:w="1007617"/><text x="89.6799%" y="1887.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (1,007,617 samples, 0.14%)</title><rect x="89.4299%" y="1861" width="0.1352%" height="15" fill="rgb(223,34,3)" fg:x="666576789" fg:w="1007617"/><text x="89.6799%" y="1871.50"></text></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (1,007,617 samples, 0.14%)</title><rect x="89.4299%" y="1845" width="0.1352%" height="15" fill="rgb(221,81,38)" fg:x="666576789" fg:w="1007617"/><text x="89.6799%" y="1855.50"></text></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1,007,617 samples, 0.14%)</title><rect x="89.4299%" y="1829" width="0.1352%" height="15" fill="rgb(236,219,28)" fg:x="666576789" fg:w="1007617"/><text x="89.6799%" y="1839.50"></text></g><g><title>malloc (1,007,617 samples, 0.14%)</title><rect x="89.4299%" y="1813" width="0.1352%" height="15" fill="rgb(213,200,14)" fg:x="666576789" fg:w="1007617"/><text x="89.6799%" y="1823.50"></text></g><g><title>[libc.so.6] (1,007,617 samples, 0.14%)</title><rect x="89.4299%" y="1797" width="0.1352%" height="15" fill="rgb(240,33,19)" fg:x="666576789" fg:w="1007617"/><text x="89.6799%" y="1807.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1,900,974 samples, 0.26%)</title><rect x="89.4299%" y="1893" width="0.2550%" height="15" fill="rgb(233,113,27)" fg:x="666576789" fg:w="1900974"/><text x="89.6799%" y="1903.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed::has_next_key (893,357 samples, 0.12%)</title><rect x="89.5650%" y="1877" width="0.1199%" height="15" fill="rgb(220,221,18)" fg:x="667584406" fg:w="893357"/><text x="89.8150%" y="1887.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (472,123 samples, 0.06%)</title><rect x="89.8148%" y="1269" width="0.0633%" height="15" fill="rgb(238,92,8)" fg:x="669445785" fg:w="472123"/><text x="90.0648%" y="1279.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (472,123 samples, 0.06%)</title><rect x="89.8148%" y="1253" width="0.0633%" height="15" fill="rgb(222,164,16)" fg:x="669445785" fg:w="472123"/><text x="90.0648%" y="1263.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (472,123 samples, 0.06%)</title><rect x="89.8148%" y="1237" width="0.0633%" height="15" fill="rgb(241,119,3)" fg:x="669445785" fg:w="472123"/><text x="90.0648%" y="1247.50"></text></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (472,123 samples, 0.06%)</title><rect x="89.8148%" y="1221" width="0.0633%" height="15" fill="rgb(241,44,8)" fg:x="669445785" fg:w="472123"/><text x="90.0648%" y="1231.50"></text></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (472,123 samples, 0.06%)</title><rect x="89.8148%" y="1205" width="0.0633%" height="15" fill="rgb(230,36,40)" fg:x="669445785" fg:w="472123"/><text x="90.0648%" y="1215.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (472,123 samples, 0.06%)</title><rect x="89.8148%" y="1189" width="0.0633%" height="15" fill="rgb(243,16,36)" fg:x="669445785" fg:w="472123"/><text x="90.0648%" y="1199.50"></text></g><g><title>serde_json::read::SliceRead::parse_str_bytes (472,123 samples, 0.06%)</title><rect x="89.8148%" y="1173" width="0.0633%" height="15" fill="rgb(231,4,26)" fg:x="669445785" fg:w="472123"/><text x="90.0648%" y="1183.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (472,123 samples, 0.06%)</title><rect x="89.8148%" y="1157" width="0.0633%" height="15" fill="rgb(240,9,31)" fg:x="669445785" fg:w="472123"/><text x="90.0648%" y="1167.50"></text></g><g><title>serde::de::MapAccess::next_entry (2,173,514 samples, 0.29%)</title><rect x="89.6849%" y="1509" width="0.2916%" height="15" fill="rgb(207,173,15)" fg:x="668477763" fg:w="2173514"/><text x="89.9349%" y="1519.50"></text></g><g><title>serde::de::MapAccess::next_entry_seed (2,173,514 samples, 0.29%)</title><rect x="89.6849%" y="1493" width="0.2916%" height="15" fill="rgb(224,192,53)" fg:x="668477763" fg:w="2173514"/><text x="89.9349%" y="1503.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (1,205,492 samples, 0.16%)</title><rect x="89.8148%" y="1477" width="0.1617%" height="15" fill="rgb(223,67,28)" fg:x="669445785" fg:w="1205492"/><text x="90.0648%" y="1487.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1,205,492 samples, 0.16%)</title><rect x="89.8148%" y="1461" width="0.1617%" height="15" fill="rgb(211,20,47)" fg:x="669445785" fg:w="1205492"/><text x="90.0648%" y="1471.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1,205,492 samples, 0.16%)</title><rect x="89.8148%" y="1445" width="0.1617%" height="15" fill="rgb(240,228,2)" fg:x="669445785" fg:w="1205492"/><text x="90.0648%" y="1455.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1,205,492 samples, 0.16%)</title><rect x="89.8148%" y="1429" width="0.1617%" height="15" fill="rgb(248,151,12)" fg:x="669445785" fg:w="1205492"/><text x="90.0648%" y="1439.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_seq (1,205,492 samples, 0.16%)</title><rect x="89.8148%" y="1413" width="0.1617%" height="15" fill="rgb(244,8,39)" fg:x="669445785" fg:w="1205492"/><text x="90.0648%" y="1423.50"></text></g><g><title>serde::de::SeqAccess::next_element (1,205,492 samples, 0.16%)</title><rect x="89.8148%" y="1397" width="0.1617%" height="15" fill="rgb(222,26,8)" fg:x="669445785" fg:w="1205492"/><text x="90.0648%" y="1407.50"></text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (1,205,492 samples, 0.16%)</title><rect x="89.8148%" y="1381" width="0.1617%" height="15" fill="rgb(213,106,44)" fg:x="669445785" fg:w="1205492"/><text x="90.0648%" y="1391.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1,205,492 samples, 0.16%)</title><rect x="89.8148%" y="1365" width="0.1617%" height="15" fill="rgb(214,129,20)" fg:x="669445785" fg:w="1205492"/><text x="90.0648%" y="1375.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1,205,492 samples, 0.16%)</title><rect x="89.8148%" y="1349" width="0.1617%" height="15" fill="rgb(212,32,13)" fg:x="669445785" fg:w="1205492"/><text x="90.0648%" y="1359.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1,205,492 samples, 0.16%)</title><rect x="89.8148%" y="1333" width="0.1617%" height="15" fill="rgb(208,168,33)" fg:x="669445785" fg:w="1205492"/><text x="90.0648%" y="1343.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1,205,492 samples, 0.16%)</title><rect x="89.8148%" y="1317" width="0.1617%" height="15" fill="rgb(231,207,8)" fg:x="669445785" fg:w="1205492"/><text x="90.0648%" y="1327.50"></text></g><g><title>serde::de::MapAccess::next_entry (1,205,492 samples, 0.16%)</title><rect x="89.8148%" y="1301" width="0.1617%" height="15" fill="rgb(235,219,23)" fg:x="669445785" fg:w="1205492"/><text x="90.0648%" y="1311.50"></text></g><g><title>serde::de::MapAccess::next_entry_seed (1,205,492 samples, 0.16%)</title><rect x="89.8148%" y="1285" width="0.1617%" height="15" fill="rgb(226,216,26)" fg:x="669445785" fg:w="1205492"/><text x="90.0648%" y="1295.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (733,369 samples, 0.10%)</title><rect x="89.8781%" y="1269" width="0.0984%" height="15" fill="rgb(239,137,16)" fg:x="669917908" fg:w="733369"/><text x="90.1281%" y="1279.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (733,369 samples, 0.10%)</title><rect x="89.8781%" y="1253" width="0.0984%" height="15" fill="rgb(207,12,36)" fg:x="669917908" fg:w="733369"/><text x="90.1281%" y="1263.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (733,369 samples, 0.10%)</title><rect x="89.8781%" y="1237" width="0.0984%" height="15" fill="rgb(210,214,24)" fg:x="669917908" fg:w="733369"/><text x="90.1281%" y="1247.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (733,369 samples, 0.10%)</title><rect x="89.8781%" y="1221" width="0.0984%" height="15" fill="rgb(206,56,30)" fg:x="669917908" fg:w="733369"/><text x="90.1281%" y="1231.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_seq (733,369 samples, 0.10%)</title><rect x="89.8781%" y="1205" width="0.0984%" height="15" fill="rgb(228,143,26)" fg:x="669917908" fg:w="733369"/><text x="90.1281%" y="1215.50"></text></g><g><title>serde::de::SeqAccess::next_element (733,369 samples, 0.10%)</title><rect x="89.8781%" y="1189" width="0.0984%" height="15" fill="rgb(216,218,46)" fg:x="669917908" fg:w="733369"/><text x="90.1281%" y="1199.50"></text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (733,369 samples, 0.10%)</title><rect x="89.8781%" y="1173" width="0.0984%" height="15" fill="rgb(206,6,19)" fg:x="669917908" fg:w="733369"/><text x="90.1281%" y="1183.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (733,369 samples, 0.10%)</title><rect x="89.8781%" y="1157" width="0.0984%" height="15" fill="rgb(239,177,51)" fg:x="669917908" fg:w="733369"/><text x="90.1281%" y="1167.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (733,369 samples, 0.10%)</title><rect x="89.8781%" y="1141" width="0.0984%" height="15" fill="rgb(216,55,25)" fg:x="669917908" fg:w="733369"/><text x="90.1281%" y="1151.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (733,369 samples, 0.10%)</title><rect x="89.8781%" y="1125" width="0.0984%" height="15" fill="rgb(231,163,29)" fg:x="669917908" fg:w="733369"/><text x="90.1281%" y="1135.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (733,369 samples, 0.10%)</title><rect x="89.8781%" y="1109" width="0.0984%" height="15" fill="rgb(232,149,50)" fg:x="669917908" fg:w="733369"/><text x="90.1281%" y="1119.50"></text></g><g><title>serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;::insert (733,369 samples, 0.10%)</title><rect x="89.8781%" y="1093" width="0.0984%" height="15" fill="rgb(223,142,48)" fg:x="669917908" fg:w="733369"/><text x="90.1281%" y="1103.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (733,369 samples, 0.10%)</title><rect x="89.8781%" y="1077" width="0.0984%" height="15" fill="rgb(245,83,23)" fg:x="669917908" fg:w="733369"/><text x="90.1281%" y="1087.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (733,369 samples, 0.10%)</title><rect x="89.8781%" y="1061" width="0.0984%" height="15" fill="rgb(224,63,2)" fg:x="669917908" fg:w="733369"/><text x="90.1281%" y="1071.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert_entry (733,369 samples, 0.10%)</title><rect x="89.8781%" y="1045" width="0.0984%" height="15" fill="rgb(218,65,53)" fg:x="669917908" fg:w="733369"/><text x="90.1281%" y="1055.50"></text></g><g><title>serde::de::MapAccess::next_entry (4,920,430 samples, 0.66%)</title><rect x="89.4299%" y="1925" width="0.6601%" height="15" fill="rgb(221,84,29)" fg:x="666576789" fg:w="4920430"/><text x="89.6799%" y="1935.50"></text></g><g><title>serde::de::MapAccess::next_entry_seed (4,920,430 samples, 0.66%)</title><rect x="89.4299%" y="1909" width="0.6601%" height="15" fill="rgb(234,0,32)" fg:x="666576789" fg:w="4920430"/><text x="89.6799%" y="1919.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (3,019,456 samples, 0.41%)</title><rect x="89.6849%" y="1893" width="0.4051%" height="15" fill="rgb(206,20,16)" fg:x="668477763" fg:w="3019456"/><text x="89.9349%" y="1903.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (3,019,456 samples, 0.41%)</title><rect x="89.6849%" y="1877" width="0.4051%" height="15" fill="rgb(244,172,18)" fg:x="668477763" fg:w="3019456"/><text x="89.9349%" y="1887.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3,019,456 samples, 0.41%)</title><rect x="89.6849%" y="1861" width="0.4051%" height="15" fill="rgb(254,133,1)" fg:x="668477763" fg:w="3019456"/><text x="89.9349%" y="1871.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3,019,456 samples, 0.41%)</title><rect x="89.6849%" y="1845" width="0.4051%" height="15" fill="rgb(222,206,41)" fg:x="668477763" fg:w="3019456"/><text x="89.9349%" y="1855.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_seq (3,019,456 samples, 0.41%)</title><rect x="89.6849%" y="1829" width="0.4051%" height="15" fill="rgb(212,3,42)" fg:x="668477763" fg:w="3019456"/><text x="89.9349%" y="1839.50"></text></g><g><title>serde::de::SeqAccess::next_element (3,019,456 samples, 0.41%)</title><rect x="89.6849%" y="1813" width="0.4051%" height="15" fill="rgb(241,11,4)" fg:x="668477763" fg:w="3019456"/><text x="89.9349%" y="1823.50"></text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (3,019,456 samples, 0.41%)</title><rect x="89.6849%" y="1797" width="0.4051%" height="15" fill="rgb(205,19,26)" fg:x="668477763" fg:w="3019456"/><text x="89.9349%" y="1807.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (3,019,456 samples, 0.41%)</title><rect x="89.6849%" y="1781" width="0.4051%" height="15" fill="rgb(210,179,32)" fg:x="668477763" fg:w="3019456"/><text x="89.9349%" y="1791.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3,019,456 samples, 0.41%)</title><rect x="89.6849%" y="1765" width="0.4051%" height="15" fill="rgb(227,116,49)" fg:x="668477763" fg:w="3019456"/><text x="89.9349%" y="1775.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3,019,456 samples, 0.41%)</title><rect x="89.6849%" y="1749" width="0.4051%" height="15" fill="rgb(211,146,6)" fg:x="668477763" fg:w="3019456"/><text x="89.9349%" y="1759.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3,019,456 samples, 0.41%)</title><rect x="89.6849%" y="1733" width="0.4051%" height="15" fill="rgb(219,44,39)" fg:x="668477763" fg:w="3019456"/><text x="89.9349%" y="1743.50"></text></g><g><title>serde::de::MapAccess::next_entry (3,019,456 samples, 0.41%)</title><rect x="89.6849%" y="1717" width="0.4051%" height="15" fill="rgb(234,128,11)" fg:x="668477763" fg:w="3019456"/><text x="89.9349%" y="1727.50"></text></g><g><title>serde::de::MapAccess::next_entry_seed (3,019,456 samples, 0.41%)</title><rect x="89.6849%" y="1701" width="0.4051%" height="15" fill="rgb(220,183,53)" fg:x="668477763" fg:w="3019456"/><text x="89.9349%" y="1711.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (3,019,456 samples, 0.41%)</title><rect x="89.6849%" y="1685" width="0.4051%" height="15" fill="rgb(213,219,32)" fg:x="668477763" fg:w="3019456"/><text x="89.9349%" y="1695.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (3,019,456 samples, 0.41%)</title><rect x="89.6849%" y="1669" width="0.4051%" height="15" fill="rgb(232,156,16)" fg:x="668477763" fg:w="3019456"/><text x="89.9349%" y="1679.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3,019,456 samples, 0.41%)</title><rect x="89.6849%" y="1653" width="0.4051%" height="15" fill="rgb(246,135,34)" fg:x="668477763" fg:w="3019456"/><text x="89.9349%" y="1663.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3,019,456 samples, 0.41%)</title><rect x="89.6849%" y="1637" width="0.4051%" height="15" fill="rgb(241,99,0)" fg:x="668477763" fg:w="3019456"/><text x="89.9349%" y="1647.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_seq (3,019,456 samples, 0.41%)</title><rect x="89.6849%" y="1621" width="0.4051%" height="15" fill="rgb(222,103,45)" fg:x="668477763" fg:w="3019456"/><text x="89.9349%" y="1631.50"></text></g><g><title>serde::de::SeqAccess::next_element (3,019,456 samples, 0.41%)</title><rect x="89.6849%" y="1605" width="0.4051%" height="15" fill="rgb(212,57,4)" fg:x="668477763" fg:w="3019456"/><text x="89.9349%" y="1615.50"></text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (3,019,456 samples, 0.41%)</title><rect x="89.6849%" y="1589" width="0.4051%" height="15" fill="rgb(215,68,47)" fg:x="668477763" fg:w="3019456"/><text x="89.9349%" y="1599.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (3,019,456 samples, 0.41%)</title><rect x="89.6849%" y="1573" width="0.4051%" height="15" fill="rgb(230,84,2)" fg:x="668477763" fg:w="3019456"/><text x="89.9349%" y="1583.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3,019,456 samples, 0.41%)</title><rect x="89.6849%" y="1557" width="0.4051%" height="15" fill="rgb(220,102,14)" fg:x="668477763" fg:w="3019456"/><text x="89.9349%" y="1567.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3,019,456 samples, 0.41%)</title><rect x="89.6849%" y="1541" width="0.4051%" height="15" fill="rgb(240,10,32)" fg:x="668477763" fg:w="3019456"/><text x="89.9349%" y="1551.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3,019,456 samples, 0.41%)</title><rect x="89.6849%" y="1525" width="0.4051%" height="15" fill="rgb(215,47,27)" fg:x="668477763" fg:w="3019456"/><text x="89.9349%" y="1535.50"></text></g><g><title>serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;::insert (845,942 samples, 0.11%)</title><rect x="89.9765%" y="1509" width="0.1135%" height="15" fill="rgb(233,188,43)" fg:x="670651277" fg:w="845942"/><text x="90.2265%" y="1519.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (845,942 samples, 0.11%)</title><rect x="89.9765%" y="1493" width="0.1135%" height="15" fill="rgb(253,190,1)" fg:x="670651277" fg:w="845942"/><text x="90.2265%" y="1503.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (845,942 samples, 0.11%)</title><rect x="89.9765%" y="1477" width="0.1135%" height="15" fill="rgb(206,114,52)" fg:x="670651277" fg:w="845942"/><text x="90.2265%" y="1487.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert_entry (845,942 samples, 0.11%)</title><rect x="89.9765%" y="1461" width="0.1135%" height="15" fill="rgb(233,120,37)" fg:x="670651277" fg:w="845942"/><text x="90.2265%" y="1471.50"></text></g><g><title>core::option::Option&lt;T&gt;::insert (845,942 samples, 0.11%)</title><rect x="89.9765%" y="1445" width="0.1135%" height="15" fill="rgb(214,52,39)" fg:x="670651277" fg:w="845942"/><text x="90.2265%" y="1455.50"></text></g><g><title>serde::de::MapAccess::next_entry (5,744,063 samples, 0.77%)</title><rect x="89.4299%" y="2133" width="0.7706%" height="15" fill="rgb(223,80,29)" fg:x="666576789" fg:w="5744063"/><text x="89.6799%" y="2143.50"></text></g><g><title>serde::de::MapAccess::next_entry_seed (5,744,063 samples, 0.77%)</title><rect x="89.4299%" y="2117" width="0.7706%" height="15" fill="rgb(230,101,40)" fg:x="666576789" fg:w="5744063"/><text x="89.6799%" y="2127.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (5,744,063 samples, 0.77%)</title><rect x="89.4299%" y="2101" width="0.7706%" height="15" fill="rgb(219,211,8)" fg:x="666576789" fg:w="5744063"/><text x="89.6799%" y="2111.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (5,744,063 samples, 0.77%)</title><rect x="89.4299%" y="2085" width="0.7706%" height="15" fill="rgb(252,126,28)" fg:x="666576789" fg:w="5744063"/><text x="89.6799%" y="2095.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (5,744,063 samples, 0.77%)</title><rect x="89.4299%" y="2069" width="0.7706%" height="15" fill="rgb(215,56,38)" fg:x="666576789" fg:w="5744063"/><text x="89.6799%" y="2079.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5,744,063 samples, 0.77%)</title><rect x="89.4299%" y="2053" width="0.7706%" height="15" fill="rgb(249,55,44)" fg:x="666576789" fg:w="5744063"/><text x="89.6799%" y="2063.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_seq (5,744,063 samples, 0.77%)</title><rect x="89.4299%" y="2037" width="0.7706%" height="15" fill="rgb(220,221,32)" fg:x="666576789" fg:w="5744063"/><text x="89.6799%" y="2047.50"></text></g><g><title>serde::de::SeqAccess::next_element (5,744,063 samples, 0.77%)</title><rect x="89.4299%" y="2021" width="0.7706%" height="15" fill="rgb(212,216,41)" fg:x="666576789" fg:w="5744063"/><text x="89.6799%" y="2031.50"></text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (5,744,063 samples, 0.77%)</title><rect x="89.4299%" y="2005" width="0.7706%" height="15" fill="rgb(228,213,43)" fg:x="666576789" fg:w="5744063"/><text x="89.6799%" y="2015.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (5,744,063 samples, 0.77%)</title><rect x="89.4299%" y="1989" width="0.7706%" height="15" fill="rgb(211,31,26)" fg:x="666576789" fg:w="5744063"/><text x="89.6799%" y="1999.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (5,744,063 samples, 0.77%)</title><rect x="89.4299%" y="1973" width="0.7706%" height="15" fill="rgb(229,202,19)" fg:x="666576789" fg:w="5744063"/><text x="89.6799%" y="1983.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5,744,063 samples, 0.77%)</title><rect x="89.4299%" y="1957" width="0.7706%" height="15" fill="rgb(229,105,46)" fg:x="666576789" fg:w="5744063"/><text x="89.6799%" y="1967.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5,744,063 samples, 0.77%)</title><rect x="89.4299%" y="1941" width="0.7706%" height="15" fill="rgb(235,108,1)" fg:x="666576789" fg:w="5744063"/><text x="89.6799%" y="1951.50"></text></g><g><title>serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;::insert (823,633 samples, 0.11%)</title><rect x="90.0900%" y="1925" width="0.1105%" height="15" fill="rgb(245,111,35)" fg:x="671497219" fg:w="823633"/><text x="90.3400%" y="1935.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (823,633 samples, 0.11%)</title><rect x="90.0900%" y="1909" width="0.1105%" height="15" fill="rgb(219,185,31)" fg:x="671497219" fg:w="823633"/><text x="90.3400%" y="1919.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (823,633 samples, 0.11%)</title><rect x="90.0900%" y="1893" width="0.1105%" height="15" fill="rgb(214,4,43)" fg:x="671497219" fg:w="823633"/><text x="90.3400%" y="1903.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert_entry (823,633 samples, 0.11%)</title><rect x="90.0900%" y="1877" width="0.1105%" height="15" fill="rgb(235,227,40)" fg:x="671497219" fg:w="823633"/><text x="90.3400%" y="1887.50"></text></g><g><title>serde::de::MapAccess::next_entry (6,124,091 samples, 0.82%)</title><rect x="89.4299%" y="2341" width="0.8216%" height="15" fill="rgb(230,88,30)" fg:x="666576789" fg:w="6124091"/><text x="89.6799%" y="2351.50"></text></g><g><title>serde::de::MapAccess::next_entry_seed (6,124,091 samples, 0.82%)</title><rect x="89.4299%" y="2325" width="0.8216%" height="15" fill="rgb(216,217,1)" fg:x="666576789" fg:w="6124091"/><text x="89.6799%" y="2335.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (6,124,091 samples, 0.82%)</title><rect x="89.4299%" y="2309" width="0.8216%" height="15" fill="rgb(248,139,50)" fg:x="666576789" fg:w="6124091"/><text x="89.6799%" y="2319.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (6,124,091 samples, 0.82%)</title><rect x="89.4299%" y="2293" width="0.8216%" height="15" fill="rgb(233,1,21)" fg:x="666576789" fg:w="6124091"/><text x="89.6799%" y="2303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (6,124,091 samples, 0.82%)</title><rect x="89.4299%" y="2277" width="0.8216%" height="15" fill="rgb(215,183,12)" fg:x="666576789" fg:w="6124091"/><text x="89.6799%" y="2287.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6,124,091 samples, 0.82%)</title><rect x="89.4299%" y="2261" width="0.8216%" height="15" fill="rgb(229,104,42)" fg:x="666576789" fg:w="6124091"/><text x="89.6799%" y="2271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_seq (6,124,091 samples, 0.82%)</title><rect x="89.4299%" y="2245" width="0.8216%" height="15" fill="rgb(243,34,48)" fg:x="666576789" fg:w="6124091"/><text x="89.6799%" y="2255.50"></text></g><g><title>serde::de::SeqAccess::next_element (6,124,091 samples, 0.82%)</title><rect x="89.4299%" y="2229" width="0.8216%" height="15" fill="rgb(239,11,44)" fg:x="666576789" fg:w="6124091"/><text x="89.6799%" y="2239.50"></text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (6,124,091 samples, 0.82%)</title><rect x="89.4299%" y="2213" width="0.8216%" height="15" fill="rgb(231,98,35)" fg:x="666576789" fg:w="6124091"/><text x="89.6799%" y="2223.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (6,124,091 samples, 0.82%)</title><rect x="89.4299%" y="2197" width="0.8216%" height="15" fill="rgb(233,28,25)" fg:x="666576789" fg:w="6124091"/><text x="89.6799%" y="2207.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (6,124,091 samples, 0.82%)</title><rect x="89.4299%" y="2181" width="0.8216%" height="15" fill="rgb(234,123,11)" fg:x="666576789" fg:w="6124091"/><text x="89.6799%" y="2191.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6,124,091 samples, 0.82%)</title><rect x="89.4299%" y="2165" width="0.8216%" height="15" fill="rgb(220,69,3)" fg:x="666576789" fg:w="6124091"/><text x="89.6799%" y="2175.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6,124,091 samples, 0.82%)</title><rect x="89.4299%" y="2149" width="0.8216%" height="15" fill="rgb(214,64,36)" fg:x="666576789" fg:w="6124091"/><text x="89.6799%" y="2159.50"></text></g><g><title>serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;::insert (380,028 samples, 0.05%)</title><rect x="90.2005%" y="2133" width="0.0510%" height="15" fill="rgb(211,138,32)" fg:x="672320852" fg:w="380028"/><text x="90.4505%" y="2143.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (380,028 samples, 0.05%)</title><rect x="90.2005%" y="2117" width="0.0510%" height="15" fill="rgb(213,118,47)" fg:x="672320852" fg:w="380028"/><text x="90.4505%" y="2127.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::entry (380,028 samples, 0.05%)</title><rect x="90.2005%" y="2101" width="0.0510%" height="15" fill="rgb(243,124,49)" fg:x="672320852" fg:w="380028"/><text x="90.4505%" y="2111.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (380,028 samples, 0.05%)</title><rect x="90.2005%" y="2085" width="0.0510%" height="15" fill="rgb(221,30,28)" fg:x="672320852" fg:w="380028"/><text x="90.4505%" y="2095.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (380,028 samples, 0.05%)</title><rect x="90.2005%" y="2069" width="0.0510%" height="15" fill="rgb(246,37,13)" fg:x="672320852" fg:w="380028"/><text x="90.4505%" y="2079.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (380,028 samples, 0.05%)</title><rect x="90.2005%" y="2053" width="0.0510%" height="15" fill="rgb(249,66,14)" fg:x="672320852" fg:w="380028"/><text x="90.4505%" y="2063.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::Ord&gt;::cmp (380,028 samples, 0.05%)</title><rect x="90.2005%" y="2037" width="0.0510%" height="15" fill="rgb(213,166,5)" fg:x="672320852" fg:w="380028"/><text x="90.4505%" y="2047.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::cmp::Ord&gt;::cmp (380,028 samples, 0.05%)</title><rect x="90.2005%" y="2021" width="0.0510%" height="15" fill="rgb(221,66,24)" fg:x="672320852" fg:w="380028"/><text x="90.4505%" y="2031.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::Ord for [T]&gt;::cmp (380,028 samples, 0.05%)</title><rect x="90.2005%" y="2005" width="0.0510%" height="15" fill="rgb(210,132,17)" fg:x="672320852" fg:w="380028"/><text x="90.4505%" y="2015.50"></text></g><g><title>&lt;A as core::slice::cmp::SliceOrd&gt;::compare (380,028 samples, 0.05%)</title><rect x="90.2005%" y="1989" width="0.0510%" height="15" fill="rgb(243,202,5)" fg:x="672320852" fg:w="380028"/><text x="90.4505%" y="1999.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for isize&gt;::cmp (380,028 samples, 0.05%)</title><rect x="90.2005%" y="1973" width="0.0510%" height="15" fill="rgb(233,70,48)" fg:x="672320852" fg:w="380028"/><text x="90.4505%" y="1983.50"></text></g><g><title>serde::de::MapAccess::next_entry (6,970,687 samples, 0.94%)</title><rect x="89.4299%" y="2549" width="0.9352%" height="15" fill="rgb(238,41,26)" fg:x="666576789" fg:w="6970687"/><text x="89.6799%" y="2559.50"></text></g><g><title>serde::de::MapAccess::next_entry_seed (6,970,687 samples, 0.94%)</title><rect x="89.4299%" y="2533" width="0.9352%" height="15" fill="rgb(241,19,31)" fg:x="666576789" fg:w="6970687"/><text x="89.6799%" y="2543.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (6,970,687 samples, 0.94%)</title><rect x="89.4299%" y="2517" width="0.9352%" height="15" fill="rgb(214,76,10)" fg:x="666576789" fg:w="6970687"/><text x="89.6799%" y="2527.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (6,970,687 samples, 0.94%)</title><rect x="89.4299%" y="2501" width="0.9352%" height="15" fill="rgb(254,202,22)" fg:x="666576789" fg:w="6970687"/><text x="89.6799%" y="2511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (6,970,687 samples, 0.94%)</title><rect x="89.4299%" y="2485" width="0.9352%" height="15" fill="rgb(214,72,24)" fg:x="666576789" fg:w="6970687"/><text x="89.6799%" y="2495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6,970,687 samples, 0.94%)</title><rect x="89.4299%" y="2469" width="0.9352%" height="15" fill="rgb(221,92,46)" fg:x="666576789" fg:w="6970687"/><text x="89.6799%" y="2479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_seq (6,970,687 samples, 0.94%)</title><rect x="89.4299%" y="2453" width="0.9352%" height="15" fill="rgb(246,13,50)" fg:x="666576789" fg:w="6970687"/><text x="89.6799%" y="2463.50"></text></g><g><title>serde::de::SeqAccess::next_element (6,970,687 samples, 0.94%)</title><rect x="89.4299%" y="2437" width="0.9352%" height="15" fill="rgb(240,165,38)" fg:x="666576789" fg:w="6970687"/><text x="89.6799%" y="2447.50"></text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (6,970,687 samples, 0.94%)</title><rect x="89.4299%" y="2421" width="0.9352%" height="15" fill="rgb(241,24,51)" fg:x="666576789" fg:w="6970687"/><text x="89.6799%" y="2431.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (6,970,687 samples, 0.94%)</title><rect x="89.4299%" y="2405" width="0.9352%" height="15" fill="rgb(227,51,44)" fg:x="666576789" fg:w="6970687"/><text x="89.6799%" y="2415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (6,970,687 samples, 0.94%)</title><rect x="89.4299%" y="2389" width="0.9352%" height="15" fill="rgb(231,121,3)" fg:x="666576789" fg:w="6970687"/><text x="89.6799%" y="2399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6,970,687 samples, 0.94%)</title><rect x="89.4299%" y="2373" width="0.9352%" height="15" fill="rgb(245,3,41)" fg:x="666576789" fg:w="6970687"/><text x="89.6799%" y="2383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6,970,687 samples, 0.94%)</title><rect x="89.4299%" y="2357" width="0.9352%" height="15" fill="rgb(214,13,26)" fg:x="666576789" fg:w="6970687"/><text x="89.6799%" y="2367.50"></text></g><g><title>serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;::insert (846,596 samples, 0.11%)</title><rect x="90.2515%" y="2341" width="0.1136%" height="15" fill="rgb(252,75,11)" fg:x="672700880" fg:w="846596"/><text x="90.5015%" y="2351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (846,596 samples, 0.11%)</title><rect x="90.2515%" y="2325" width="0.1136%" height="15" fill="rgb(218,226,17)" fg:x="672700880" fg:w="846596"/><text x="90.5015%" y="2335.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (846,596 samples, 0.11%)</title><rect x="90.2515%" y="2309" width="0.1136%" height="15" fill="rgb(248,89,38)" fg:x="672700880" fg:w="846596"/><text x="90.5015%" y="2319.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert_entry (846,596 samples, 0.11%)</title><rect x="90.2515%" y="2293" width="0.1136%" height="15" fill="rgb(237,73,46)" fg:x="672700880" fg:w="846596"/><text x="90.5015%" y="2303.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (846,596 samples, 0.11%)</title><rect x="90.2515%" y="2277" width="0.1136%" height="15" fill="rgb(242,78,33)" fg:x="672700880" fg:w="846596"/><text x="90.5015%" y="2287.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert (846,596 samples, 0.11%)</title><rect x="90.2515%" y="2261" width="0.1136%" height="15" fill="rgb(235,60,3)" fg:x="672700880" fg:w="846596"/><text x="90.5015%" y="2271.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_fit (846,596 samples, 0.11%)</title><rect x="90.2515%" y="2245" width="0.1136%" height="15" fill="rgb(216,172,19)" fg:x="672700880" fg:w="846596"/><text x="90.5015%" y="2255.50"></text></g><g><title>alloc::collections::btree::node::slice_insert (846,596 samples, 0.11%)</title><rect x="90.2515%" y="2229" width="0.1136%" height="15" fill="rgb(227,6,42)" fg:x="672700880" fg:w="846596"/><text x="90.5015%" y="2239.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (846,596 samples, 0.11%)</title><rect x="90.2515%" y="2213" width="0.1136%" height="15" fill="rgb(223,207,42)" fg:x="672700880" fg:w="846596"/><text x="90.5015%" y="2223.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (8,990,702 samples, 1.21%)</title><rect x="89.2939%" y="2709" width="1.2062%" height="15" fill="rgb(246,138,30)" fg:x="665563452" fg:w="8990702"/><text x="89.5439%" y="2719.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (8,990,702 samples, 1.21%)</title><rect x="89.2939%" y="2693" width="1.2062%" height="15" fill="rgb(251,199,47)" fg:x="665563452" fg:w="8990702"/><text x="89.5439%" y="2703.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (8,990,702 samples, 1.21%)</title><rect x="89.2939%" y="2677" width="1.2062%" height="15" fill="rgb(228,218,44)" fg:x="665563452" fg:w="8990702"/><text x="89.5439%" y="2687.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_seq (7,977,365 samples, 1.07%)</title><rect x="89.4299%" y="2661" width="1.0703%" height="15" fill="rgb(220,68,6)" fg:x="666576789" fg:w="7977365"/><text x="89.6799%" y="2671.50"></text></g><g><title>serde::de::SeqAccess::next_element (7,977,365 samples, 1.07%)</title><rect x="89.4299%" y="2645" width="1.0703%" height="15" fill="rgb(240,60,26)" fg:x="666576789" fg:w="7977365"/><text x="89.6799%" y="2655.50"></text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (7,977,365 samples, 1.07%)</title><rect x="89.4299%" y="2629" width="1.0703%" height="15" fill="rgb(211,200,19)" fg:x="666576789" fg:w="7977365"/><text x="89.6799%" y="2639.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (7,977,365 samples, 1.07%)</title><rect x="89.4299%" y="2613" width="1.0703%" height="15" fill="rgb(242,145,30)" fg:x="666576789" fg:w="7977365"/><text x="89.6799%" y="2623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (7,977,365 samples, 1.07%)</title><rect x="89.4299%" y="2597" width="1.0703%" height="15" fill="rgb(225,64,13)" fg:x="666576789" fg:w="7977365"/><text x="89.6799%" y="2607.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (7,977,365 samples, 1.07%)</title><rect x="89.4299%" y="2581" width="1.0703%" height="15" fill="rgb(218,103,35)" fg:x="666576789" fg:w="7977365"/><text x="89.6799%" y="2591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (7,977,365 samples, 1.07%)</title><rect x="89.4299%" y="2565" width="1.0703%" height="15" fill="rgb(216,93,46)" fg:x="666576789" fg:w="7977365"/><text x="89.6799%" y="2575.50"></text></g><g><title>serde::de::MapAccess::next_value (1,006,678 samples, 0.14%)</title><rect x="90.3651%" y="2549" width="0.1351%" height="15" fill="rgb(225,159,27)" fg:x="673547476" fg:w="1006678"/><text x="90.6151%" y="2559.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (1,006,678 samples, 0.14%)</title><rect x="90.3651%" y="2533" width="0.1351%" height="15" fill="rgb(225,204,11)" fg:x="673547476" fg:w="1006678"/><text x="90.6151%" y="2543.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1,006,678 samples, 0.14%)</title><rect x="90.3651%" y="2517" width="0.1351%" height="15" fill="rgb(205,56,4)" fg:x="673547476" fg:w="1006678"/><text x="90.6151%" y="2527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1,006,678 samples, 0.14%)</title><rect x="90.3651%" y="2501" width="0.1351%" height="15" fill="rgb(206,6,35)" fg:x="673547476" fg:w="1006678"/><text x="90.6151%" y="2511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1,006,678 samples, 0.14%)</title><rect x="90.3651%" y="2485" width="0.1351%" height="15" fill="rgb(247,73,52)" fg:x="673547476" fg:w="1006678"/><text x="90.6151%" y="2495.50"></text></g><g><title>serde::de::Visitor::visit_borrowed_str (1,006,678 samples, 0.14%)</title><rect x="90.3651%" y="2469" width="0.1351%" height="15" fill="rgb(246,97,4)" fg:x="673547476" fg:w="1006678"/><text x="90.6151%" y="2479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_str (1,006,678 samples, 0.14%)</title><rect x="90.3651%" y="2453" width="0.1351%" height="15" fill="rgb(212,37,15)" fg:x="673547476" fg:w="1006678"/><text x="90.6151%" y="2463.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (1,006,678 samples, 0.14%)</title><rect x="90.3651%" y="2437" width="0.1351%" height="15" fill="rgb(208,130,40)" fg:x="673547476" fg:w="1006678"/><text x="90.6151%" y="2447.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (1,006,678 samples, 0.14%)</title><rect x="90.3651%" y="2421" width="0.1351%" height="15" fill="rgb(236,55,29)" fg:x="673547476" fg:w="1006678"/><text x="90.6151%" y="2431.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (1,006,678 samples, 0.14%)</title><rect x="90.3651%" y="2405" width="0.1351%" height="15" fill="rgb(209,156,45)" fg:x="673547476" fg:w="1006678"/><text x="90.6151%" y="2415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1,006,678 samples, 0.14%)</title><rect x="90.3651%" y="2389" width="0.1351%" height="15" fill="rgb(249,107,4)" fg:x="673547476" fg:w="1006678"/><text x="90.6151%" y="2399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,006,678 samples, 0.14%)</title><rect x="90.3651%" y="2373" width="0.1351%" height="15" fill="rgb(227,7,13)" fg:x="673547476" fg:w="1006678"/><text x="90.6151%" y="2383.50"></text></g><g><title>alloc::slice::hack::to_vec (1,006,678 samples, 0.14%)</title><rect x="90.3651%" y="2357" width="0.1351%" height="15" fill="rgb(250,129,14)" fg:x="673547476" fg:w="1006678"/><text x="90.6151%" y="2367.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1,006,678 samples, 0.14%)</title><rect x="90.3651%" y="2341" width="0.1351%" height="15" fill="rgb(229,92,13)" fg:x="673547476" fg:w="1006678"/><text x="90.6151%" y="2351.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1,006,678 samples, 0.14%)</title><rect x="90.3651%" y="2325" width="0.1351%" height="15" fill="rgb(245,98,39)" fg:x="673547476" fg:w="1006678"/><text x="90.6151%" y="2335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,006,678 samples, 0.14%)</title><rect x="90.3651%" y="2309" width="0.1351%" height="15" fill="rgb(234,135,48)" fg:x="673547476" fg:w="1006678"/><text x="90.6151%" y="2319.50"></text></g><g><title>[libc.so.6] (1,006,678 samples, 0.14%)</title><rect x="90.3651%" y="2293" width="0.1351%" height="15" fill="rgb(230,98,28)" fg:x="673547476" fg:w="1006678"/><text x="90.6151%" y="2303.50"></text></g><g><title>serde::de::MapAccess::next_entry (10,830,493 samples, 1.45%)</title><rect x="89.1634%" y="2757" width="1.4531%" height="15" fill="rgb(223,121,0)" fg:x="664590964" fg:w="10830493"/><text x="89.4134%" y="2767.50"></text></g><g><title>serde::de::MapAccess::next_entry_seed (10,830,493 samples, 1.45%)</title><rect x="89.1634%" y="2741" width="1.4531%" height="15" fill="rgb(234,173,33)" fg:x="664590964" fg:w="10830493"/><text x="89.4134%" y="2751.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (9,858,005 samples, 1.32%)</title><rect x="89.2939%" y="2725" width="1.3226%" height="15" fill="rgb(245,47,8)" fg:x="665563452" fg:w="9858005"/><text x="89.5439%" y="2735.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_object_colon (867,303 samples, 0.12%)</title><rect x="90.5001%" y="2709" width="0.1164%" height="15" fill="rgb(205,17,20)" fg:x="674554154" fg:w="867303"/><text x="90.7501%" y="2719.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (867,303 samples, 0.12%)</title><rect x="90.5001%" y="2693" width="0.1164%" height="15" fill="rgb(232,151,16)" fg:x="674554154" fg:w="867303"/><text x="90.7501%" y="2703.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (867,303 samples, 0.12%)</title><rect x="90.5001%" y="2677" width="0.1164%" height="15" fill="rgb(208,30,32)" fg:x="674554154" fg:w="867303"/><text x="90.7501%" y="2687.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::peek (867,303 samples, 0.12%)</title><rect x="90.5001%" y="2661" width="0.1164%" height="15" fill="rgb(254,26,3)" fg:x="674554154" fg:w="867303"/><text x="90.7501%" y="2671.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::peek (867,303 samples, 0.12%)</title><rect x="90.5001%" y="2645" width="0.1164%" height="15" fill="rgb(240,177,30)" fg:x="674554154" fg:w="867303"/><text x="90.7501%" y="2655.50"></text></g><g><title>serde::de::MapAccess::next_value (1,004,810 samples, 0.13%)</title><rect x="90.6165%" y="2757" width="0.1348%" height="15" fill="rgb(248,76,44)" fg:x="675421457" fg:w="1004810"/><text x="90.8665%" y="2767.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (1,004,810 samples, 0.13%)</title><rect x="90.6165%" y="2741" width="0.1348%" height="15" fill="rgb(241,186,54)" fg:x="675421457" fg:w="1004810"/><text x="90.8665%" y="2751.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1,004,810 samples, 0.13%)</title><rect x="90.6165%" y="2725" width="0.1348%" height="15" fill="rgb(249,171,29)" fg:x="675421457" fg:w="1004810"/><text x="90.8665%" y="2735.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1,004,810 samples, 0.13%)</title><rect x="90.6165%" y="2709" width="0.1348%" height="15" fill="rgb(237,151,44)" fg:x="675421457" fg:w="1004810"/><text x="90.8665%" y="2719.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1,004,810 samples, 0.13%)</title><rect x="90.6165%" y="2693" width="0.1348%" height="15" fill="rgb(228,174,30)" fg:x="675421457" fg:w="1004810"/><text x="90.8665%" y="2703.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1,004,810 samples, 0.13%)</title><rect x="90.6165%" y="2677" width="0.1348%" height="15" fill="rgb(252,14,37)" fg:x="675421457" fg:w="1004810"/><text x="90.8665%" y="2687.50"></text></g><g><title>serde_json::read::SliceRead::parse_str_bytes (1,004,810 samples, 0.13%)</title><rect x="90.6165%" y="2661" width="0.1348%" height="15" fill="rgb(207,111,40)" fg:x="675421457" fg:w="1004810"/><text x="90.8665%" y="2671.50"></text></g><g><title>serde_json::read::SliceRead::skip_to_escape (1,004,810 samples, 0.13%)</title><rect x="90.6165%" y="2645" width="0.1348%" height="15" fill="rgb(248,171,54)" fg:x="675421457" fg:w="1004810"/><text x="90.8665%" y="2655.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_seq (12,843,842 samples, 1.72%)</title><rect x="89.1634%" y="2869" width="1.7232%" height="15" fill="rgb(211,127,2)" fg:x="664590964" fg:w="12843842"/><text x="89.4134%" y="2879.50"></text></g><g><title>serde::de::SeqAccess::next_element (12,843,842 samples, 1.72%)</title><rect x="89.1634%" y="2853" width="1.7232%" height="15" fill="rgb(236,87,47)" fg:x="664590964" fg:w="12843842"/><text x="89.4134%" y="2863.50"></text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (12,843,842 samples, 1.72%)</title><rect x="89.1634%" y="2837" width="1.7232%" height="15" fill="rgb(223,190,45)" fg:x="664590964" fg:w="12843842"/><text x="89.4134%" y="2847.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (12,843,842 samples, 1.72%)</title><rect x="89.1634%" y="2821" width="1.7232%" height="15" fill="rgb(215,5,16)" fg:x="664590964" fg:w="12843842"/><text x="89.4134%" y="2831.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (12,843,842 samples, 1.72%)</title><rect x="89.1634%" y="2805" width="1.7232%" height="15" fill="rgb(252,82,33)" fg:x="664590964" fg:w="12843842"/><text x="89.4134%" y="2815.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (12,843,842 samples, 1.72%)</title><rect x="89.1634%" y="2789" width="1.7232%" height="15" fill="rgb(247,213,44)" fg:x="664590964" fg:w="12843842"/><text x="89.4134%" y="2799.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (12,843,842 samples, 1.72%)</title><rect x="89.1634%" y="2773" width="1.7232%" height="15" fill="rgb(205,196,44)" fg:x="664590964" fg:w="12843842"/><text x="89.4134%" y="2783.50"></text></g><g><title>serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;::insert (1,008,539 samples, 0.14%)</title><rect x="90.7513%" y="2757" width="0.1353%" height="15" fill="rgb(237,96,54)" fg:x="676426267" fg:w="1008539"/><text x="91.0013%" y="2767.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1,008,539 samples, 0.14%)</title><rect x="90.7513%" y="2741" width="0.1353%" height="15" fill="rgb(230,113,34)" fg:x="676426267" fg:w="1008539"/><text x="91.0013%" y="2751.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1,008,539 samples, 0.14%)</title><rect x="90.7513%" y="2725" width="0.1353%" height="15" fill="rgb(221,224,12)" fg:x="676426267" fg:w="1008539"/><text x="91.0013%" y="2735.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert_entry (1,008,539 samples, 0.14%)</title><rect x="90.7513%" y="2709" width="0.1353%" height="15" fill="rgb(219,112,44)" fg:x="676426267" fg:w="1008539"/><text x="91.0013%" y="2719.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1,008,539 samples, 0.14%)</title><rect x="90.7513%" y="2693" width="0.1353%" height="15" fill="rgb(210,31,13)" fg:x="676426267" fg:w="1008539"/><text x="91.0013%" y="2703.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert (1,008,539 samples, 0.14%)</title><rect x="90.7513%" y="2677" width="0.1353%" height="15" fill="rgb(230,25,16)" fg:x="676426267" fg:w="1008539"/><text x="91.0013%" y="2687.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::len (1,008,539 samples, 0.14%)</title><rect x="90.7513%" y="2661" width="0.1353%" height="15" fill="rgb(246,108,53)" fg:x="676426267" fg:w="1008539"/><text x="91.0013%" y="2671.50"></text></g><g><title>serde::de::MapAccess::next_entry (15,369,589 samples, 2.06%)</title><rect x="88.8916%" y="2965" width="2.0620%" height="15" fill="rgb(241,172,50)" fg:x="662564752" fg:w="15369589"/><text x="89.1416%" y="2975.50">s..</text></g><g><title>serde::de::MapAccess::next_entry_seed (15,369,589 samples, 2.06%)</title><rect x="88.8916%" y="2949" width="2.0620%" height="15" fill="rgb(235,141,10)" fg:x="662564752" fg:w="15369589"/><text x="89.1416%" y="2959.50">s..</text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (13,343,377 samples, 1.79%)</title><rect x="89.1634%" y="2933" width="1.7902%" height="15" fill="rgb(220,174,43)" fg:x="664590964" fg:w="13343377"/><text x="89.4134%" y="2943.50">&lt;..</text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (13,343,377 samples, 1.79%)</title><rect x="89.1634%" y="2917" width="1.7902%" height="15" fill="rgb(215,181,40)" fg:x="664590964" fg:w="13343377"/><text x="89.4134%" y="2927.50">&lt;..</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (13,343,377 samples, 1.79%)</title><rect x="89.1634%" y="2901" width="1.7902%" height="15" fill="rgb(230,97,2)" fg:x="664590964" fg:w="13343377"/><text x="89.4134%" y="2911.50">s..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (13,343,377 samples, 1.79%)</title><rect x="89.1634%" y="2885" width="1.7902%" height="15" fill="rgb(211,25,27)" fg:x="664590964" fg:w="13343377"/><text x="89.4134%" y="2895.50">&lt;..</text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_any_number (499,535 samples, 0.07%)</title><rect x="90.8866%" y="2869" width="0.0670%" height="15" fill="rgb(230,87,26)" fg:x="677434806" fg:w="499535"/><text x="91.1366%" y="2879.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (16,146,283 samples, 2.17%)</title><rect x="88.8916%" y="2981" width="2.1662%" height="15" fill="rgb(227,160,17)" fg:x="662564752" fg:w="16146283"/><text x="89.1416%" y="2991.50">&lt;..</text></g><g><title>serde::de::MapAccess::next_value (776,694 samples, 0.10%)</title><rect x="90.9536%" y="2965" width="0.1042%" height="15" fill="rgb(244,85,34)" fg:x="677934341" fg:w="776694"/><text x="91.2036%" y="2975.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (776,694 samples, 0.10%)</title><rect x="90.9536%" y="2949" width="0.1042%" height="15" fill="rgb(207,70,0)" fg:x="677934341" fg:w="776694"/><text x="91.2036%" y="2959.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (776,694 samples, 0.10%)</title><rect x="90.9536%" y="2933" width="0.1042%" height="15" fill="rgb(223,129,7)" fg:x="677934341" fg:w="776694"/><text x="91.2036%" y="2943.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (776,694 samples, 0.10%)</title><rect x="90.9536%" y="2917" width="0.1042%" height="15" fill="rgb(246,105,7)" fg:x="677934341" fg:w="776694"/><text x="91.2036%" y="2927.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (776,694 samples, 0.10%)</title><rect x="90.9536%" y="2901" width="0.1042%" height="15" fill="rgb(215,154,42)" fg:x="677934341" fg:w="776694"/><text x="91.2036%" y="2911.50"></text></g><g><title>serde::de::Visitor::visit_borrowed_str (776,694 samples, 0.10%)</title><rect x="90.9536%" y="2885" width="0.1042%" height="15" fill="rgb(220,215,30)" fg:x="677934341" fg:w="776694"/><text x="91.2036%" y="2895.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_str (776,694 samples, 0.10%)</title><rect x="90.9536%" y="2869" width="0.1042%" height="15" fill="rgb(228,81,51)" fg:x="677934341" fg:w="776694"/><text x="91.2036%" y="2879.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (776,694 samples, 0.10%)</title><rect x="90.9536%" y="2853" width="0.1042%" height="15" fill="rgb(247,71,54)" fg:x="677934341" fg:w="776694"/><text x="91.2036%" y="2863.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (776,694 samples, 0.10%)</title><rect x="90.9536%" y="2837" width="0.1042%" height="15" fill="rgb(234,176,34)" fg:x="677934341" fg:w="776694"/><text x="91.2036%" y="2847.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (776,694 samples, 0.10%)</title><rect x="90.9536%" y="2821" width="0.1042%" height="15" fill="rgb(241,103,54)" fg:x="677934341" fg:w="776694"/><text x="91.2036%" y="2831.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (776,694 samples, 0.10%)</title><rect x="90.9536%" y="2805" width="0.1042%" height="15" fill="rgb(228,22,34)" fg:x="677934341" fg:w="776694"/><text x="91.2036%" y="2815.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (776,694 samples, 0.10%)</title><rect x="90.9536%" y="2789" width="0.1042%" height="15" fill="rgb(241,179,48)" fg:x="677934341" fg:w="776694"/><text x="91.2036%" y="2799.50"></text></g><g><title>alloc::slice::hack::to_vec (776,694 samples, 0.10%)</title><rect x="90.9536%" y="2773" width="0.1042%" height="15" fill="rgb(235,167,37)" fg:x="677934341" fg:w="776694"/><text x="91.2036%" y="2783.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (776,694 samples, 0.10%)</title><rect x="90.9536%" y="2757" width="0.1042%" height="15" fill="rgb(213,109,30)" fg:x="677934341" fg:w="776694"/><text x="91.2036%" y="2767.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (776,694 samples, 0.10%)</title><rect x="90.9536%" y="2741" width="0.1042%" height="15" fill="rgb(222,172,16)" fg:x="677934341" fg:w="776694"/><text x="91.2036%" y="2751.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (776,694 samples, 0.10%)</title><rect x="90.9536%" y="2725" width="0.1042%" height="15" fill="rgb(233,192,5)" fg:x="677934341" fg:w="776694"/><text x="91.2036%" y="2735.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (776,694 samples, 0.10%)</title><rect x="90.9536%" y="2709" width="0.1042%" height="15" fill="rgb(247,189,41)" fg:x="677934341" fg:w="776694"/><text x="91.2036%" y="2719.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (776,694 samples, 0.10%)</title><rect x="90.9536%" y="2693" width="0.1042%" height="15" fill="rgb(218,134,47)" fg:x="677934341" fg:w="776694"/><text x="91.2036%" y="2703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (776,694 samples, 0.10%)</title><rect x="90.9536%" y="2677" width="0.1042%" height="15" fill="rgb(216,29,3)" fg:x="677934341" fg:w="776694"/><text x="91.2036%" y="2687.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (776,694 samples, 0.10%)</title><rect x="90.9536%" y="2661" width="0.1042%" height="15" fill="rgb(246,140,12)" fg:x="677934341" fg:w="776694"/><text x="91.2036%" y="2671.50"></text></g><g><title>alloc::alloc::alloc (776,694 samples, 0.10%)</title><rect x="90.9536%" y="2645" width="0.1042%" height="15" fill="rgb(230,136,11)" fg:x="677934341" fg:w="776694"/><text x="91.2036%" y="2655.50"></text></g><g><title>malloc (776,694 samples, 0.10%)</title><rect x="90.9536%" y="2629" width="0.1042%" height="15" fill="rgb(247,22,47)" fg:x="677934341" fg:w="776694"/><text x="91.2036%" y="2639.50"></text></g><g><title>[libc.so.6] (776,694 samples, 0.10%)</title><rect x="90.9536%" y="2613" width="0.1042%" height="15" fill="rgb(218,84,22)" fg:x="677934341" fg:w="776694"/><text x="91.2036%" y="2623.50"></text></g><g><title>serde::de::MapAccess::next_entry (18,007,767 samples, 2.42%)</title><rect x="88.7651%" y="3381" width="2.4160%" height="15" fill="rgb(216,87,39)" fg:x="661622210" fg:w="18007767"/><text x="89.0151%" y="3391.50">se..</text></g><g><title>serde::de::MapAccess::next_entry_seed (18,007,767 samples, 2.42%)</title><rect x="88.7651%" y="3365" width="2.4160%" height="15" fill="rgb(221,178,8)" fg:x="661622210" fg:w="18007767"/><text x="89.0151%" y="3375.50">se..</text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (18,007,767 samples, 2.42%)</title><rect x="88.7651%" y="3349" width="2.4160%" height="15" fill="rgb(230,42,11)" fg:x="661622210" fg:w="18007767"/><text x="89.0151%" y="3359.50">&lt;s..</text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (18,007,767 samples, 2.42%)</title><rect x="88.7651%" y="3333" width="2.4160%" height="15" fill="rgb(237,229,4)" fg:x="661622210" fg:w="18007767"/><text x="89.0151%" y="3343.50">&lt;c..</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (18,007,767 samples, 2.42%)</title><rect x="88.7651%" y="3317" width="2.4160%" height="15" fill="rgb(222,31,33)" fg:x="661622210" fg:w="18007767"/><text x="89.0151%" y="3327.50">se..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (18,007,767 samples, 2.42%)</title><rect x="88.7651%" y="3301" width="2.4160%" height="15" fill="rgb(210,17,39)" fg:x="661622210" fg:w="18007767"/><text x="89.0151%" y="3311.50">&lt;&amp;..</text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_seq (18,007,767 samples, 2.42%)</title><rect x="88.7651%" y="3285" width="2.4160%" height="15" fill="rgb(244,93,20)" fg:x="661622210" fg:w="18007767"/><text x="89.0151%" y="3295.50">&lt;s..</text></g><g><title>serde::de::SeqAccess::next_element (18,007,767 samples, 2.42%)</title><rect x="88.7651%" y="3269" width="2.4160%" height="15" fill="rgb(210,40,47)" fg:x="661622210" fg:w="18007767"/><text x="89.0151%" y="3279.50">se..</text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (18,007,767 samples, 2.42%)</title><rect x="88.7651%" y="3253" width="2.4160%" height="15" fill="rgb(239,211,47)" fg:x="661622210" fg:w="18007767"/><text x="89.0151%" y="3263.50">&lt;s..</text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (18,007,767 samples, 2.42%)</title><rect x="88.7651%" y="3237" width="2.4160%" height="15" fill="rgb(251,223,49)" fg:x="661622210" fg:w="18007767"/><text x="89.0151%" y="3247.50">&lt;c..</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (18,007,767 samples, 2.42%)</title><rect x="88.7651%" y="3221" width="2.4160%" height="15" fill="rgb(221,149,5)" fg:x="661622210" fg:w="18007767"/><text x="89.0151%" y="3231.50">se..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (18,007,767 samples, 2.42%)</title><rect x="88.7651%" y="3205" width="2.4160%" height="15" fill="rgb(219,224,51)" fg:x="661622210" fg:w="18007767"/><text x="89.0151%" y="3215.50">&lt;&amp;..</text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (18,007,767 samples, 2.42%)</title><rect x="88.7651%" y="3189" width="2.4160%" height="15" fill="rgb(223,7,8)" fg:x="661622210" fg:w="18007767"/><text x="89.0151%" y="3199.50">&lt;s..</text></g><g><title>serde::de::MapAccess::next_entry (18,007,767 samples, 2.42%)</title><rect x="88.7651%" y="3173" width="2.4160%" height="15" fill="rgb(241,217,22)" fg:x="661622210" fg:w="18007767"/><text x="89.0151%" y="3183.50">se..</text></g><g><title>serde::de::MapAccess::next_entry_seed (18,007,767 samples, 2.42%)</title><rect x="88.7651%" y="3157" width="2.4160%" height="15" fill="rgb(248,209,0)" fg:x="661622210" fg:w="18007767"/><text x="89.0151%" y="3167.50">se..</text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (18,007,767 samples, 2.42%)</title><rect x="88.7651%" y="3141" width="2.4160%" height="15" fill="rgb(217,205,4)" fg:x="661622210" fg:w="18007767"/><text x="89.0151%" y="3151.50">&lt;s..</text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (18,007,767 samples, 2.42%)</title><rect x="88.7651%" y="3125" width="2.4160%" height="15" fill="rgb(228,124,39)" fg:x="661622210" fg:w="18007767"/><text x="89.0151%" y="3135.50">&lt;c..</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (18,007,767 samples, 2.42%)</title><rect x="88.7651%" y="3109" width="2.4160%" height="15" fill="rgb(250,116,42)" fg:x="661622210" fg:w="18007767"/><text x="89.0151%" y="3119.50">se..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (18,007,767 samples, 2.42%)</title><rect x="88.7651%" y="3093" width="2.4160%" height="15" fill="rgb(223,202,9)" fg:x="661622210" fg:w="18007767"/><text x="89.0151%" y="3103.50">&lt;&amp;..</text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_seq (18,007,767 samples, 2.42%)</title><rect x="88.7651%" y="3077" width="2.4160%" height="15" fill="rgb(242,222,40)" fg:x="661622210" fg:w="18007767"/><text x="89.0151%" y="3087.50">&lt;s..</text></g><g><title>serde::de::SeqAccess::next_element (17,065,225 samples, 2.29%)</title><rect x="88.8916%" y="3061" width="2.2895%" height="15" fill="rgb(229,99,46)" fg:x="662564752" fg:w="17065225"/><text x="89.1416%" y="3071.50">s..</text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (17,065,225 samples, 2.29%)</title><rect x="88.8916%" y="3045" width="2.2895%" height="15" fill="rgb(225,56,46)" fg:x="662564752" fg:w="17065225"/><text x="89.1416%" y="3055.50">&lt;..</text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (17,065,225 samples, 2.29%)</title><rect x="88.8916%" y="3029" width="2.2895%" height="15" fill="rgb(227,94,5)" fg:x="662564752" fg:w="17065225"/><text x="89.1416%" y="3039.50">&lt;..</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (17,065,225 samples, 2.29%)</title><rect x="88.8916%" y="3013" width="2.2895%" height="15" fill="rgb(205,112,38)" fg:x="662564752" fg:w="17065225"/><text x="89.1416%" y="3023.50">s..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (17,065,225 samples, 2.29%)</title><rect x="88.8916%" y="2997" width="2.2895%" height="15" fill="rgb(231,133,46)" fg:x="662564752" fg:w="17065225"/><text x="89.1416%" y="3007.50">&lt;..</text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (918,942 samples, 0.12%)</title><rect x="91.0578%" y="2981" width="0.1233%" height="15" fill="rgb(217,16,9)" fg:x="678711035" fg:w="918942"/><text x="91.3078%" y="2991.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (918,942 samples, 0.12%)</title><rect x="91.0578%" y="2965" width="0.1233%" height="15" fill="rgb(249,173,9)" fg:x="678711035" fg:w="918942"/><text x="91.3078%" y="2975.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::peek (918,942 samples, 0.12%)</title><rect x="91.0578%" y="2949" width="0.1233%" height="15" fill="rgb(205,163,53)" fg:x="678711035" fg:w="918942"/><text x="91.3078%" y="2959.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::peek (918,942 samples, 0.12%)</title><rect x="91.0578%" y="2933" width="0.1233%" height="15" fill="rgb(217,54,41)" fg:x="678711035" fg:w="918942"/><text x="91.3078%" y="2943.50"></text></g><g><title>serde::de::MapAccess::next_entry (21,061,210 samples, 2.83%)</title><rect x="88.4737%" y="4421" width="2.8256%" height="15" fill="rgb(228,216,12)" fg:x="659449609" fg:w="21061210"/><text x="88.7237%" y="4431.50">se..</text></g><g><title>serde::de::MapAccess::next_entry_seed (21,061,210 samples, 2.83%)</title><rect x="88.4737%" y="4405" width="2.8256%" height="15" fill="rgb(244,228,15)" fg:x="659449609" fg:w="21061210"/><text x="88.7237%" y="4415.50">se..</text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (19,767,949 samples, 2.65%)</title><rect x="88.6472%" y="4389" width="2.6521%" height="15" fill="rgb(221,176,53)" fg:x="660742870" fg:w="19767949"/><text x="88.8972%" y="4399.50">&lt;s..</text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (19,767,949 samples, 2.65%)</title><rect x="88.6472%" y="4373" width="2.6521%" height="15" fill="rgb(205,94,34)" fg:x="660742870" fg:w="19767949"/><text x="88.8972%" y="4383.50">&lt;c..</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (19,767,949 samples, 2.65%)</title><rect x="88.6472%" y="4357" width="2.6521%" height="15" fill="rgb(213,110,48)" fg:x="660742870" fg:w="19767949"/><text x="88.8972%" y="4367.50">se..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (19,767,949 samples, 2.65%)</title><rect x="88.6472%" y="4341" width="2.6521%" height="15" fill="rgb(236,142,28)" fg:x="660742870" fg:w="19767949"/><text x="88.8972%" y="4351.50">&lt;&amp;..</text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_seq (19,767,949 samples, 2.65%)</title><rect x="88.6472%" y="4325" width="2.6521%" height="15" fill="rgb(225,135,29)" fg:x="660742870" fg:w="19767949"/><text x="88.8972%" y="4335.50">&lt;s..</text></g><g><title>serde::de::SeqAccess::next_element (19,767,949 samples, 2.65%)</title><rect x="88.6472%" y="4309" width="2.6521%" height="15" fill="rgb(252,45,31)" fg:x="660742870" fg:w="19767949"/><text x="88.8972%" y="4319.50">se..</text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (19,767,949 samples, 2.65%)</title><rect x="88.6472%" y="4293" width="2.6521%" height="15" fill="rgb(211,187,50)" fg:x="660742870" fg:w="19767949"/><text x="88.8972%" y="4303.50">&lt;s..</text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (19,767,949 samples, 2.65%)</title><rect x="88.6472%" y="4277" width="2.6521%" height="15" fill="rgb(229,109,7)" fg:x="660742870" fg:w="19767949"/><text x="88.8972%" y="4287.50">&lt;c..</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (19,767,949 samples, 2.65%)</title><rect x="88.6472%" y="4261" width="2.6521%" height="15" fill="rgb(251,131,51)" fg:x="660742870" fg:w="19767949"/><text x="88.8972%" y="4271.50">se..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (19,767,949 samples, 2.65%)</title><rect x="88.6472%" y="4245" width="2.6521%" height="15" fill="rgb(251,180,35)" fg:x="660742870" fg:w="19767949"/><text x="88.8972%" y="4255.50">&lt;&amp;..</text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (19,767,949 samples, 2.65%)</title><rect x="88.6472%" y="4229" width="2.6521%" height="15" fill="rgb(211,46,32)" fg:x="660742870" fg:w="19767949"/><text x="88.8972%" y="4239.50">&lt;s..</text></g><g><title>serde::de::MapAccess::next_entry (19,767,949 samples, 2.65%)</title><rect x="88.6472%" y="4213" width="2.6521%" height="15" fill="rgb(248,123,17)" fg:x="660742870" fg:w="19767949"/><text x="88.8972%" y="4223.50">se..</text></g><g><title>serde::de::MapAccess::next_entry_seed (19,767,949 samples, 2.65%)</title><rect x="88.6472%" y="4197" width="2.6521%" height="15" fill="rgb(227,141,18)" fg:x="660742870" fg:w="19767949"/><text x="88.8972%" y="4207.50">se..</text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (19,767,949 samples, 2.65%)</title><rect x="88.6472%" y="4181" width="2.6521%" height="15" fill="rgb(216,102,9)" fg:x="660742870" fg:w="19767949"/><text x="88.8972%" y="4191.50">&lt;s..</text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (19,767,949 samples, 2.65%)</title><rect x="88.6472%" y="4165" width="2.6521%" height="15" fill="rgb(253,47,13)" fg:x="660742870" fg:w="19767949"/><text x="88.8972%" y="4175.50">&lt;c..</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (19,767,949 samples, 2.65%)</title><rect x="88.6472%" y="4149" width="2.6521%" height="15" fill="rgb(226,93,23)" fg:x="660742870" fg:w="19767949"/><text x="88.8972%" y="4159.50">se..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (19,767,949 samples, 2.65%)</title><rect x="88.6472%" y="4133" width="2.6521%" height="15" fill="rgb(247,104,17)" fg:x="660742870" fg:w="19767949"/><text x="88.8972%" y="4143.50">&lt;&amp;..</text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_seq (19,767,949 samples, 2.65%)</title><rect x="88.6472%" y="4117" width="2.6521%" height="15" fill="rgb(233,203,26)" fg:x="660742870" fg:w="19767949"/><text x="88.8972%" y="4127.50">&lt;s..</text></g><g><title>serde::de::SeqAccess::next_element (19,767,949 samples, 2.65%)</title><rect x="88.6472%" y="4101" width="2.6521%" height="15" fill="rgb(244,98,49)" fg:x="660742870" fg:w="19767949"/><text x="88.8972%" y="4111.50">se..</text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (19,767,949 samples, 2.65%)</title><rect x="88.6472%" y="4085" width="2.6521%" height="15" fill="rgb(235,134,22)" fg:x="660742870" fg:w="19767949"/><text x="88.8972%" y="4095.50">&lt;s..</text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (19,767,949 samples, 2.65%)</title><rect x="88.6472%" y="4069" width="2.6521%" height="15" fill="rgb(221,70,32)" fg:x="660742870" fg:w="19767949"/><text x="88.8972%" y="4079.50">&lt;c..</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (19,767,949 samples, 2.65%)</title><rect x="88.6472%" y="4053" width="2.6521%" height="15" fill="rgb(238,15,50)" fg:x="660742870" fg:w="19767949"/><text x="88.8972%" y="4063.50">se..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (19,767,949 samples, 2.65%)</title><rect x="88.6472%" y="4037" width="2.6521%" height="15" fill="rgb(215,221,48)" fg:x="660742870" fg:w="19767949"/><text x="88.8972%" y="4047.50">&lt;&amp;..</text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (19,767,949 samples, 2.65%)</title><rect x="88.6472%" y="4021" width="2.6521%" height="15" fill="rgb(236,73,3)" fg:x="660742870" fg:w="19767949"/><text x="88.8972%" y="4031.50">&lt;s..</text></g><g><title>serde::de::MapAccess::next_entry (19,767,949 samples, 2.65%)</title><rect x="88.6472%" y="4005" width="2.6521%" height="15" fill="rgb(250,107,11)" fg:x="660742870" fg:w="19767949"/><text x="88.8972%" y="4015.50">se..</text></g><g><title>serde::de::MapAccess::next_entry_seed (19,767,949 samples, 2.65%)</title><rect x="88.6472%" y="3989" width="2.6521%" height="15" fill="rgb(242,39,14)" fg:x="660742870" fg:w="19767949"/><text x="88.8972%" y="3999.50">se..</text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (19,767,949 samples, 2.65%)</title><rect x="88.6472%" y="3973" width="2.6521%" height="15" fill="rgb(248,164,37)" fg:x="660742870" fg:w="19767949"/><text x="88.8972%" y="3983.50">&lt;s..</text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (19,767,949 samples, 2.65%)</title><rect x="88.6472%" y="3957" width="2.6521%" height="15" fill="rgb(217,60,12)" fg:x="660742870" fg:w="19767949"/><text x="88.8972%" y="3967.50">&lt;c..</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (19,767,949 samples, 2.65%)</title><rect x="88.6472%" y="3941" width="2.6521%" height="15" fill="rgb(240,125,29)" fg:x="660742870" fg:w="19767949"/><text x="88.8972%" y="3951.50">se..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (19,767,949 samples, 2.65%)</title><rect x="88.6472%" y="3925" width="2.6521%" height="15" fill="rgb(208,207,28)" fg:x="660742870" fg:w="19767949"/><text x="88.8972%" y="3935.50">&lt;&amp;..</text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_seq (19,767,949 samples, 2.65%)</title><rect x="88.6472%" y="3909" width="2.6521%" height="15" fill="rgb(209,159,27)" fg:x="660742870" fg:w="19767949"/><text x="88.8972%" y="3919.50">&lt;s..</text></g><g><title>serde::de::SeqAccess::next_element (19,767,949 samples, 2.65%)</title><rect x="88.6472%" y="3893" width="2.6521%" height="15" fill="rgb(251,176,53)" fg:x="660742870" fg:w="19767949"/><text x="88.8972%" y="3903.50">se..</text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (19,767,949 samples, 2.65%)</title><rect x="88.6472%" y="3877" width="2.6521%" height="15" fill="rgb(211,85,7)" fg:x="660742870" fg:w="19767949"/><text x="88.8972%" y="3887.50">&lt;s..</text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (19,767,949 samples, 2.65%)</title><rect x="88.6472%" y="3861" width="2.6521%" height="15" fill="rgb(216,64,54)" fg:x="660742870" fg:w="19767949"/><text x="88.8972%" y="3871.50">&lt;c..</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (19,767,949 samples, 2.65%)</title><rect x="88.6472%" y="3845" width="2.6521%" height="15" fill="rgb(217,54,24)" fg:x="660742870" fg:w="19767949"/><text x="88.8972%" y="3855.50">se..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (19,767,949 samples, 2.65%)</title><rect x="88.6472%" y="3829" width="2.6521%" height="15" fill="rgb(208,206,53)" fg:x="660742870" fg:w="19767949"/><text x="88.8972%" y="3839.50">&lt;&amp;..</text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (19,767,949 samples, 2.65%)</title><rect x="88.6472%" y="3813" width="2.6521%" height="15" fill="rgb(251,74,39)" fg:x="660742870" fg:w="19767949"/><text x="88.8972%" y="3823.50">&lt;s..</text></g><g><title>serde::de::MapAccess::next_entry (19,767,949 samples, 2.65%)</title><rect x="88.6472%" y="3797" width="2.6521%" height="15" fill="rgb(226,47,5)" fg:x="660742870" fg:w="19767949"/><text x="88.8972%" y="3807.50">se..</text></g><g><title>serde::de::MapAccess::next_entry_seed (19,767,949 samples, 2.65%)</title><rect x="88.6472%" y="3781" width="2.6521%" height="15" fill="rgb(234,111,33)" fg:x="660742870" fg:w="19767949"/><text x="88.8972%" y="3791.50">se..</text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (19,767,949 samples, 2.65%)</title><rect x="88.6472%" y="3765" width="2.6521%" height="15" fill="rgb(251,14,10)" fg:x="660742870" fg:w="19767949"/><text x="88.8972%" y="3775.50">&lt;s..</text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (19,767,949 samples, 2.65%)</title><rect x="88.6472%" y="3749" width="2.6521%" height="15" fill="rgb(232,43,0)" fg:x="660742870" fg:w="19767949"/><text x="88.8972%" y="3759.50">&lt;c..</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (19,767,949 samples, 2.65%)</title><rect x="88.6472%" y="3733" width="2.6521%" height="15" fill="rgb(222,68,43)" fg:x="660742870" fg:w="19767949"/><text x="88.8972%" y="3743.50">se..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (19,767,949 samples, 2.65%)</title><rect x="88.6472%" y="3717" width="2.6521%" height="15" fill="rgb(217,24,23)" fg:x="660742870" fg:w="19767949"/><text x="88.8972%" y="3727.50">&lt;&amp;..</text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_seq (18,888,609 samples, 2.53%)</title><rect x="88.7651%" y="3701" width="2.5342%" height="15" fill="rgb(229,209,14)" fg:x="661622210" fg:w="18888609"/><text x="89.0151%" y="3711.50">&lt;s..</text></g><g><title>serde::de::SeqAccess::next_element (18,888,609 samples, 2.53%)</title><rect x="88.7651%" y="3685" width="2.5342%" height="15" fill="rgb(250,149,48)" fg:x="661622210" fg:w="18888609"/><text x="89.0151%" y="3695.50">se..</text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (18,888,609 samples, 2.53%)</title><rect x="88.7651%" y="3669" width="2.5342%" height="15" fill="rgb(210,120,37)" fg:x="661622210" fg:w="18888609"/><text x="89.0151%" y="3679.50">&lt;s..</text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (18,888,609 samples, 2.53%)</title><rect x="88.7651%" y="3653" width="2.5342%" height="15" fill="rgb(210,21,8)" fg:x="661622210" fg:w="18888609"/><text x="89.0151%" y="3663.50">&lt;c..</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (18,888,609 samples, 2.53%)</title><rect x="88.7651%" y="3637" width="2.5342%" height="15" fill="rgb(243,145,7)" fg:x="661622210" fg:w="18888609"/><text x="89.0151%" y="3647.50">se..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (18,888,609 samples, 2.53%)</title><rect x="88.7651%" y="3621" width="2.5342%" height="15" fill="rgb(238,178,32)" fg:x="661622210" fg:w="18888609"/><text x="89.0151%" y="3631.50">&lt;&amp;..</text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (18,888,609 samples, 2.53%)</title><rect x="88.7651%" y="3605" width="2.5342%" height="15" fill="rgb(222,4,10)" fg:x="661622210" fg:w="18888609"/><text x="89.0151%" y="3615.50">&lt;s..</text></g><g><title>serde::de::MapAccess::next_entry (18,888,609 samples, 2.53%)</title><rect x="88.7651%" y="3589" width="2.5342%" height="15" fill="rgb(239,7,37)" fg:x="661622210" fg:w="18888609"/><text x="89.0151%" y="3599.50">se..</text></g><g><title>serde::de::MapAccess::next_entry_seed (18,888,609 samples, 2.53%)</title><rect x="88.7651%" y="3573" width="2.5342%" height="15" fill="rgb(215,31,37)" fg:x="661622210" fg:w="18888609"/><text x="89.0151%" y="3583.50">se..</text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (18,888,609 samples, 2.53%)</title><rect x="88.7651%" y="3557" width="2.5342%" height="15" fill="rgb(224,83,33)" fg:x="661622210" fg:w="18888609"/><text x="89.0151%" y="3567.50">&lt;s..</text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (18,888,609 samples, 2.53%)</title><rect x="88.7651%" y="3541" width="2.5342%" height="15" fill="rgb(239,55,3)" fg:x="661622210" fg:w="18888609"/><text x="89.0151%" y="3551.50">&lt;c..</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (18,888,609 samples, 2.53%)</title><rect x="88.7651%" y="3525" width="2.5342%" height="15" fill="rgb(247,92,11)" fg:x="661622210" fg:w="18888609"/><text x="89.0151%" y="3535.50">se..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (18,888,609 samples, 2.53%)</title><rect x="88.7651%" y="3509" width="2.5342%" height="15" fill="rgb(239,200,7)" fg:x="661622210" fg:w="18888609"/><text x="89.0151%" y="3519.50">&lt;&amp;..</text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_seq (18,888,609 samples, 2.53%)</title><rect x="88.7651%" y="3493" width="2.5342%" height="15" fill="rgb(227,115,8)" fg:x="661622210" fg:w="18888609"/><text x="89.0151%" y="3503.50">&lt;s..</text></g><g><title>serde::de::SeqAccess::next_element (18,888,609 samples, 2.53%)</title><rect x="88.7651%" y="3477" width="2.5342%" height="15" fill="rgb(215,189,27)" fg:x="661622210" fg:w="18888609"/><text x="89.0151%" y="3487.50">se..</text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (18,888,609 samples, 2.53%)</title><rect x="88.7651%" y="3461" width="2.5342%" height="15" fill="rgb(251,216,39)" fg:x="661622210" fg:w="18888609"/><text x="89.0151%" y="3471.50">&lt;s..</text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (18,888,609 samples, 2.53%)</title><rect x="88.7651%" y="3445" width="2.5342%" height="15" fill="rgb(207,29,47)" fg:x="661622210" fg:w="18888609"/><text x="89.0151%" y="3455.50">&lt;c..</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (18,888,609 samples, 2.53%)</title><rect x="88.7651%" y="3429" width="2.5342%" height="15" fill="rgb(210,71,34)" fg:x="661622210" fg:w="18888609"/><text x="89.0151%" y="3439.50">se..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (18,888,609 samples, 2.53%)</title><rect x="88.7651%" y="3413" width="2.5342%" height="15" fill="rgb(253,217,51)" fg:x="661622210" fg:w="18888609"/><text x="89.0151%" y="3423.50">&lt;&amp;..</text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (18,888,609 samples, 2.53%)</title><rect x="88.7651%" y="3397" width="2.5342%" height="15" fill="rgb(222,117,46)" fg:x="661622210" fg:w="18888609"/><text x="89.0151%" y="3407.50">&lt;s..</text></g><g><title>serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;::insert (880,842 samples, 0.12%)</title><rect x="91.1811%" y="3381" width="0.1182%" height="15" fill="rgb(226,132,6)" fg:x="679629977" fg:w="880842"/><text x="91.4311%" y="3391.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (880,842 samples, 0.12%)</title><rect x="91.1811%" y="3365" width="0.1182%" height="15" fill="rgb(254,145,51)" fg:x="679629977" fg:w="880842"/><text x="91.4311%" y="3375.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::entry (880,842 samples, 0.12%)</title><rect x="91.1811%" y="3349" width="0.1182%" height="15" fill="rgb(231,199,27)" fg:x="679629977" fg:w="880842"/><text x="91.4311%" y="3359.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (880,842 samples, 0.12%)</title><rect x="91.1811%" y="3333" width="0.1182%" height="15" fill="rgb(245,158,14)" fg:x="679629977" fg:w="880842"/><text x="91.4311%" y="3343.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (880,842 samples, 0.12%)</title><rect x="91.1811%" y="3317" width="0.1182%" height="15" fill="rgb(240,113,14)" fg:x="679629977" fg:w="880842"/><text x="91.4311%" y="3327.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (880,842 samples, 0.12%)</title><rect x="91.1811%" y="3301" width="0.1182%" height="15" fill="rgb(210,20,13)" fg:x="679629977" fg:w="880842"/><text x="91.4311%" y="3311.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::Ord&gt;::cmp (880,842 samples, 0.12%)</title><rect x="91.1811%" y="3285" width="0.1182%" height="15" fill="rgb(241,144,13)" fg:x="679629977" fg:w="880842"/><text x="91.4311%" y="3295.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::cmp::Ord&gt;::cmp (880,842 samples, 0.12%)</title><rect x="91.1811%" y="3269" width="0.1182%" height="15" fill="rgb(235,43,34)" fg:x="679629977" fg:w="880842"/><text x="91.4311%" y="3279.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::Ord for [T]&gt;::cmp (880,842 samples, 0.12%)</title><rect x="91.1811%" y="3253" width="0.1182%" height="15" fill="rgb(208,36,20)" fg:x="679629977" fg:w="880842"/><text x="91.4311%" y="3263.50"></text></g><g><title>&lt;A as core::slice::cmp::SliceOrd&gt;::compare (880,842 samples, 0.12%)</title><rect x="91.1811%" y="3237" width="0.1182%" height="15" fill="rgb(239,204,10)" fg:x="679629977" fg:w="880842"/><text x="91.4311%" y="3247.50"></text></g><g><title>[libc.so.6] (880,842 samples, 0.12%)</title><rect x="91.1811%" y="3221" width="0.1182%" height="15" fill="rgb(217,84,43)" fg:x="679629977" fg:w="880842"/><text x="91.4311%" y="3231.50"></text></g><g><title>main::benchmark::parse_web_layout_trace (21,970,181 samples, 2.95%)</title><rect x="88.4737%" y="4837" width="2.9476%" height="15" fill="rgb(241,170,50)" fg:x="659449609" fg:w="21970181"/><text x="88.7237%" y="4847.50">ma..</text></g><g><title>serde_json::de::from_str (21,970,181 samples, 2.95%)</title><rect x="88.4737%" y="4821" width="2.9476%" height="15" fill="rgb(226,205,29)" fg:x="659449609" fg:w="21970181"/><text x="88.7237%" y="4831.50">se..</text></g><g><title>serde_json::de::from_trait (21,970,181 samples, 2.95%)</title><rect x="88.4737%" y="4805" width="2.9476%" height="15" fill="rgb(233,113,1)" fg:x="659449609" fg:w="21970181"/><text x="88.7237%" y="4815.50">se..</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (21,970,181 samples, 2.95%)</title><rect x="88.4737%" y="4789" width="2.9476%" height="15" fill="rgb(253,98,13)" fg:x="659449609" fg:w="21970181"/><text x="88.7237%" y="4799.50">se..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (21,970,181 samples, 2.95%)</title><rect x="88.4737%" y="4773" width="2.9476%" height="15" fill="rgb(211,115,12)" fg:x="659449609" fg:w="21970181"/><text x="88.7237%" y="4783.50">&lt;&amp;..</text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (21,970,181 samples, 2.95%)</title><rect x="88.4737%" y="4757" width="2.9476%" height="15" fill="rgb(208,12,16)" fg:x="659449609" fg:w="21970181"/><text x="88.7237%" y="4767.50">&lt;s..</text></g><g><title>serde::de::MapAccess::next_entry (21,970,181 samples, 2.95%)</title><rect x="88.4737%" y="4741" width="2.9476%" height="15" fill="rgb(237,193,54)" fg:x="659449609" fg:w="21970181"/><text x="88.7237%" y="4751.50">se..</text></g><g><title>serde::de::MapAccess::next_entry_seed (21,970,181 samples, 2.95%)</title><rect x="88.4737%" y="4725" width="2.9476%" height="15" fill="rgb(243,22,42)" fg:x="659449609" fg:w="21970181"/><text x="88.7237%" y="4735.50">se..</text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (21,970,181 samples, 2.95%)</title><rect x="88.4737%" y="4709" width="2.9476%" height="15" fill="rgb(233,151,36)" fg:x="659449609" fg:w="21970181"/><text x="88.7237%" y="4719.50">&lt;s..</text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (21,970,181 samples, 2.95%)</title><rect x="88.4737%" y="4693" width="2.9476%" height="15" fill="rgb(237,57,45)" fg:x="659449609" fg:w="21970181"/><text x="88.7237%" y="4703.50">&lt;c..</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (21,970,181 samples, 2.95%)</title><rect x="88.4737%" y="4677" width="2.9476%" height="15" fill="rgb(221,88,17)" fg:x="659449609" fg:w="21970181"/><text x="88.7237%" y="4687.50">se..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (21,970,181 samples, 2.95%)</title><rect x="88.4737%" y="4661" width="2.9476%" height="15" fill="rgb(230,79,15)" fg:x="659449609" fg:w="21970181"/><text x="88.7237%" y="4671.50">&lt;&amp;..</text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (21,970,181 samples, 2.95%)</title><rect x="88.4737%" y="4645" width="2.9476%" height="15" fill="rgb(213,57,13)" fg:x="659449609" fg:w="21970181"/><text x="88.7237%" y="4655.50">&lt;s..</text></g><g><title>serde::de::MapAccess::next_entry (21,970,181 samples, 2.95%)</title><rect x="88.4737%" y="4629" width="2.9476%" height="15" fill="rgb(222,116,39)" fg:x="659449609" fg:w="21970181"/><text x="88.7237%" y="4639.50">se..</text></g><g><title>serde::de::MapAccess::next_entry_seed (21,970,181 samples, 2.95%)</title><rect x="88.4737%" y="4613" width="2.9476%" height="15" fill="rgb(245,107,2)" fg:x="659449609" fg:w="21970181"/><text x="88.7237%" y="4623.50">se..</text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (21,970,181 samples, 2.95%)</title><rect x="88.4737%" y="4597" width="2.9476%" height="15" fill="rgb(238,1,10)" fg:x="659449609" fg:w="21970181"/><text x="88.7237%" y="4607.50">&lt;s..</text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (21,970,181 samples, 2.95%)</title><rect x="88.4737%" y="4581" width="2.9476%" height="15" fill="rgb(249,4,48)" fg:x="659449609" fg:w="21970181"/><text x="88.7237%" y="4591.50">&lt;c..</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (21,970,181 samples, 2.95%)</title><rect x="88.4737%" y="4565" width="2.9476%" height="15" fill="rgb(223,151,18)" fg:x="659449609" fg:w="21970181"/><text x="88.7237%" y="4575.50">se..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (21,970,181 samples, 2.95%)</title><rect x="88.4737%" y="4549" width="2.9476%" height="15" fill="rgb(227,65,43)" fg:x="659449609" fg:w="21970181"/><text x="88.7237%" y="4559.50">&lt;&amp;..</text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_seq (21,970,181 samples, 2.95%)</title><rect x="88.4737%" y="4533" width="2.9476%" height="15" fill="rgb(218,40,45)" fg:x="659449609" fg:w="21970181"/><text x="88.7237%" y="4543.50">&lt;s..</text></g><g><title>serde::de::SeqAccess::next_element (21,970,181 samples, 2.95%)</title><rect x="88.4737%" y="4517" width="2.9476%" height="15" fill="rgb(252,121,31)" fg:x="659449609" fg:w="21970181"/><text x="88.7237%" y="4527.50">se..</text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (21,970,181 samples, 2.95%)</title><rect x="88.4737%" y="4501" width="2.9476%" height="15" fill="rgb(219,158,43)" fg:x="659449609" fg:w="21970181"/><text x="88.7237%" y="4511.50">&lt;s..</text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (21,970,181 samples, 2.95%)</title><rect x="88.4737%" y="4485" width="2.9476%" height="15" fill="rgb(231,162,42)" fg:x="659449609" fg:w="21970181"/><text x="88.7237%" y="4495.50">&lt;c..</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (21,970,181 samples, 2.95%)</title><rect x="88.4737%" y="4469" width="2.9476%" height="15" fill="rgb(217,179,25)" fg:x="659449609" fg:w="21970181"/><text x="88.7237%" y="4479.50">se..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (21,970,181 samples, 2.95%)</title><rect x="88.4737%" y="4453" width="2.9476%" height="15" fill="rgb(206,212,31)" fg:x="659449609" fg:w="21970181"/><text x="88.7237%" y="4463.50">&lt;&amp;..</text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (21,970,181 samples, 2.95%)</title><rect x="88.4737%" y="4437" width="2.9476%" height="15" fill="rgb(235,144,12)" fg:x="659449609" fg:w="21970181"/><text x="88.7237%" y="4447.50">&lt;s..</text></g><g><title>serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;::insert (908,971 samples, 0.12%)</title><rect x="91.2993%" y="4421" width="0.1220%" height="15" fill="rgb(213,51,10)" fg:x="680510819" fg:w="908971"/><text x="91.5493%" y="4431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (908,971 samples, 0.12%)</title><rect x="91.2993%" y="4405" width="0.1220%" height="15" fill="rgb(231,145,14)" fg:x="680510819" fg:w="908971"/><text x="91.5493%" y="4415.50"></text></g><g><title>std::panic::catch_unwind (596,396,131 samples, 80.01%)</title><rect x="11.5815%" y="4981" width="80.0142%" height="15" fill="rgb(235,15,28)" fg:x="86324353" fg:w="596396131"/><text x="11.8315%" y="4991.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (596,396,131 samples, 80.01%)</title><rect x="11.5815%" y="4965" width="80.0142%" height="15" fill="rgb(237,206,10)" fg:x="86324353" fg:w="596396131"/><text x="11.8315%" y="4975.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (596,396,131 samples, 80.01%)</title><rect x="11.5815%" y="4949" width="80.0142%" height="15" fill="rgb(236,227,27)" fg:x="86324353" fg:w="596396131"/><text x="11.8315%" y="4959.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (596,396,131 samples, 80.01%)</title><rect x="11.5815%" y="4933" width="80.0142%" height="15" fill="rgb(246,83,35)" fg:x="86324353" fg:w="596396131"/><text x="11.8315%" y="4943.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (596,396,131 samples, 80.01%)</title><rect x="11.5815%" y="4917" width="80.0142%" height="15" fill="rgb(220,136,24)" fg:x="86324353" fg:w="596396131"/><text x="11.8315%" y="4927.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (596,396,131 samples, 80.01%)</title><rect x="11.5815%" y="4901" width="80.0142%" height="15" fill="rgb(217,3,25)" fg:x="86324353" fg:w="596396131"/><text x="11.8315%" y="4911.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (596,396,131 samples, 80.01%)</title><rect x="11.5815%" y="4885" width="80.0142%" height="15" fill="rgb(239,24,14)" fg:x="86324353" fg:w="596396131"/><text x="11.8315%" y="4895.50">core::ops::function::FnOnce::call_once</text></g><g><title>main::main (596,396,131 samples, 80.01%)</title><rect x="11.5815%" y="4869" width="80.0142%" height="15" fill="rgb(244,16,53)" fg:x="86324353" fg:w="596396131"/><text x="11.8315%" y="4879.50">main::main</text></g><g><title>main::benchmark::run_web_browser_layout_trace_benchmark (590,356,514 samples, 79.20%)</title><rect x="12.3918%" y="4853" width="79.2039%" height="15" fill="rgb(208,175,44)" fg:x="92363970" fg:w="590356514"/><text x="12.6418%" y="4863.50">main::benchmark::run_web_browser_layout_trace_benchmark</text></g><g><title>std::io::stdio::_print (1,300,694 samples, 0.17%)</title><rect x="91.4212%" y="4837" width="0.1745%" height="15" fill="rgb(252,18,48)" fg:x="681419790" fg:w="1300694"/><text x="91.6712%" y="4847.50"></text></g><g><title>std::io::stdio::print_to (1,300,694 samples, 0.17%)</title><rect x="91.4212%" y="4821" width="0.1745%" height="15" fill="rgb(234,199,32)" fg:x="681419790" fg:w="1300694"/><text x="91.6712%" y="4831.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (1,300,694 samples, 0.17%)</title><rect x="91.4212%" y="4805" width="0.1745%" height="15" fill="rgb(225,77,54)" fg:x="681419790" fg:w="1300694"/><text x="91.6712%" y="4815.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (1,300,694 samples, 0.17%)</title><rect x="91.4212%" y="4789" width="0.1745%" height="15" fill="rgb(225,42,25)" fg:x="681419790" fg:w="1300694"/><text x="91.6712%" y="4799.50"></text></g><g><title>std::io::Write::write_fmt (1,300,694 samples, 0.17%)</title><rect x="91.4212%" y="4773" width="0.1745%" height="15" fill="rgb(242,227,46)" fg:x="681419790" fg:w="1300694"/><text x="91.6712%" y="4783.50"></text></g><g><title>core::fmt::write (1,300,694 samples, 0.17%)</title><rect x="91.4212%" y="4757" width="0.1745%" height="15" fill="rgb(246,197,35)" fg:x="681419790" fg:w="1300694"/><text x="91.6712%" y="4767.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (1,300,694 samples, 0.17%)</title><rect x="91.4212%" y="4741" width="0.1745%" height="15" fill="rgb(215,159,26)" fg:x="681419790" fg:w="1300694"/><text x="91.6712%" y="4751.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (1,300,694 samples, 0.17%)</title><rect x="91.4212%" y="4725" width="0.1745%" height="15" fill="rgb(212,194,50)" fg:x="681419790" fg:w="1300694"/><text x="91.6712%" y="4735.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (1,300,694 samples, 0.17%)</title><rect x="91.4212%" y="4709" width="0.1745%" height="15" fill="rgb(246,132,1)" fg:x="681419790" fg:w="1300694"/><text x="91.6712%" y="4719.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (1,300,694 samples, 0.17%)</title><rect x="91.4212%" y="4693" width="0.1745%" height="15" fill="rgb(217,71,7)" fg:x="681419790" fg:w="1300694"/><text x="91.6712%" y="4703.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (1,300,694 samples, 0.17%)</title><rect x="91.4212%" y="4677" width="0.1745%" height="15" fill="rgb(252,59,32)" fg:x="681419790" fg:w="1300694"/><text x="91.6712%" y="4687.50"></text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (1,300,694 samples, 0.17%)</title><rect x="91.4212%" y="4661" width="0.1745%" height="15" fill="rgb(253,204,25)" fg:x="681419790" fg:w="1300694"/><text x="91.6712%" y="4671.50"></text></g><g><title>&lt;std::sys::pal::unix::stdio::Stdout as std::io::Write&gt;::write (1,300,694 samples, 0.17%)</title><rect x="91.4212%" y="4645" width="0.1745%" height="15" fill="rgb(232,21,16)" fg:x="681419790" fg:w="1300694"/><text x="91.6712%" y="4655.50"></text></g><g><title>std::sys::pal::unix::fd::FileDesc::write (1,300,694 samples, 0.17%)</title><rect x="91.4212%" y="4629" width="0.1745%" height="15" fill="rgb(248,90,29)" fg:x="681419790" fg:w="1300694"/><text x="91.6712%" y="4639.50"></text></g><g><title>write (1,300,694 samples, 0.17%)</title><rect x="91.4212%" y="4613" width="0.1745%" height="15" fill="rgb(249,223,7)" fg:x="681419790" fg:w="1300694"/><text x="91.6712%" y="4623.50"></text></g><g><title>[libc.so.6] (1,300,694 samples, 0.17%)</title><rect x="91.4212%" y="4597" width="0.1745%" height="15" fill="rgb(231,119,42)" fg:x="681419790" fg:w="1300694"/><text x="91.6712%" y="4607.50"></text></g><g><title>[libc.so.6] (1,300,694 samples, 0.17%)</title><rect x="91.4212%" y="4581" width="0.1745%" height="15" fill="rgb(215,41,35)" fg:x="681419790" fg:w="1300694"/><text x="91.6712%" y="4591.50"></text></g><g><title>_start (596,897,635 samples, 80.08%)</title><rect x="11.5815%" y="5125" width="80.0815%" height="15" fill="rgb(220,44,45)" fg:x="86324353" fg:w="596897635"/><text x="11.8315%" y="5135.50">_start</text></g><g><title>__libc_start_main (596,897,635 samples, 80.08%)</title><rect x="11.5815%" y="5109" width="80.0815%" height="15" fill="rgb(253,197,36)" fg:x="86324353" fg:w="596897635"/><text x="11.8315%" y="5119.50">__libc_start_main</text></g><g><title>[libc.so.6] (596,897,635 samples, 80.08%)</title><rect x="11.5815%" y="5093" width="80.0815%" height="15" fill="rgb(245,225,54)" fg:x="86324353" fg:w="596897635"/><text x="11.8315%" y="5103.50">[libc.so.6]</text></g><g><title>main (596,897,635 samples, 80.08%)</title><rect x="11.5815%" y="5077" width="80.0815%" height="15" fill="rgb(239,94,37)" fg:x="86324353" fg:w="596897635"/><text x="11.8315%" y="5087.50">main</text></g><g><title>std::rt::lang_start_internal (596,897,635 samples, 80.08%)</title><rect x="11.5815%" y="5061" width="80.0815%" height="15" fill="rgb(242,217,10)" fg:x="86324353" fg:w="596897635"/><text x="11.8315%" y="5071.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (596,897,635 samples, 80.08%)</title><rect x="11.5815%" y="5045" width="80.0815%" height="15" fill="rgb(250,193,7)" fg:x="86324353" fg:w="596897635"/><text x="11.8315%" y="5055.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (596,897,635 samples, 80.08%)</title><rect x="11.5815%" y="5029" width="80.0815%" height="15" fill="rgb(230,104,19)" fg:x="86324353" fg:w="596897635"/><text x="11.8315%" y="5039.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (596,897,635 samples, 80.08%)</title><rect x="11.5815%" y="5013" width="80.0815%" height="15" fill="rgb(230,181,4)" fg:x="86324353" fg:w="596897635"/><text x="11.8315%" y="5023.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (596,897,635 samples, 80.08%)</title><rect x="11.5815%" y="4997" width="80.0815%" height="15" fill="rgb(216,219,49)" fg:x="86324353" fg:w="596897635"/><text x="11.8315%" y="5007.50">std::rt::lang_start_internal::_{{closure}}</text></g><g><title>std::rt::init (501,504 samples, 0.07%)</title><rect x="91.5957%" y="4981" width="0.0673%" height="15" fill="rgb(254,144,0)" fg:x="682720484" fg:w="501504"/><text x="91.8457%" y="4991.50"></text></g><g><title>std::sys::pal::unix::init (501,504 samples, 0.07%)</title><rect x="91.5957%" y="4965" width="0.0673%" height="15" fill="rgb(205,209,38)" fg:x="682720484" fg:w="501504"/><text x="91.8457%" y="4975.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::imp::init (501,504 samples, 0.07%)</title><rect x="91.5957%" y="4949" width="0.0673%" height="15" fill="rgb(240,21,42)" fg:x="682720484" fg:w="501504"/><text x="91.8457%" y="4959.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::imp::install_main_guard (501,504 samples, 0.07%)</title><rect x="91.5957%" y="4933" width="0.0673%" height="15" fill="rgb(241,132,3)" fg:x="682720484" fg:w="501504"/><text x="91.8457%" y="4943.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::imp::install_main_guard_linux (501,504 samples, 0.07%)</title><rect x="91.5957%" y="4917" width="0.0673%" height="15" fill="rgb(225,14,2)" fg:x="682720484" fg:w="501504"/><text x="91.8457%" y="4927.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::imp::stack_start_aligned (501,504 samples, 0.07%)</title><rect x="91.5957%" y="4901" width="0.0673%" height="15" fill="rgb(210,141,35)" fg:x="682720484" fg:w="501504"/><text x="91.8457%" y="4911.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::imp::get_stack_start (501,504 samples, 0.07%)</title><rect x="91.5957%" y="4885" width="0.0673%" height="15" fill="rgb(251,14,44)" fg:x="682720484" fg:w="501504"/><text x="91.8457%" y="4895.50"></text></g><g><title>pthread_getattr_np (501,504 samples, 0.07%)</title><rect x="91.5957%" y="4869" width="0.0673%" height="15" fill="rgb(247,48,18)" fg:x="682720484" fg:w="501504"/><text x="91.8457%" y="4879.50"></text></g><g><title>__isoc23_sscanf (501,504 samples, 0.07%)</title><rect x="91.5957%" y="4853" width="0.0673%" height="15" fill="rgb(225,0,40)" fg:x="682720484" fg:w="501504"/><text x="91.8457%" y="4863.50"></text></g><g><title>[libc.so.6] (501,504 samples, 0.07%)</title><rect x="91.5957%" y="4837" width="0.0673%" height="15" fill="rgb(221,31,33)" fg:x="682720484" fg:w="501504"/><text x="91.8457%" y="4847.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (802,804 samples, 0.11%)</title><rect x="91.6630%" y="5125" width="0.1077%" height="15" fill="rgb(237,42,40)" fg:x="683221988" fg:w="802804"/><text x="91.9130%" y="5135.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2,485,456 samples, 0.33%)</title><rect x="91.7707%" y="5125" width="0.3335%" height="15" fill="rgb(233,51,29)" fg:x="684024792" fg:w="2485456"/><text x="92.0207%" y="5135.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Dying,K,V&gt;::deallocating_end (1,155,118 samples, 0.15%)</title><rect x="91.9492%" y="5109" width="0.1550%" height="15" fill="rgb(226,58,20)" fg:x="685355130" fg:w="1155118"/><text x="92.1992%" y="5119.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_end (1,155,118 samples, 0.15%)</title><rect x="91.9492%" y="5093" width="0.1550%" height="15" fill="rgb(208,98,7)" fg:x="685355130" fg:w="1155118"/><text x="92.1992%" y="5103.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::deallocate_and_ascend (1,155,118 samples, 0.15%)</title><rect x="91.9492%" y="5077" width="0.1550%" height="15" fill="rgb(228,143,44)" fg:x="685355130" fg:w="1155118"/><text x="92.1992%" y="5087.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1,155,118 samples, 0.15%)</title><rect x="91.9492%" y="5061" width="0.1550%" height="15" fill="rgb(246,55,38)" fg:x="685355130" fg:w="1155118"/><text x="92.1992%" y="5071.50"></text></g><g><title>alloc::alloc::dealloc (1,155,118 samples, 0.15%)</title><rect x="91.9492%" y="5045" width="0.1550%" height="15" fill="rgb(247,87,16)" fg:x="685355130" fg:w="1155118"/><text x="92.1992%" y="5055.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert_entry (927,873 samples, 0.12%)</title><rect x="92.1042%" y="5125" width="0.1245%" height="15" fill="rgb(234,129,42)" fg:x="686510248" fg:w="927873"/><text x="92.3542%" y="5135.50"></text></g><g><title>cfree (1,329,308 samples, 0.18%)</title><rect x="92.2287%" y="5125" width="0.1783%" height="15" fill="rgb(220,82,16)" fg:x="687438121" fg:w="1329308"/><text x="92.4787%" y="5135.50"></text></g><g><title>core::hash::BuildHasher::hash_one (11,169,197 samples, 1.50%)</title><rect x="92.4070%" y="5125" width="1.4985%" height="15" fill="rgb(211,88,4)" fg:x="688767429" fg:w="11169197"/><text x="92.6570%" y="5135.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3,583,041 samples, 0.48%)</title><rect x="93.4248%" y="5109" width="0.4807%" height="15" fill="rgb(248,151,21)" fg:x="696353585" fg:w="3583041"/><text x="93.6748%" y="5119.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (3,583,041 samples, 0.48%)</title><rect x="93.4248%" y="5093" width="0.4807%" height="15" fill="rgb(238,163,6)" fg:x="696353585" fg:w="3583041"/><text x="93.6748%" y="5103.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (3,583,041 samples, 0.48%)</title><rect x="93.4248%" y="5077" width="0.4807%" height="15" fill="rgb(209,183,11)" fg:x="696353585" fg:w="3583041"/><text x="93.6748%" y="5087.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (3,583,041 samples, 0.48%)</title><rect x="93.4248%" y="5061" width="0.4807%" height="15" fill="rgb(219,37,20)" fg:x="696353585" fg:w="3583041"/><text x="93.6748%" y="5071.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (3,583,041 samples, 0.48%)</title><rect x="93.4248%" y="5045" width="0.4807%" height="15" fill="rgb(210,158,4)" fg:x="696353585" fg:w="3583041"/><text x="93.6748%" y="5055.50"></text></g><g><title>core::hash::Hasher::write_u8 (2,424,676 samples, 0.33%)</title><rect x="93.5802%" y="5029" width="0.3253%" height="15" fill="rgb(221,167,53)" fg:x="697511950" fg:w="2424676"/><text x="93.8302%" y="5039.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1,218,085 samples, 0.16%)</title><rect x="93.9055%" y="5125" width="0.1634%" height="15" fill="rgb(237,151,45)" fg:x="699936626" fg:w="1218085"/><text x="94.1555%" y="5135.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1,261,585 samples, 0.17%)</title><rect x="94.0689%" y="5125" width="0.1693%" height="15" fill="rgb(231,39,3)" fg:x="701154711" fg:w="1261585"/><text x="94.3189%" y="5135.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1,251,283 samples, 0.17%)</title><rect x="94.2382%" y="5125" width="0.1679%" height="15" fill="rgb(212,167,28)" fg:x="702416296" fg:w="1251283"/><text x="94.4882%" y="5135.50"></text></g><g><title>css_bitvector_compiler::BitVector::is_bit_set (13,969,726 samples, 1.87%)</title><rect x="94.4061%" y="5125" width="1.8742%" height="15" fill="rgb(232,178,8)" fg:x="703667579" fg:w="13969726"/><text x="94.6561%" y="5135.50">c..</text></g><g><title>hashbrown::map::make_hash (1,174,647 samples, 0.16%)</title><rect x="97.9176%" y="5061" width="0.1576%" height="15" fill="rgb(225,151,20)" fg:x="729841355" fg:w="1174647"/><text x="98.1676%" y="5071.50"></text></g><g><title>main::benchmark::node_has_class_id (15,860,428 samples, 2.13%)</title><rect x="96.2803%" y="5125" width="2.1279%" height="15" fill="rgb(238,3,37)" fg:x="717637305" fg:w="15860428"/><text x="96.5303%" y="5135.50">m..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (3,656,378 samples, 0.49%)</title><rect x="97.9176%" y="5109" width="0.4906%" height="15" fill="rgb(251,147,42)" fg:x="729841355" fg:w="3656378"/><text x="98.1676%" y="5119.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (3,656,378 samples, 0.49%)</title><rect x="97.9176%" y="5093" width="0.4906%" height="15" fill="rgb(208,173,10)" fg:x="729841355" fg:w="3656378"/><text x="98.1676%" y="5103.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (3,656,378 samples, 0.49%)</title><rect x="97.9176%" y="5077" width="0.4906%" height="15" fill="rgb(246,225,4)" fg:x="729841355" fg:w="3656378"/><text x="98.1676%" y="5087.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (2,481,731 samples, 0.33%)</title><rect x="98.0752%" y="5061" width="0.3330%" height="15" fill="rgb(248,102,6)" fg:x="731016002" fg:w="2481731"/><text x="98.3252%" y="5071.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (2,481,731 samples, 0.33%)</title><rect x="98.0752%" y="5045" width="0.3330%" height="15" fill="rgb(232,6,21)" fg:x="731016002" fg:w="2481731"/><text x="98.3252%" y="5055.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (2,481,731 samples, 0.33%)</title><rect x="98.0752%" y="5029" width="0.3330%" height="15" fill="rgb(221,179,22)" fg:x="731016002" fg:w="2481731"/><text x="98.3252%" y="5039.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (2,481,731 samples, 0.33%)</title><rect x="98.0752%" y="5013" width="0.3330%" height="15" fill="rgb(252,50,20)" fg:x="731016002" fg:w="2481731"/><text x="98.3252%" y="5023.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (2,481,731 samples, 0.33%)</title><rect x="98.0752%" y="4997" width="0.3330%" height="15" fill="rgb(222,56,38)" fg:x="731016002" fg:w="2481731"/><text x="98.3252%" y="5007.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (2,481,731 samples, 0.33%)</title><rect x="98.0752%" y="4981" width="0.3330%" height="15" fill="rgb(206,193,29)" fg:x="731016002" fg:w="2481731"/><text x="98.3252%" y="4991.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (2,481,731 samples, 0.33%)</title><rect x="98.0752%" y="4965" width="0.3330%" height="15" fill="rgb(239,192,45)" fg:x="731016002" fg:w="2481731"/><text x="98.3252%" y="4975.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (2,481,731 samples, 0.33%)</title><rect x="98.0752%" y="4949" width="0.3330%" height="15" fill="rgb(254,18,36)" fg:x="731016002" fg:w="2481731"/><text x="98.3252%" y="4959.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (2,481,731 samples, 0.33%)</title><rect x="98.0752%" y="4933" width="0.3330%" height="15" fill="rgb(221,127,11)" fg:x="731016002" fg:w="2481731"/><text x="98.3252%" y="4943.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (2,481,731 samples, 0.33%)</title><rect x="98.0752%" y="4917" width="0.3330%" height="15" fill="rgb(234,146,35)" fg:x="731016002" fg:w="2481731"/><text x="98.3252%" y="4927.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (2,481,731 samples, 0.33%)</title><rect x="98.0752%" y="4901" width="0.3330%" height="15" fill="rgb(254,201,37)" fg:x="731016002" fg:w="2481731"/><text x="98.3252%" y="4911.50"></text></g><g><title>main::benchmark::process_node_generated_from_scratch (2,406,431 samples, 0.32%)</title><rect x="98.4082%" y="5125" width="0.3229%" height="15" fill="rgb(211,202,23)" fg:x="733497733" fg:w="2406431"/><text x="98.6582%" y="5135.50"></text></g><g><title>main::benchmark::matches_class_id (1,172,287 samples, 0.16%)</title><rect x="98.5737%" y="5109" width="0.1573%" height="15" fill="rgb(237,91,2)" fg:x="734731877" fg:w="1172287"/><text x="98.8237%" y="5119.50"></text></g><g><title>all (745,362,640 samples, 100%)</title><rect x="0.0000%" y="5157" width="100.0000%" height="15" fill="rgb(226,228,36)" fg:x="0" fg:w="745362640"/><text x="0.2500%" y="5167.50"></text></g><g><title>main (745,362,640 samples, 100.00%)</title><rect x="0.0000%" y="5141" width="100.0000%" height="15" fill="rgb(213,63,50)" fg:x="0" fg:w="745362640"/><text x="0.2500%" y="5151.50">main</text></g><g><title>main::benchmark::process_node_generated_incremental (9,458,476 samples, 1.27%)</title><rect x="98.7310%" y="5125" width="1.2690%" height="15" fill="rgb(235,194,19)" fg:x="735904164" fg:w="9458476"/><text x="98.9810%" y="5135.50"></text></g><g><title>main::benchmark::matches_class_id (4,506,723 samples, 0.60%)</title><rect x="99.3954%" y="5109" width="0.6046%" height="15" fill="rgb(207,204,18)" fg:x="740855917" fg:w="4506723"/><text x="99.6454%" y="5119.50"></text></g></svg></svg>